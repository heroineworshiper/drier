// AHT20 source code: 
// https://github.com/adafruit/Adafruit_AHTX0/blob/master/
// I2C interface:
// https://github.com/adafruit/Adafruit_BusIO/blob/master/Adafruit_I2CDevice.cpp

// AHT20 datasheet:
// http://www.aosong.com/en/products-32.html

// Configure an XBee Pro 900 for the baud rate
// 
// enter command mode.  Takes a while to print OK
// +++
// set the frequency
// atch17 or atch0c
// set destination address to broadcast mode
// atdlffff
// set receive address to broadcast mode
// atmyffff
// packet timeout
// atro03
// baud rate  7=115200 6=57600 3=9600
// atbd 3
// change terminal baud rate now & restart command mode with +++
// flash configuration
// atwr
// exit command mode
// atcn


// PIC18LF1220 Configuration Bit Settings

// 'C' source line config statements

// CONFIG1H
#pragma config OSC = INTIO2     // Oscillator Selection bits (Internal RC oscillator, port function on RA6 and port function on RA7)
#pragma config FSCM = ON        // Fail-Safe Clock Monitor Enable bit (Fail-Safe Clock Monitor enabled)
#pragma config IESO = ON        // Internal External Switchover bit (Internal External Switchover mode enabled)

// CONFIG2L
#pragma config PWRT = ON        // Power-up Timer Enable bit (PWRT enabled)
#pragma config BOR = ON         // Brown-out Reset Enable bit (Brown-out Reset enabled)
#pragma config BORV = 27        // Brown-out Reset Voltage bits (VBOR set to 2.7V)

// CONFIG2H
#pragma config WDT = ON         // Watchdog Timer Enable bit (WDT enabled)
#pragma config WDTPS = 32768    // Watchdog Timer Postscale Select bits (1:32768)

// CONFIG3H
#pragma config MCLRE = ON       // MCLR Pin Enable bit (MCLR pin enabled, RA5 input pin disabled)

// CONFIG4L
#pragma config STVR = ON        // Stack Full/Underflow Reset Enable bit (Stack full/underflow will cause Reset)
#pragma config LVP = OFF        // Low-Voltage ICSP Enable bit (Low-Voltage ICSP disabled)

// CONFIG5L
#pragma config CP0 = OFF        // Code Protection bit (Block 0 (00200-0007FFh) not code-protected)
#pragma config CP1 = OFF        // Code Protection bit (Block 1 (000800-000FFFh) not code-protected)

// CONFIG5H
#pragma config CPB = OFF        // Boot Block Code Protection bit (Boot Block (000000-0001FFh) not code-protected)
#pragma config CPD = OFF        // Data EEPROM Code Protection bit (Data EEPROM not code-protected)

// CONFIG6L
#pragma config WRT0 = OFF       // Write Protection bit (Block 0 (00200-0007FFh) not write-protected)
#pragma config WRT1 = OFF       // Write Protection bit (Block 1 (000800-000FFFh) not write-protected)

// CONFIG6H
#pragma config WRTC = OFF       // Configuration Register Write Protection bit (Configuration registers (300000-3000FFh) not write-protected)
#pragma config WRTB = OFF       // Boot Block Write Protection bit (Boot Block (000000-0001FFh) not write-protected)
#pragma config WRTD = OFF       // Data EEPROM Write Protection bit (Data EEPROM not write-protected)

// CONFIG7L
#pragma config EBTR0 = OFF      // Table Read Protection bit (Block 0 (00200-0007FFh) not protected from table reads executed in other blocks)
#pragma config EBTR1 = OFF      // Table Read Protection bit (Block 1 (000800-000FFFh) not protected from table reads executed in other blocks)

// CONFIG7H
#pragma config EBTRB = OFF      // Boot Block Table Read Protection bit (Boot Block (000000-0001FFh) not protected from table reads executed in other blocks)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>

#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <pic18lf1320.h>

// A0 - LED
// A1 - pump
// A3 - fan
// B3 - I2C 0 clock
// B2 - I2C 0 data
// A7 - I2C 1 clock
// A6 - I2C 1 data

//#define TEST_AHT20
// always toggle the pump instead of testing dew point
//#define TEST_PUMP

// fixed point multiple
#define FIXED 256

// turn on if inside dew point is this much above outside dew point
#define ON_THRESHOLD (2 * FIXED)

// turn off if inside dew point is this much above outside dew point
#define OFF_THRESHOLD (1 * FIXED)

// time between sensor readings
#define PUMP_INTERVAL (HZ * 5)
// duty cycle as number of sensor readings
// this limits the maximum rate of drying but also prevents motor burnout
#define DUTY_CYCLE_ON 24
#define DUTY_CYCLE_OFF 6
// time between fuse tests
#define FUSE_INTERVAL (HZ / 4)
// ticks to wait after starting
#define FUSE_DEADBAND (HZ)
// ADC value for blown fuse
#define FUSE_THRESHOLD 210

uint32_t fuse_accum;
uint8_t fuse_value;
uint16_t fuse_count;

#define PUMP_TRIS TRISAbits.TRISA1
#define PUMP_LAT LATAbits.LATA1

#define FAN_TRIS TRISAbits.TRISA3
#define FAN_LAT LATAbits.LATA3

#define LED_TRIS TRISAbits.TRISA0
#define LED_LAT LATAbits.LATA0

// Mane timer values
#define HZ 32
#define TIMER_VALUE -7812
volatile uint8_t pump_tick = 0;
// count ticks for averaging fuse value
volatile uint8_t fuse_tick = 0;
volatile uint8_t led_tick = 0;
// count sensor readings during duty cycle
volatile uint8_t duty_counter = 0;

#define I2C_ADDRESS (0x38 << 1)
#define AHTX0_I2CADDR_DEFAULT 0x38   ///< AHT default i2c address
#define AHTX0_CMD_CALIBRATE 0xE1     ///< Calibration command
#define AHTX0_CMD_TRIGGER 0xAC       ///< Trigger reading command
#define AHTX0_CMD_SOFTRESET 0xBA     ///< Soft reset command
#define AHTX0_STATUS_BUSY 0x80       ///< Status bit for busy
#define AHTX0_STATUS_CALIBRATED 0x08 ///< Status bit for calibrated

#define UART_BUFSIZE 64
uint8_t uart_buffer[UART_BUFSIZE];
uint8_t uart_read_ptr = 0;
uint8_t uart_write_ptr = 0;
uint8_t uart_filled = 0;

extern const uint8_t log_table[];


typedef union 
{
	struct
	{
		unsigned interrupt_complete : 1;
        unsigned update_pump : 1;
        unsigned fuse_blown : 1; // don't start pump
        unsigned ignore_fuse : 1; // ignore fuse until deadband is complete
        unsigned got_fuse : 1; // got new fuse value
        unsigned timed_out : 1; // hit duty cycle
	};
	
	unsigned char value;
} flags_t;
volatile flags_t flags;

typedef struct
{
    uint8_t port;
    int16_t h; // 8 bit whole, 8 bit fraction
    int16_t t; // 8 bit whole, 8 bit fraction
    int16_t dp; // 8 bit whole, 8 bit fraction
} aht20_t;

aht20_t inside;
aht20_t outside;


uint8_t i2c_buffer[8];
#define I2C_OAR1_ADD0 ((uint32_t)0x00000001)
#define I2C_7BIT_ADD_WRITE(__ADDRESS__) ((uint8_t)((__ADDRESS__) & (~I2C_OAR1_ADD0)))
#define I2C_7BIT_ADD_READ(__ADDRESS__) ((uint8_t)((__ADDRESS__) | I2C_OAR1_ADD0))

void print_text(const uint8_t *text)
{
    const uint8_t *ptr = text;
    while(*ptr != 0 && uart_filled < UART_BUFSIZE)
    {
        uart_buffer[uart_write_ptr] = *ptr;
        ptr++;
        uart_write_ptr++;
        uart_filled++;
        if(uart_write_ptr >= UART_BUFSIZE)
        {
            uart_write_ptr = 0;
        }
    }
}

void print_lf()
{
    print_text("\n");
}

#define NUMBER_MACRO(base, x) \
    if((x) >= base || force) \
    { \
        uint16_t y = (x) / base; \
        *ptr++ = '0' + y; \
        (x) -= y * base; \
        force = 1; \
    }

void print_number(int16_t x)
{
    uint8_t string[8];
    uint8_t *ptr = string;
    uint8_t force = 0;
    if(x < 0)
    {
        *ptr++ = '-';
        x = -x;
    }
    
    uint16_t base = 10000;
    while(base > 1)
    {
        NUMBER_MACRO(base, x)
        base /= 10;
    }
    *ptr++ = '0' + x;
    *ptr++ = ' ';
    *ptr = 0;
    print_text(string);

}

#define NUMBER_MACRO2(base, x) \
    if((x) >= base || force) \
    { \
        uint8_t y = (x) / base; \
        *ptr++ = '0' + y; \
        (x) -= y * base; \
        force = 1; \
    }

// 8 bit whole + 8 bit fraction
void print_fixed(int16_t x)
{
    uint8_t string[8];
    uint8_t *ptr = string;
    if(x < 0)
    {
        *ptr++ = '-';
        x = -x;
    }

    uint8_t whole = x / FIXED;
    uint8_t force = 0;
    
    uint16_t base = 100;
    while(base > 1)
    {
        NUMBER_MACRO2(base, whole)
        base /= 10;
    }
    *ptr++ = '0' + whole;
    *ptr++ = '.';
    *ptr = 0;
    print_text(string);


    uint16_t frac = (x & 0xff) * 100 / FIXED;
    ptr = string;
    force = 1;
    NUMBER_MACRO(10, frac)
    *ptr++ = '0' + frac;
    *ptr = 0;
    print_text(string);
}

void handle_uart()
{
    if(PIR1bits.TXIF)
    {
        if(uart_filled > 0)
        {
            TXREG = uart_buffer[uart_read_ptr];
            uart_read_ptr++;
            uart_filled--;
            if(uart_read_ptr >= UART_BUFSIZE)
            {
                uart_read_ptr = 0;
            }
        }
    }
}

void flush_uart()
{
    while(uart_filled > 0)
    {
        handle_uart();
    }
}

#define TRACE \
    print_text(__FILE__ " "); \
    print_number(__LINE__); \
    print_lf(); \
    flush_uart();

#define I2C_DELAY ;

void set_data(uint8_t port, uint8_t value)
{
    if(!port)
    {
        TRISBbits.TRISB2 = value;
    }
    else
    {
        TRISAbits.TRISA6 = value;
    }
    I2C_DELAY
}

void set_clock(uint8_t port, uint8_t value)
{
    if(!port)
    {
        TRISBbits.TRISB3 = value;
    }
    else
    {
        TRISAbits.TRISA7 = value;
    }
    I2C_DELAY
}

uint8_t get_data(uint8_t port)
{
    if(!port)
    {
        return PORTBbits.RB2;
    }
    else
    {
        return PORTAbits.RA6;
    }
}

uint8_t get_clock(uint8_t port)
{
    if(!port)
    {
        return PORTBbits.RB3;
    }
    else
    {
        return PORTAbits.RA7;
    }
}

void i2c_write(uint8_t port, uint8_t value)
{
    uint8_t i = 0;
    for(i = 0; i < 8; i++)
    {
        if((value & 0x80))
        {
            set_data(port, 1);
        }
        else
        {
            set_data(port, 0);
        }
        set_clock(port, 1);
        set_clock(port, 0);
        value <<= 1;
    }

// read ACK
    set_clock(port, 1);
// wait for clock to rise
    while(!get_clock(port))
    {
        ;
    }
    uint8_t ack = get_data(port);
    set_clock(port, 0);
}

void i2c_read(uint8_t port, uint8_t bytes)
{
    uint8_t i, j;
    for(i = 0; i < bytes; i++)
    {
        uint8_t value = 0;

/* data must rise before clock to read the byte */
        set_data(port, 1);

        for(j = 0; j < 8; j++)
        {
            value <<= 1;
            set_clock(port, 1);
            while(!get_clock(port))
            {
            }
            
            value |= get_data(port);
            set_clock(port, 0);
        }
        
        i2c_buffer[i] = value;
        
// write ACK
        if(i >= bytes - 1)
        {
            set_data(port, 1);
        }
        else
        {
            set_data(port, 0);
        }

// pulse clock
        set_clock(port, 1);
        set_clock(port, 0);
    }
}

void i2c_start(uint8_t port)
{
	set_clock(port, 1);
	set_data(port, 1);
    set_data(port, 0); 
	set_clock(port, 0);
}

void i2c_stop(uint8_t port)
{
    set_data(port, 0);
    set_clock(port, 1);
    set_data(port, 1);
}



void i2c_read_device(uint8_t port, unsigned char reg, uint8_t bytes)
{
	uint8_t i;
	for(i = 0; i < bytes; i++)
	{
		i2c_buffer[i] = 0xff;
	}

    i2c_start(port);
// write device address & reg
    i2c_write(port, I2C_7BIT_ADD_WRITE(I2C_ADDRESS));
    i2c_write(port, reg);

    i2c_start(port);
    i2c_write(port, I2C_7BIT_ADD_READ(I2C_ADDRESS));
    i2c_read(port, bytes);
    i2c_stop(port);
}

void i2c_read_device2(uint8_t port, uint8_t bytes)
{
	uint8_t i;
	for(i = 0; i < bytes; i++)
	{
		i2c_buffer[i] = 0xff;
	}

    i2c_start(port);

    i2c_write(port, I2C_7BIT_ADD_READ(I2C_ADDRESS));
    i2c_read(port, bytes);

    i2c_stop(port);
}


void i2c_write_device(uint8_t port, unsigned char reg, unsigned char value)
{
// start
    i2c_start(port);

// write device address
    i2c_write(port, I2C_7BIT_ADD_WRITE(I2C_ADDRESS));
    i2c_write(port, reg);
    i2c_write(port, value);
    
    i2c_stop(port);
}

void i2c_write_device2(uint8_t port, uint8_t len)
{
// start
    i2c_start(port);

// write device address
    i2c_write(port, I2C_7BIT_ADD_WRITE(I2C_ADDRESS));
    uint8_t i;
    for(i = 0; i < len; i++)
    {
        i2c_write(port, i2c_buffer[i]);
    }
    
    i2c_stop(port);
}

uint8_t aht20_status(uint8_t port)
{
    i2c_read_device2(port, 1);
// TRACE
// print_number(i2c_buffer[0]);
// print_lf();
// flush_uart();
    return i2c_buffer[0];
}

int16_t log_lookup(uint8_t x)
{
    int16_t y = -log_table[x];
    if(x <= 1)
    {
        return y << 3;
    }
    else
    if(x <= 13)
    {
        return y << 2;
    }
    else
    if(x <= 36)
    {
        return y << 1;
    }
    return y;
}

void read_aht20(aht20_t *ptr)
{
    i2c_buffer[0] = AHTX0_CMD_TRIGGER;
    i2c_buffer[1] = 0x33;
    i2c_buffer[2] = 0x00;
    i2c_write_device2(ptr->port, 3);

// poll just the status
    while(aht20_status(ptr->port) & AHTX0_STATUS_BUSY)
    {
        ;
    }

// read status + 5 bytes of data without the CRC
    i2c_read_device2(ptr->port, 6);
    int32_t x = i2c_buffer[1];
    x <<= 8;
    x |= i2c_buffer[2];
    x <<= 4;
    x |= i2c_buffer[3] >> 4;
    ptr->h = x * 100 / 0x1000;

    x = i2c_buffer[3] & 0x0f;
    x <<= 8;
    x |= i2c_buffer[4];
    x <<= 8;
    x |= i2c_buffer[5];
    ptr->t = x * 200 / 0x1000 - 50 * FIXED;

// dewpoint calculation
// https://en.wikipedia.org/wiki/Dew_point#Calculating_the_dew_point
    const int32_t B = (int32_t)(17.67 * FIXED);
    const int32_t C = (int32_t)(243.5 * FIXED);
    
    int32_t y = (int32_t)log_lookup(ptr->h / FIXED) + 
        B * ptr->t / (C + ptr->t);
    ptr->dp = C * y / (B - y);
    
}

void init_aht20(aht20_t *ptr, uint8_t port)
{
    ptr->port = port;
    i2c_buffer[0] = AHTX0_CMD_SOFTRESET;
    i2c_write_device2(port, 1);

    i2c_buffer[0] = AHTX0_CMD_CALIBRATE;
    i2c_buffer[1] = 0x08;
    i2c_buffer[2] = 0x00;
    i2c_write_device2(port, 3);

    while(aht20_status(port) & AHTX0_STATUS_BUSY)
    {
        ;
    }
}


void print_sensor(aht20_t *ptr)
{
    print_fixed(ptr->t);
    print_text("\xb0 ");
    print_fixed(ptr->h);
    print_text("% ");
    print_fixed(ptr->dp);
    print_text("\xb0 ");
}

int main(int argc, char** argv) 
{
// set the oscillator
// 1Mhz
    OSCCON = 0b01000000;
// tweek the BAUD if clockspeed is 31000
//    OSCTUNE = 24;
// start the ADC
    ADCON1 = 0b11111011;
    ADCON0 = 0b00001001;
    ADCON2 = 0b00111110;
    PIE1bits.ADIE = 1;
    ADCON0bits.GO = 1;

	flags.value = 0;
    pump_tick = 0;
    fuse_tick = 0;
    led_tick = 0;
    fuse_accum = 0;
    fuse_count = 0;

// debug port
    TXSTA = 0b00100100;
// disable receiver
    RCSTA = 0b10000000;
    BAUDCTL = 0b00001000;
// 1200 baud from 31khz
//    SPBRG = 6;
// 9600 baud from 1Mhz
    SPBRG = 26;


// I2C ports
// all high when inputs & low when outputs
    TRISAbits.TRISA7 = 1; // input
    TRISAbits.TRISA6 = 1; // input
    TRISBbits.TRISB3 = 1; // input
    TRISBbits.TRISB2 = 1; // input
    LATAbits.LATA7 = 0;
    LATAbits.LATA6 = 0;
    LATBbits.LATB3 = 0;
    LATBbits.LATB2 = 0;

// MOSFET ports
    PUMP_LAT = 0;
    PUMP_TRIS = 0;
    FAN_LAT = 0;
    FAN_TRIS = 0;
// LED on
    LED_LAT = 0;
    LED_TRIS = 0;

// Mane timer
    T0CON = 0b10001000;
    TMR0 = TIMER_VALUE;
    INTCONbits.TMR0IF = 0;
    INTCONbits.TMR0IE = 1;

    print_text("\n\n\n\nWelcome to filament drier\n");
    flush_uart();

#ifndef TEST_PUMP
    print_text("Initializing sensors\n");
    flush_uart();
    init_aht20(&outside, 0);
    init_aht20(&inside, 1);
#endif // !TEST_PUMP

// test the log table
//     uint8_t i;
//     for(i = 0; i < 100; i++)
//     {
//         print_number(log_lookup(i));
//         print_lf();
//         flush_uart();
//     }

    print_text("Mane loop\n");
    flush_uart();


// mane interrupts
    INTCONbits.GIE = 1;
    INTCONbits.PEIE = 1;

    while(1)
    {
        ClrWdt();

// handle the UART
        handle_uart();

#ifdef TEST_AHT20
        read_aht20(&inside);
        print_text("I: ");
        print_sensor(&inside);

        read_aht20(&outside);
        print_text("O: ");
        print_sensor(&outside);
        print_lf();
        flush_uart();
        
#endif // TEST_AHT20

        if(flags.update_pump)
        {
            flags.update_pump = 0;

#ifndef TEST_PUMP
            read_aht20(&inside);
            read_aht20(&outside);

            print_text("I: ");
            print_sensor(&inside);
            print_text("O: ");
            print_sensor(&outside);

// turn fan on if inside temp is higher than outside temp
            if(inside.t < outside.t)
            {
                FAN_LAT = 0;
            }
            else
            {
                FAN_LAT = 1;
            }

// the big switch
            if(!PUMP_LAT)
            {
                if(flags.timed_out)
                {
                    duty_counter++;
                    if(duty_counter >= DUTY_CYCLE_OFF)
                    {
                        flags.timed_out = 0;
                        flush_uart();
                        print_text("reached DUTY_CYCLE_OFF");
                    }
                }

                if(inside.dp > outside.dp + ON_THRESHOLD &&
                    !flags.fuse_blown &&
                    !flags.timed_out)
                {
// start the pump
                    PUMP_LAT = 1;
                    flags.ignore_fuse = 1;
                    duty_counter = 0;
                }
            }
            else
            if(PUMP_LAT)
            {
                duty_counter++;
                if(inside.dp < outside.dp + OFF_THRESHOLD ||
                    duty_counter >= DUTY_CYCLE_ON)
                {
// stop the pump
                    PUMP_LAT = 0;
                    if(duty_counter >= DUTY_CYCLE_ON)
                    {
                        flags.timed_out = 1;
                        duty_counter = 0;
                        flush_uart();
                        print_text("reached DUTY_CYCLE_ON");
                    }
                }
            }
            print_lf();

#else // !TEST_PUMP
            if(!PUMP_LAT)
            {
                if(!flags.fuse_blown)
                {
                    PUMP_LAT = 1;
                    flags.ignore_fuse = 1;
                }
            }
            else
            {
                PUMP_LAT = 0;
            }
#endif // TEST_PUMP



        }


        if(flags.got_fuse)
        {
            flags.got_fuse = 0;
            
            if(PUMP_LAT)
            {
//                 print_text("F: ");
//                 print_number(fuse_value);
//                 if(flags.ignore_fuse)
//                 {
//                     print_text("*");
//                 }
//                 print_lf();
            }
        }
    }


    return (EXIT_SUCCESS);
}


void interrupt isr()
{
	while(1)
	{
		flags.interrupt_complete = 1;


// mane timer wrapped
        if(INTCONbits.TMR0IF)
        {
			flags.interrupt_complete = 0;
            INTCONbits.TMR0IF = 0;
            TMR0 = TIMER_VALUE;
            pump_tick++;
            led_tick++;
            fuse_tick++;

            if(fuse_tick == FUSE_INTERVAL)
            {
                fuse_tick = 0;
                flags.got_fuse = 1;
                fuse_value = fuse_accum / fuse_count;
                fuse_accum = 0;
                fuse_count = 0;
                
                if(PUMP_LAT)
                {
// wait for starting torque
                    if(flags.ignore_fuse && 
                        pump_tick > FUSE_DEADBAND)
                    {
                        flags.ignore_fuse = 0;
                    }

// stop the pump if fuse blown
                    if(!flags.ignore_fuse)
                    {
                        if(fuse_value < FUSE_THRESHOLD)
                        {
                            flags.fuse_blown = 1;
                            PUMP_LAT = 0;
                        }
                    }
                }
            }

// probe sensors
            if(pump_tick == PUMP_INTERVAL)
            {
                flags.update_pump = 1;
                pump_tick = 0;
            }

// flash LED if fuse blown
            if(led_tick == HZ / 2)
            {
                led_tick = 0;
                if(flags.fuse_blown)
                {
                    LED_LAT = !LED_LAT;
                }
            }
        }

        if(PIR1bits.ADIF)
        {
            PIR1bits.ADIF = 0;
            flags.interrupt_complete = 0;
            fuse_accum += ADRESH;
            fuse_count++;

            ADCON0bits.GO = 1;
        }

		if(flags.interrupt_complete) break;

    }
}








