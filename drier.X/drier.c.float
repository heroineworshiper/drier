/*
 * Filament drier using 2 butterfly valves
 * Copyright (C) 2022 Adam Williams <broadcast at earthling dot net>
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * 
 */

// AHT20 source code: 
// https://github.com/adafruit/Adafruit_AHTX0/blob/master/
// I2C interface:
// https://github.com/adafruit/Adafruit_BusIO/blob/master/Adafruit_I2CDevice.cpp

// AHT20 datasheet:
// http://www.aosong.com/en/products-32.html

// Configure an XBee Pro 900 for the baud rate
// 
// enter command mode.  Takes a while to print OK
// +++
// set the frequency
// atch17 or atch0c
// set destination address to broadcast mode
// atdlffff
// set receive address to broadcast mode
// atmyffff
// packet timeout
// atro03
// baud rate  7=115200 6=57600 3=9600
// atbd 3
// change terminal baud rate now & restart command mode with +++
// flash configuration
// atwr
// exit command mode
// atcn


// PIC18LF1220 Configuration Bit Settings

// 'C' source line config statements

// CONFIG1H
#pragma config OSC = INTIO2     // Oscillator Selection bits (Internal RC oscillator, port function on RA6 and port function on RA7)
#pragma config FSCM = ON        // Fail-Safe Clock Monitor Enable bit (Fail-Safe Clock Monitor enabled)
#pragma config IESO = ON        // Internal External Switchover bit (Internal External Switchover mode enabled)

// CONFIG2L
#pragma config PWRT = ON        // Power-up Timer Enable bit (PWRT enabled)
#pragma config BOR = ON         // Brown-out Reset Enable bit (Brown-out Reset enabled)
#pragma config BORV = 27        // Brown-out Reset Voltage bits (VBOR set to 2.7V)

// CONFIG2H
#pragma config WDT = ON         // Watchdog Timer Enable bit (WDT enabled)
#pragma config WDTPS = 32768    // Watchdog Timer Postscale Select bits (1:32768)

// CONFIG3H
#pragma config MCLRE = ON       // MCLR Pin Enable bit (MCLR pin enabled, RA5 input pin disabled)

// CONFIG4L
#pragma config STVR = ON        // Stack Full/Underflow Reset Enable bit (Stack full/underflow will cause Reset)
#pragma config LVP = OFF        // Low-Voltage ICSP Enable bit (Low-Voltage ICSP disabled)

// CONFIG5L
#pragma config CP0 = OFF        // Code Protection bit (Block 0 (00200-0007FFh) not code-protected)
#pragma config CP1 = OFF        // Code Protection bit (Block 1 (000800-000FFFh) not code-protected)

// CONFIG5H
#pragma config CPB = OFF        // Boot Block Code Protection bit (Boot Block (000000-0001FFh) not code-protected)
#pragma config CPD = OFF        // Data EEPROM Code Protection bit (Data EEPROM not code-protected)

// CONFIG6L
#pragma config WRT0 = OFF       // Write Protection bit (Block 0 (00200-0007FFh) not write-protected)
#pragma config WRT1 = OFF       // Write Protection bit (Block 1 (000800-000FFFh) not write-protected)

// CONFIG6H
#pragma config WRTC = OFF       // Configuration Register Write Protection bit (Configuration registers (300000-3000FFh) not write-protected)
#pragma config WRTB = OFF       // Boot Block Write Protection bit (Boot Block (000000-0001FFh) not write-protected)
#pragma config WRTD = OFF       // Data EEPROM Write Protection bit (Data EEPROM not write-protected)

// CONFIG7L
#pragma config EBTR0 = OFF      // Table Read Protection bit (Block 0 (00200-0007FFh) not protected from table reads executed in other blocks)
#pragma config EBTR1 = OFF      // Table Read Protection bit (Block 1 (000800-000FFFh) not protected from table reads executed in other blocks)

// CONFIG7H
#pragma config EBTRB = OFF      // Boot Block Table Read Protection bit (Boot Block (000000-0001FFh) not protected from table reads executed in other blocks)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>

#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <pic18lf1320.h>
#include <math.h>

// A0 - LED
// A1 - servo
// A3 - fan
// B3 - I2C 0 clock
// B2 - I2C 0 data
// A7 - I2C 1 clock
// A6 - I2C 1 data

//#define TEST_AHT20
// always toggle the pump instead of testing dew point
//#define TEST_PUMP


// turn on if inside dew point is this much above outside dew point
#define ON_THRESHOLD 2.0

// turn off if inside dew point is this much above outside dew point
#define OFF_THRESHOLD 1.0

// time between sensor readings
#define SERVO_INTERVAL (HZ * 5)
// time to run servo as number of sensor readings
// this prevents motor wear
#define DUTY_CYCLE 1
// PWM timer value for open valve
#define SERVO_OPEN 1900
// PWM timer value for closed valve
#define SERVO_CLOSE 3900
// starting PWM timer value
#define SERVO_INIT 2700
// PWM timer value for 50hz
#define SERVO_PERIOD 30000


//#define USE_LED


#define SERVO_TRIS TRISAbits.TRISA1
#define SERVO_LAT LATAbits.LATA1

#define FAN_TRIS TRISAbits.TRISA3
#define FAN_LAT LATAbits.LATA3

#ifdef USE_LED
#define LED_TRIS TRISAbits.TRISA0
#define LED_LAT LATAbits.LATA0
#endif

// Mane timer values
#define HZ 32
#define TIMER_VALUE -62496
// ticks since the last sensor reading
volatile uint8_t servo_tick = 0;
volatile uint16_t servo_pwm = SERVO_INIT;
// value to be only updated in the interrupt handler
volatile uint16_t servo_pwm2 = SERVO_INIT;
#ifdef USE_LED
volatile uint8_t led_tick = 0;
#endif

// sensor readings since the servo was turned on
volatile uint8_t duty_counter = 0;
// downsample the output
uint8_t print_counter = 0;
#define PRINT_DOWNSAMPLE 6



// AHT20 stuff
#define I2C_ADDRESS (0x38 << 1)
#define AHTX0_I2CADDR_DEFAULT 0x38   ///< AHT default i2c address
#define AHTX0_CMD_CALIBRATE 0xE1     ///< Calibration command
#define AHTX0_CMD_TRIGGER 0xAC       ///< Trigger reading command
#define AHTX0_CMD_SOFTRESET 0xBA     ///< Soft reset command
#define AHTX0_STATUS_BUSY 0x80       ///< Status bit for busy
#define AHTX0_STATUS_CALIBRATED 0x08 ///< Status bit for calibrated




typedef union 
{
	struct
	{
		unsigned interrupt_complete : 1;
        unsigned update_servo : 1;
        unsigned servo_enabled : 1; // drive the PWM pin
        unsigned pwm_on : 1; // which part of the PWM waveform we're in
	};
	
	unsigned char value;
} flags_t;
volatile flags_t flags;

typedef struct
{
    uint8_t port;
    float h;
    float t;
    float dp;
} aht20_t;

aht20_t inside;
aht20_t outside;


uint8_t i2c_buffer[8];
#define I2C_OAR1_ADD0 ((uint32_t)0x00000001)
#define I2C_7BIT_ADD_WRITE(__ADDRESS__) ((uint8_t)((__ADDRESS__) & (~I2C_OAR1_ADD0)))
#define I2C_7BIT_ADD_READ(__ADDRESS__) ((uint8_t)((__ADDRESS__) | I2C_OAR1_ADD0))


void send_uart(uint8_t c)
{
    while(!PIR1bits.TXIF)
    {
        ;
    }


    TXREG = c;
}


void print_text(const uint8_t *text)
{
    const uint8_t *ptr = text;
    while(*ptr != 0)
    {
        send_uart(*ptr);
        ptr++;
    }
}

void print_lf()
{
    send_uart('\n');
}

#define NUMBER_MACRO(base, x) \
    if((x) >= base || force) \
    { \
        uint16_t y = (x) / base; \
        send_uart('0' + y); \
        (x) -= y * base; \
        force = 1; \
    }

void print_number(int16_t x)
{
    uint8_t force = 0;
    if(x < 0)
    {
        send_uart('-');
        x = -x;
    }
    
    uint16_t base = 10000;
    while(base > 1)
    {
        NUMBER_MACRO(base, x)
        base /= 10;
    }
    send_uart('0' + x);
    send_uart(' ');

}

#define NUMBER_MACRO2(base, x) \
    if((x) >= base || force) \
    { \
        uint8_t y = (x) / base; \
        send_uart('0' + y); \
        (x) -= y * base; \
        force = 1; \
    }

void print_float(float x)
{
    if(x < 0)
    {
        send_uart('-');
        x = -x;
    }

    uint8_t whole = (uint8_t)x;
    uint8_t force = 0;
    
    uint16_t base = 100;
    while(base > 1)
    {
        NUMBER_MACRO2(base, whole)
        base /= 10;
    }
    send_uart('0' + whole);
    send_uart('.');


    uint16_t frac = (uint16_t)(x * 100) % 100;
    force = 1;
    NUMBER_MACRO(10, frac)
    send_uart('0' + frac);
}

#define TRACE \
    print_text(__FILE__ " "); \
    print_number(__LINE__); \
    print_lf();

#define I2C_DELAY ;

void set_data(uint8_t port, uint8_t value)
{
    if(!port)
    {
        TRISBbits.TRISB2 = value;
    }
    else
    {
        TRISAbits.TRISA6 = value;
    }
    I2C_DELAY
}

void set_clock(uint8_t port, uint8_t value)
{
    if(!port)
    {
        TRISBbits.TRISB3 = value;
    }
    else
    {
        TRISAbits.TRISA7 = value;
    }
    I2C_DELAY
}

uint8_t get_data(uint8_t port)
{
    if(!port)
    {
        return PORTBbits.RB2;
    }
    else
    {
        return PORTAbits.RA6;
    }
}

uint8_t get_clock(uint8_t port)
{
    if(!port)
    {
        return PORTBbits.RB3;
    }
    else
    {
        return PORTAbits.RA7;
    }
}

void i2c_write(uint8_t port, uint8_t value)
{
    uint8_t i = 0;
    for(i = 0; i < 8; i++)
    {
        if((value & 0x80))
        {
            set_data(port, 1);
        }
        else
        {
            set_data(port, 0);
        }
        set_clock(port, 1);
        set_clock(port, 0);
        value <<= 1;
    }

// read ACK
    set_clock(port, 1);
// wait for clock to rise
    while(!get_clock(port))
    {
        ;
    }
    uint8_t ack = get_data(port);
    set_clock(port, 0);
}

void i2c_read(uint8_t port, uint8_t bytes)
{
    uint8_t i, j;
    for(i = 0; i < bytes; i++)
    {
        uint8_t value = 0;

/* data must rise before clock to read the byte */
        set_data(port, 1);

        for(j = 0; j < 8; j++)
        {
            value <<= 1;
            set_clock(port, 1);
            while(!get_clock(port))
            {
            }
            
            value |= get_data(port);
            set_clock(port, 0);
        }
        
        i2c_buffer[i] = value;
        
// write ACK
        if(i >= bytes - 1)
        {
            set_data(port, 1);
        }
        else
        {
            set_data(port, 0);
        }

// pulse clock
        set_clock(port, 1);
        set_clock(port, 0);
    }
}

void i2c_start(uint8_t port)
{
	set_clock(port, 1);
	set_data(port, 1);
    set_data(port, 0); 
	set_clock(port, 0);
}

void i2c_stop(uint8_t port)
{
    set_data(port, 0);
    set_clock(port, 1);
    set_data(port, 1);
}



void i2c_read_device(uint8_t port, unsigned char reg, uint8_t bytes)
{
	uint8_t i;
	for(i = 0; i < bytes; i++)
	{
		i2c_buffer[i] = 0xff;
	}

    i2c_start(port);
// write device address & reg
    i2c_write(port, I2C_7BIT_ADD_WRITE(I2C_ADDRESS));
    i2c_write(port, reg);

    i2c_start(port);
    i2c_write(port, I2C_7BIT_ADD_READ(I2C_ADDRESS));
    i2c_read(port, bytes);
    i2c_stop(port);
}

void i2c_read_device2(uint8_t port, uint8_t bytes)
{
	uint8_t i;
	for(i = 0; i < bytes; i++)
	{
		i2c_buffer[i] = 0xff;
	}

    i2c_start(port);

    i2c_write(port, I2C_7BIT_ADD_READ(I2C_ADDRESS));
    i2c_read(port, bytes);

    i2c_stop(port);
}


void i2c_write_device(uint8_t port, unsigned char reg, unsigned char value)
{
// start
    i2c_start(port);

// write device address
    i2c_write(port, I2C_7BIT_ADD_WRITE(I2C_ADDRESS));
    i2c_write(port, reg);
    i2c_write(port, value);
    
    i2c_stop(port);
}

void i2c_write_device2(uint8_t port, uint8_t len)
{
// start
    i2c_start(port);

// write device address
    i2c_write(port, I2C_7BIT_ADD_WRITE(I2C_ADDRESS));
    uint8_t i;
    for(i = 0; i < len; i++)
    {
        i2c_write(port, i2c_buffer[i]);
    }
    
    i2c_stop(port);
}

uint8_t aht20_status(uint8_t port)
{
    i2c_read_device2(port, 1);
// TRACE
// print_number(i2c_buffer[0]);
// print_lf();
// flush_uart();
    return i2c_buffer[0];
}


void read_aht20(aht20_t *ptr)
{
    i2c_buffer[0] = AHTX0_CMD_TRIGGER;
    i2c_buffer[1] = 0x33;
    i2c_buffer[2] = 0x00;
    i2c_write_device2(ptr->port, 3);

// poll just the status
    while(aht20_status(ptr->port) & AHTX0_STATUS_BUSY)
    {
        ;
    }

// read status + 5 bytes of data without the CRC
    i2c_read_device2(ptr->port, 6);
    int32_t x = i2c_buffer[1];
    x <<= 8;
    x |= i2c_buffer[2];
    x <<= 4;
    x |= i2c_buffer[3] >> 4;
    ptr->h = (float)(x * 100) / 0x100000;

    x = i2c_buffer[3] & 0x0f;
    x <<= 8;
    x |= i2c_buffer[4];
    x <<= 8;
    x |= i2c_buffer[5];
    ptr->t = (float)(x * 200) / 0x100000 - 50;

// dewpoint calculation
// https://en.wikipedia.org/wiki/Dew_point#Calculating_the_dew_point
    const float B = 17.67;
    const float C = 243.5;
    
    float y = log(ptr->h / 100) + 
        B * ptr->t / (C + ptr->t);
    ptr->dp = C * y / (B - y);
    
}

void init_aht20(aht20_t *ptr, uint8_t port)
{
    ptr->port = port;
    i2c_buffer[0] = AHTX0_CMD_SOFTRESET;
    i2c_write_device2(port, 1);

    i2c_buffer[0] = AHTX0_CMD_CALIBRATE;
    i2c_buffer[1] = 0x08;
    i2c_buffer[2] = 0x00;
    i2c_write_device2(port, 3);

    while(aht20_status(port) & AHTX0_STATUS_BUSY)
    {
        ;
    }
}


void print_sensor(aht20_t *ptr)
{
    print_float(ptr->t);
    print_text("\xb0 ");
    print_float(ptr->h);
    print_text("% ");
    print_float(ptr->dp);
    print_text("\xb0 ");
}

int main(int argc, char** argv) 
{
// set the oscillator
// 8Mhz
    OSCCON = 0b01110000;
// make the UART support higher temperatures at 1Mhz
//    OSCTUNE = 24;


#ifdef USE_FUSE
// start the ADC
    ADCON1 = 0b11111011;
    ADCON0 = 0b00001001;
    ADCON2 = 0b00111110;
    PIE1bits.ADIE = 1;
    ADCON0bits.GO = 1;
#endif // USE_FUSE

	flags.value = 0;
    flags.servo_enabled = 1;
    servo_tick = 0;
#ifdef USE_LED
    led_tick = 0;
#endif

#ifdef USE_FUSE
    fuse_tick = 0;
    fuse_accum = 0;
    fuse_count = 0;
#endif

// debug port
    TXSTA = 0b00100100;
// disable receiver
    RCSTA = 0b10000000;
    BAUDCTL = 0b00001000;
// 1200 baud from 31khz
//    SPBRG = 6;
// 9600 baud at 1Mhz clock
//    SPBRG = 26;
// 9600 baud at 8Mhz clock
    SPBRG = 208;


// I2C ports
// all high when inputs & low when outputs
    TRISAbits.TRISA7 = 1; // input
    TRISAbits.TRISA6 = 1; // input
    TRISBbits.TRISB3 = 1; // input
    TRISBbits.TRISB2 = 1; // input
    LATAbits.LATA7 = 0;
    LATAbits.LATA6 = 0;
    LATBbits.LATB3 = 0;
    LATBbits.LATB2 = 0;

    SERVO_LAT = 0;
    SERVO_TRIS = 0;
    FAN_LAT = 0;
    FAN_TRIS = 0;
// LED on
#ifdef USE_LED
    LED_LAT = 0;
    LED_TRIS = 0;
#endif

// Mane timer
    T0CON = 0b10001000;
    TMR0 = TIMER_VALUE;
    INTCONbits.TMR0IF = 0;
    INTCONbits.TMR0IE = 1;

// PWM timer
    T1CON = 0b10000001;
    uint16_t value = -SERVO_PERIOD + servo_pwm;
    TMR1H = value >> 8;
    TMR1L = value & 0xff;
    PIR1bits.TMR1IF = 0;
    PIE1bits.TMR1IE = 1;

// delay
    uint8_t tick = 0;
    while(tick < HZ)
    {
        if(INTCONbits.TMR0IF)
        {
            TMR0H = (TIMER_VALUE) >> 8;
            TMR0L = (TIMER_VALUE) & 0xff;
            INTCONbits.TMR0IF = 0;
            tick++;
        }
    }

    print_text("\n\n\n\nWelcome to filament drier\n");

//    print_number(servo_pwm);
//    print_number(servo_pwm2);
//    print_lf();

#ifndef TEST_PUMP
    print_text("Initializing sensors\n");
    init_aht20(&outside, 0);
    init_aht20(&inside, 1);
#endif // !TEST_PUMP

    print_text("Mane loop\n");


// mane interrupts
    INTCONbits.GIE = 1;
    INTCONbits.PEIE = 1;

    while(1)
    {
        ClrWdt();


#ifdef TEST_AHT20
        read_aht20(&inside);
        print_text("I: ");
        print_sensor(&inside);

        read_aht20(&outside);
        print_text("O: ");
        print_sensor(&outside);
        print_lf();
        
#endif // TEST_AHT20


        if(flags.update_servo)
        {
            flags.update_servo = 0;
            duty_counter++;

#ifndef TEST_PUMP
            read_aht20(&inside);
            read_aht20(&outside);

// skip a certain number of sensor readings between prints
            print_counter++;
            if(print_counter >= PRINT_DOWNSAMPLE)
            {
                print_text("I: ");
                print_sensor(&inside);
                print_text("O: ");
                print_sensor(&outside);
            }

// turn fan on if inside temp is higher than outside temp
            if(inside.t < outside.t)
            {
                FAN_LAT = 0;
            }
            else
            {
                FAN_LAT = 1;
            }

//print_text("servo test\n");
            if(inside.dp > outside.dp + ON_THRESHOLD &&
                servo_pwm != SERVO_OPEN)
            {
// open the valve
//print_text("SERVO_OPEN\n");
                servo_pwm = SERVO_OPEN;
                duty_counter = 0;
                flags.servo_enabled = 1;
            }
            else
            if(inside.dp < outside.dp + OFF_THRESHOLD &&
                servo_pwm != SERVO_CLOSE)
            {
// close the valve
//print_text("SERVO_CLOSE\n");
                servo_pwm = SERVO_CLOSE;
                duty_counter = 0;
                flags.servo_enabled = 1;
            }
            else
// no change for a certain number of sensor readings
// turn servo off
            if(duty_counter >= DUTY_CYCLE)
            {
//print_text("SERVO DISABLED\n");
                flags.servo_enabled = 0;
            }

            if(print_counter >= PRINT_DOWNSAMPLE)
            {
                print_counter = 0;
                print_lf();
            }

#else // !TEST_PUMP
            if(!PUMP_LAT)
            {
#ifdef USE_FUSE
                if(!flags.fuse_blown)
                {
#endif
                    PUMP_LAT = 1;
#ifdef USE_FUSE
                    flags.ignore_fuse = 1;
                }
#endif
            }
            else
            {
                PUMP_LAT = 0;
            }
#endif // TEST_PUMP



        }
    }


    return (EXIT_SUCCESS);
}


void interrupt isr()
{
	while(1)
	{
		flags.interrupt_complete = 1;

        if(PIR1bits.TMR1IF)
        {
            flags.interrupt_complete = 0;
            if(flags.pwm_on == 0)
            {
// begin PWM waveform
                if(flags.servo_enabled)
                {
                    SERVO_LAT = 1;
                }
                flags.pwm_on = 1;
                uint16_t value = -servo_pwm2;
                TMR1H = value >> 8;
                TMR1L = value & 0xff;
            }
            else
            {
                SERVO_LAT = 0;
                flags.pwm_on = 0;
                uint16_t value = -SERVO_PERIOD + servo_pwm2;
                TMR1H = value >> 8;
                TMR1L = value & 0xff;
                servo_pwm2 = servo_pwm;
            }
            PIR1bits.TMR1IF = 0;
        }


// mane timer wrapped
        if(INTCONbits.TMR0IF)
        {
			flags.interrupt_complete = 0;
            INTCONbits.TMR0IF = 0;
            TMR0H = (TIMER_VALUE) >> 8;
            TMR0L = (TIMER_VALUE) & 0xff;
            servo_tick++;
#ifdef USE_LED
            led_tick++;
#endif


// probe sensors
            if(servo_tick == SERVO_INTERVAL)
            {
                flags.update_servo = 1;
                servo_tick = 0;
            }

        }

		if(flags.interrupt_complete) break;
    }
}








