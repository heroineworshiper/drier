

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Feb  4 04:06:54 2022

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18LF1220
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1
    35                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    36                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    38                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    39                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    40  0000                     
    41                           ; Version 1.45
    42                           ; Generated 16/11/2017 GMT
    43                           ; 
    44                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    45                           ; All rights reserved.
    46                           ; 
    47                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    48                           ; 
    49                           ; Redistribution and use in source and binary forms, with or without modification, are
    50                           ; permitted provided that the following conditions are met:
    51                           ; 
    52                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    53                           ;        conditions and the following disclaimer.
    54                           ; 
    55                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    56                           ;        of conditions and the following disclaimer in the documentation and/or other
    57                           ;        materials provided with the distribution.
    58                           ; 
    59                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    60                           ;        software without specific prior written permission.
    61                           ; 
    62                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    63                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    64                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    65                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    66                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    67                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    68                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    69                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    70                           ; 
    71                           ; 
    72                           ; Code-generator required, PIC18LF1220 Definitions
    73                           ; 
    74                           ; SFR Addresses
    75  0000                     
    76                           	psect	smallconst
    77  000200                     __psmallconst:
    78                           	opt stack 0
    79  000200  00                 	db	0
    80  000201                     _log_table:
    81                           	opt stack 0
    82  000201  FF                 	db	255
    83  000202  93                 	db	147
    84  000203  FA                 	db	250
    85  000204  E0                 	db	224
    86  000205  CE                 	db	206
    87  000206  BF                 	db	191
    88  000207  B4                 	db	180
    89  000208  AA                 	db	170
    90  000209  A1                 	db	161
    91  00020A  9A                 	db	154
    92  00020B  93                 	db	147
    93  00020C  8D                 	db	141
    94  00020D  87                 	db	135
    95  00020E  82                 	db	130
    96  00020F  FB                 	db	251
    97  000210  F2                 	db	242
    98  000211  EA                 	db	234
    99  000212  E2                 	db	226
   100  000213  DB                 	db	219
   101  000214  D4                 	db	212
   102  000215  CE                 	db	206
   103  000216  C7                 	db	199
   104  000217  C1                 	db	193
   105  000218  BC                 	db	188
   106  000219  B6                 	db	182
   107  00021A  B1                 	db	177
   108  00021B  AC                 	db	172
   109  00021C  A7                 	db	167
   110  00021D  A2                 	db	162
   111  00021E  9E                 	db	158
   112  00021F  9A                 	db	154
   113  000220  95                 	db	149
   114  000221  91                 	db	145
   115  000222  8D                 	db	141
   116  000223  8A                 	db	138
   117  000224  86                 	db	134
   118  000225  82                 	db	130
   119  000226  FE                 	db	254
   120  000227  F7                 	db	247
   121  000228  F1                 	db	241
   122  000229  EA                 	db	234
   123  00022A  E4                 	db	228
   124  00022B  DE                 	db	222
   125  00022C  D8                 	db	216
   126  00022D  D2                 	db	210
   127  00022E  CC                 	db	204
   128  00022F  C6                 	db	198
   129  000230  C1                 	db	193
   130  000231  BB                 	db	187
   131  000232  B6                 	db	182
   132  000233  B1                 	db	177
   133  000234  AC                 	db	172
   134  000235  A7                 	db	167
   135  000236  A2                 	db	162
   136  000237  9D                 	db	157
   137  000238  99                 	db	153
   138  000239  94                 	db	148
   139  00023A  8F                 	db	143
   140  00023B  8B                 	db	139
   141  00023C  87                 	db	135
   142  00023D  82                 	db	130
   143  00023E  7E                 	db	126
   144  00023F  7A                 	db	122
   145  000240  76                 	db	118
   146  000241  72                 	db	114
   147  000242  6E                 	db	110
   148  000243  6A                 	db	106
   149  000244  66                 	db	102
   150  000245  62                 	db	98
   151  000246  5E                 	db	94
   152  000247  5B                 	db	91
   153  000248  57                 	db	87
   154  000249  54                 	db	84
   155  00024A  50                 	db	80
   156  00024B  4D                 	db	77
   157  00024C  49                 	db	73
   158  00024D  46                 	db	70
   159  00024E  42                 	db	66
   160  00024F  3F                 	db	63
   161  000250  3C                 	db	60
   162  000251  39                 	db	57
   163  000252  35                 	db	53
   164  000253  32                 	db	50
   165  000254  2F                 	db	47
   166  000255  2C                 	db	44
   167  000256  29                 	db	41
   168  000257  26                 	db	38
   169  000258  23                 	db	35
   170  000259  20                 	db	32
   171  00025A  1D                 	db	29
   172  00025B  1A                 	db	26
   173  00025C  18                 	db	24
   174  00025D  15                 	db	21
   175  00025E  12                 	db	18
   176  00025F  0F                 	db	15
   177  000260  0D                 	db	13
   178  000261  0A                 	db	10
   179  000262  07                 	db	7
   180  000263  05                 	db	5
   181  000264  02                 	db	2
   182  000265                     __end_of_log_table:
   183                           	opt stack 0
   184  0000                     _TMR0	set	4054
   185  0000                     _ADRESH	set	4036
   186  0000                     _INTCONbits	set	4082
   187  0000                     _T0CON	set	4053
   188  0000                     _LATBbits	set	3978
   189  0000                     _LATAbits	set	3977
   190  0000                     _SPBRG	set	4015
   191  0000                     _BAUDCTL	set	4010
   192  0000                     _RCSTA	set	4011
   193  0000                     _TXSTA	set	4012
   194  0000                     _ADCON0bits	set	4034
   195  0000                     _PIE1bits	set	3997
   196  0000                     _ADCON2	set	4032
   197  0000                     _ADCON0	set	4034
   198  0000                     _ADCON1	set	4033
   199  0000                     _OSCCON	set	4051
   200  0000                     _PORTAbits	set	3968
   201  0000                     _PORTBbits	set	3969
   202  0000                     _TRISAbits	set	3986
   203  0000                     _TRISBbits	set	3987
   204  0000                     _TXREG	set	4013
   205  0000                     _PIR1bits	set	3998
   206  000265                     STR_4:
   207  000265  0A                 	db	10
   208  000266  0A                 	db	10
   209  000267  0A                 	db	10
   210  000268  0A                 	db	10
   211  000269  57                 	db	87	;'W'
   212  00026A  65                 	db	101	;'e'
   213  00026B  6C                 	db	108	;'l'
   214  00026C  63                 	db	99	;'c'
   215  00026D  6F                 	db	111	;'o'
   216  00026E  6D                 	db	109	;'m'
   217  00026F  65                 	db	101	;'e'
   218  000270  20                 	db	32
   219  000271  74                 	db	116	;'t'
   220  000272  6F                 	db	111	;'o'
   221  000273  20                 	db	32
   222  000274  66                 	db	102	;'f'
   223  000275  69                 	db	105	;'i'
   224  000276  6C                 	db	108	;'l'
   225  000277  61                 	db	97	;'a'
   226  000278  6D                 	db	109	;'m'
   227  000279  65                 	db	101	;'e'
   228  00027A  6E                 	db	110	;'n'
   229  00027B  74                 	db	116	;'t'
   230  00027C  20                 	db	32
   231  00027D  64                 	db	100	;'d'
   232  00027E  72                 	db	114	;'r'
   233  00027F  69                 	db	105	;'i'
   234  000280  65                 	db	101	;'e'
   235  000281  72                 	db	114	;'r'
   236  000282  0A                 	db	10
   237  000283  00                 	db	0
   238  000284                     STR_9:
   239  000284  72                 	db	114	;'r'
   240  000285  65                 	db	101	;'e'
   241  000286  61                 	db	97	;'a'
   242  000287  63                 	db	99	;'c'
   243  000288  68                 	db	104	;'h'
   244  000289  65                 	db	101	;'e'
   245  00028A  64                 	db	100	;'d'
   246  00028B  20                 	db	32
   247  00028C  44                 	db	68	;'D'
   248  00028D  55                 	db	85	;'U'
   249  00028E  54                 	db	84	;'T'
   250  00028F  59                 	db	89	;'Y'
   251  000290  5F                 	db	95	;'_'
   252  000291  43                 	db	67	;'C'
   253  000292  59                 	db	89	;'Y'
   254  000293  43                 	db	67	;'C'
   255  000294  4C                 	db	76	;'L'
   256  000295  45                 	db	69	;'E'
   257  000296  5F                 	db	95	;'_'
   258  000297  4F                 	db	79	;'O'
   259  000298  46                 	db	70	;'F'
   260  000299  46                 	db	70	;'F'
   261  00029A  00                 	db	0
   262  00029B                     STR_5:
   263  00029B  49                 	db	73	;'I'
   264  00029C  6E                 	db	110	;'n'
   265  00029D  69                 	db	105	;'i'
   266  00029E  74                 	db	116	;'t'
   267  00029F  69                 	db	105	;'i'
   268  0002A0  61                 	db	97	;'a'
   269  0002A1  6C                 	db	108	;'l'
   270  0002A2  69                 	db	105	;'i'
   271  0002A3  7A                 	db	122	;'z'
   272  0002A4  69                 	db	105	;'i'
   273  0002A5  6E                 	db	110	;'n'
   274  0002A6  67                 	db	103	;'g'
   275  0002A7  20                 	db	32
   276  0002A8  73                 	db	115	;'s'
   277  0002A9  65                 	db	101	;'e'
   278  0002AA  6E                 	db	110	;'n'
   279  0002AB  73                 	db	115	;'s'
   280  0002AC  6F                 	db	111	;'o'
   281  0002AD  72                 	db	114	;'r'
   282  0002AE  73                 	db	115	;'s'
   283  0002AF  0A                 	db	10
   284  0002B0  00                 	db	0
   285  0002B1                     STR_10:
   286  0002B1  72                 	db	114	;'r'
   287  0002B2  65                 	db	101	;'e'
   288  0002B3  61                 	db	97	;'a'
   289  0002B4  63                 	db	99	;'c'
   290  0002B5  68                 	db	104	;'h'
   291  0002B6  65                 	db	101	;'e'
   292  0002B7  64                 	db	100	;'d'
   293  0002B8  20                 	db	32
   294  0002B9  44                 	db	68	;'D'
   295  0002BA  55                 	db	85	;'U'
   296  0002BB  54                 	db	84	;'T'
   297  0002BC  59                 	db	89	;'Y'
   298  0002BD  5F                 	db	95	;'_'
   299  0002BE  43                 	db	67	;'C'
   300  0002BF  59                 	db	89	;'Y'
   301  0002C0  43                 	db	67	;'C'
   302  0002C1  4C                 	db	76	;'L'
   303  0002C2  45                 	db	69	;'E'
   304  0002C3  5F                 	db	95	;'_'
   305  0002C4  4F                 	db	79	;'O'
   306  0002C5  4E                 	db	78	;'N'
   307  0002C6  00                 	db	0
   308  0002C7                     STR_6:
   309  0002C7  4D                 	db	77	;'M'
   310  0002C8  61                 	db	97	;'a'
   311  0002C9  6E                 	db	110	;'n'
   312  0002CA  65                 	db	101	;'e'
   313  0002CB  20                 	db	32
   314  0002CC  6C                 	db	108	;'l'
   315  0002CD  6F                 	db	111	;'o'
   316  0002CE  6F                 	db	111	;'o'
   317  0002CF  70                 	db	112	;'p'
   318  0002D0  0A                 	db	10
   319  0002D1  00                 	db	0
   320  0002D2                     STR_7:
   321  0002D2  49                 	db	73	;'I'
   322  0002D3  3A                 	db	58	;':'
   323  0002D4  20                 	db	32
   324  0002D5  00                 	db	0
   325  0002D6                     STR_8:
   326  0002D6  4F                 	db	79	;'O'
   327  0002D7  3A                 	db	58	;':'
   328  0002D8  20                 	db	32
   329  0002D9  00                 	db	0
   330  0002DA                     STR_1:
   331  0002DA  B0                 	db	-80
   332  0002DB  20                 	db	32
   333  0002DC  00                 	db	0
   334  0002DD                     STR_2:
   335  0002DD  25                 	db	37
   336  0002DE  20                 	db	32
   337  0002DF  00                 	db	0
   338  0000                     
   339                           ; #config settings
   340  0002E0  00                 	db	0	; dummy byte at the end
   341  0000                     
   342                           	psect	cinit
   343  000FA2                     __pcinit:
   344                           	opt stack 0
   345  000FA2                     start_initialization:
   346                           	opt stack 0
   347  000FA2                     __initialization:
   348                           	opt stack 0
   349                           
   350                           ; Clear objects allocated to COMRAM (34 bytes)
   351  000FA2  EE00  F03D         	lfsr	0,__pbssCOMRAM
   352  000FA6  0E22               	movlw	34
   353  000FA8                     clear_0:
   354  000FA8  6AEE               	clrf	postinc0,c
   355  000FAA  06E8               	decf	wreg,f,c
   356  000FAC  E1FD               	bnz	clear_0
   357  000FAE                     end_of_initialization:
   358                           	opt stack 0
   359  000FAE                     __end_of__initialization:
   360                           	opt stack 0
   361  000FAE  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   362  000FB0  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   363  000FB2  0E00               	movlw	low (__Lsmallconst shr (0+16))
   364  000FB4  6EF8               	movwf	tblptru,c
   365  000FB6  0E02               	movlw	high __Lsmallconst
   366  000FB8  6EF7               	movwf	tblptrh,c
   367  000FBA  0100               	movlb	0
   368  000FBC  EFF5  F002         	goto	_main	;jump to C main() function
   369                           tblptru	equ	0xFF8
   370                           tblptrh	equ	0xFF7
   371                           postinc0	equ	0xFEE
   372                           wreg	equ	0xFE8
   373                           
   374                           	psect	bssCOMRAM
   375  00003D                     __pbssCOMRAM:
   376                           	opt stack 0
   377  00003D                     _i2c_buffer:
   378                           	opt stack 0
   379  00003D                     	ds	8
   380  000045                     _fuse_accum:
   381                           	opt stack 0
   382  000045                     	ds	4
   383  000049                     _fuse_count:
   384                           	opt stack 0
   385  000049                     	ds	2
   386  00004B                     _flags:
   387                           	opt stack 0
   388  00004B                     	ds	1
   389  00004C                     _duty_counter:
   390                           	opt stack 0
   391  00004C                     	ds	1
   392  00004D                     _led_tick:
   393                           	opt stack 0
   394  00004D                     	ds	1
   395  00004E                     _fuse_tick:
   396                           	opt stack 0
   397  00004E                     	ds	1
   398  00004F                     _pump_tick:
   399                           	opt stack 0
   400  00004F                     	ds	1
   401  000050                     _fuse_value:
   402                           	opt stack 0
   403  000050                     	ds	1
   404  000051                     _outside:
   405                           	opt stack 0
   406  000051                     	ds	7
   407  000058                     _inside:
   408                           	opt stack 0
   409  000058                     	ds	7
   410                           tblptru	equ	0xFF8
   411                           tblptrh	equ	0xFF7
   412                           postinc0	equ	0xFEE
   413                           wreg	equ	0xFE8
   414                           
   415                           	psect	cstackBANK0
   416  000080                     __pcstackBANK0:
   417                           	opt stack 0
   418  000080                     ??_read_aht20:
   419                           
   420                           ; 1 bytes @ 0x0
   421  000080                     	ds	10
   422  00008A                     read_aht20@B:
   423                           	opt stack 0
   424                           
   425                           ; 4 bytes @ 0xA
   426  00008A                     	ds	4
   427  00008E                     read_aht20@C:
   428                           	opt stack 0
   429                           
   430                           ; 4 bytes @ 0xE
   431  00008E                     	ds	4
   432  000092                     read_aht20@y:
   433                           	opt stack 0
   434                           
   435                           ; 4 bytes @ 0x12
   436  000092                     	ds	4
   437  000096                     read_aht20@x:
   438                           	opt stack 0
   439                           
   440                           ; 4 bytes @ 0x16
   441  000096                     	ds	4
   442  00009A                     
   443                           ; 2 bytes @ 0x1A
   444  00009A                     	ds	2
   445  00009C                     
   446                           ; 3 bytes @ 0x1C
   447  00009C                     	ds	3
   448  00009F                     ??_main:
   449                           
   450                           ; 1 bytes @ 0x1F
   451  00009F                     	ds	5
   452                           tblptru	equ	0xFF8
   453                           tblptrh	equ	0xFF7
   454                           postinc0	equ	0xFEE
   455                           wreg	equ	0xFE8
   456                           
   457                           	psect	cstackCOMRAM
   458  000001                     __pcstackCOMRAM:
   459                           	opt stack 0
   460  000001                     ?___lldiv:
   461                           	opt stack 0
   462  000001                     ___lldiv@dividend:
   463                           	opt stack 0
   464                           
   465                           ; 4 bytes @ 0x0
   466  000001                     	ds	4
   467  000005                     ___lldiv@divisor:
   468                           	opt stack 0
   469                           
   470                           ; 4 bytes @ 0x4
   471  000005                     	ds	4
   472  000009                     ___lldiv@quotient:
   473                           	opt stack 0
   474                           
   475                           ; 4 bytes @ 0x8
   476  000009                     	ds	4
   477  00000D                     ___lldiv@counter:
   478                           	opt stack 0
   479                           
   480                           ; 1 bytes @ 0xC
   481  00000D                     	ds	1
   482  00000E                     ??_isr:
   483                           
   484                           ; 1 bytes @ 0xD
   485  00000E                     	ds	19
   486  000021                     ?_log_lookup:
   487                           	opt stack 0
   488  000021                     ?___wmul:
   489                           	opt stack 0
   490  000021                     ?___awdiv:
   491                           	opt stack 0
   492  000021                     ?___lwdiv:
   493                           	opt stack 0
   494  000021                     ?___lmul:
   495                           	opt stack 0
   496  000021                     send_uart@c:
   497                           	opt stack 0
   498  000021                     set_data@value:
   499                           	opt stack 0
   500  000021                     set_clock@value:
   501                           	opt stack 0
   502  000021                     get_data@port:
   503                           	opt stack 0
   504  000021                     get_clock@port:
   505                           	opt stack 0
   506  000021                     ___wmul@multiplier:
   507                           	opt stack 0
   508  000021                     ___awdiv@dividend:
   509                           	opt stack 0
   510  000021                     ___lwdiv@dividend:
   511                           	opt stack 0
   512  000021                     ___lmul@multiplier:
   513                           	opt stack 0
   514                           
   515                           ; 4 bytes @ 0x20
   516  000021                     	ds	1
   517  000022                     set_data@port:
   518                           	opt stack 0
   519  000022                     set_clock@port:
   520                           	opt stack 0
   521  000022                     print_text@text:
   522                           	opt stack 0
   523                           
   524                           ; 2 bytes @ 0x21
   525  000022                     	ds	1
   526  000023                     ??_log_lookup:
   527  000023                     i2c_write@value:
   528                           	opt stack 0
   529  000023                     i2c_read@bytes:
   530                           	opt stack 0
   531  000023                     i2c_start@port:
   532                           	opt stack 0
   533  000023                     i2c_stop@port:
   534                           	opt stack 0
   535  000023                     ___wmul@multiplicand:
   536                           	opt stack 0
   537  000023                     ___awdiv@divisor:
   538                           	opt stack 0
   539  000023                     ___lwdiv@divisor:
   540                           	opt stack 0
   541                           
   542                           ; 2 bytes @ 0x22
   543  000023                     	ds	1
   544  000024                     ??_i2c_read:
   545  000024                     i2c_write@ack:
   546                           	opt stack 0
   547  000024                     print_text@ptr:
   548                           	opt stack 0
   549                           
   550                           ; 2 bytes @ 0x23
   551  000024                     	ds	1
   552  000025                     i2c_write@i:
   553                           	opt stack 0
   554  000025                     log_lookup@x:
   555                           	opt stack 0
   556  000025                     ___awdiv@counter:
   557                           	opt stack 0
   558  000025                     ___wmul@product:
   559                           	opt stack 0
   560  000025                     ___lwdiv@quotient:
   561                           	opt stack 0
   562  000025                     ___lmul@multiplicand:
   563                           	opt stack 0
   564                           
   565                           ; 4 bytes @ 0x24
   566  000025                     	ds	1
   567  000026                     i2c_write@port:
   568                           	opt stack 0
   569  000026                     ___awdiv@sign:
   570                           	opt stack 0
   571  000026                     log_lookup@y:
   572                           	opt stack 0
   573                           
   574                           ; 2 bytes @ 0x25
   575  000026                     	ds	1
   576  000027                     i2c_write_device2@len:
   577                           	opt stack 0
   578  000027                     ___lwdiv@counter:
   579                           	opt stack 0
   580  000027                     ___awdiv@quotient:
   581                           	opt stack 0
   582                           
   583                           ; 2 bytes @ 0x26
   584  000027                     	ds	1
   585  000028                     i2c_write_device2@i:
   586                           	opt stack 0
   587                           
   588                           ; 1 bytes @ 0x27
   589  000028                     	ds	1
   590  000029                     i2c_write_device2@port:
   591                           	opt stack 0
   592  000029                     print_fixed@x:
   593                           	opt stack 0
   594  000029                     ___lmul@product:
   595                           	opt stack 0
   596                           
   597                           ; 4 bytes @ 0x28
   598  000029                     	ds	2
   599  00002B                     ??_print_fixed:
   600  00002B                     i2c_read@value:
   601                           	opt stack 0
   602                           
   603                           ; 1 bytes @ 0x2A
   604  00002B                     	ds	1
   605  00002C                     i2c_read@j:
   606                           	opt stack 0
   607                           
   608                           ; 1 bytes @ 0x2B
   609  00002C                     	ds	1
   610  00002D                     ?___aldiv:
   611                           	opt stack 0
   612  00002D                     i2c_read@i:
   613                           	opt stack 0
   614  00002D                     print_fixed@y_657:
   615                           	opt stack 0
   616  00002D                     ___aldiv@dividend:
   617                           	opt stack 0
   618                           
   619                           ; 4 bytes @ 0x2C
   620  00002D                     	ds	1
   621  00002E                     i2c_read@port:
   622                           	opt stack 0
   623                           
   624                           ; 1 bytes @ 0x2D
   625  00002E                     	ds	1
   626  00002F                     print_fixed@y:
   627                           	opt stack 0
   628  00002F                     i2c_read_device2@bytes:
   629                           	opt stack 0
   630                           
   631                           ; 1 bytes @ 0x2E
   632  00002F                     	ds	1
   633  000030                     print_fixed@whole:
   634                           	opt stack 0
   635  000030                     i2c_read_device2@i:
   636                           	opt stack 0
   637                           
   638                           ; 1 bytes @ 0x2F
   639  000030                     	ds	1
   640  000031                     print_fixed@force:
   641                           	opt stack 0
   642  000031                     i2c_read_device2@port:
   643                           	opt stack 0
   644  000031                     ___aldiv@divisor:
   645                           	opt stack 0
   646                           
   647                           ; 4 bytes @ 0x30
   648  000031                     	ds	1
   649  000032                     aht20_status@port:
   650                           	opt stack 0
   651  000032                     print_fixed@frac:
   652                           	opt stack 0
   653                           
   654                           ; 2 bytes @ 0x31
   655  000032                     	ds	1
   656  000033                     init_aht20@ptr:
   657                           	opt stack 0
   658                           
   659                           ; 2 bytes @ 0x32
   660  000033                     	ds	1
   661  000034                     print_fixed@base:
   662                           	opt stack 0
   663                           
   664                           ; 2 bytes @ 0x33
   665  000034                     	ds	1
   666  000035                     init_aht20@port:
   667                           	opt stack 0
   668  000035                     ___aldiv@counter:
   669                           	opt stack 0
   670                           
   671                           ; 1 bytes @ 0x34
   672  000035                     	ds	1
   673  000036                     ??_init_aht20:
   674  000036                     ___aldiv@sign:
   675                           	opt stack 0
   676  000036                     print_sensor@ptr:
   677                           	opt stack 0
   678                           
   679                           ; 2 bytes @ 0x35
   680  000036                     	ds	1
   681  000037                     ___aldiv@quotient:
   682                           	opt stack 0
   683                           
   684                           ; 4 bytes @ 0x36
   685  000037                     	ds	1
   686  000038                     
   687                           ; 1 bytes @ 0x37
   688  000038                     	ds	3
   689  00003B                     read_aht20@ptr:
   690                           	opt stack 0
   691                           
   692                           ; 2 bytes @ 0x3A
   693  00003B                     	ds	2
   694                           tblptru	equ	0xFF8
   695                           tblptrh	equ	0xFF7
   696                           postinc0	equ	0xFEE
   697                           wreg	equ	0xFE8
   698                           
   699 ;;
   700 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
   701 ;;
   702 ;; *************** function _main *****************
   703 ;; Defined at:
   704 ;;		line 589 in file "drier.c"
   705 ;; Parameters:    Size  Location     Type
   706 ;;  argc            2   26[BANK0 ] int 
   707 ;;  argv            3   28[BANK0 ] PTR PTR unsigned char 
   708 ;; Auto vars:     Size  Location     Type
   709 ;;		None
   710 ;; Return value:  Size  Location     Type
   711 ;;                  2   26[BANK0 ] int 
   712 ;; Registers used:
   713 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   714 ;; Tracked objects:
   715 ;;		On entry : 0/0
   716 ;;		On exit  : 0/0
   717 ;;		Unchanged: 0/0
   718 ;; Data sizes:     COMRAM   BANK0
   719 ;;      Params:         0       5
   720 ;;      Locals:         0       0
   721 ;;      Temps:          0       5
   722 ;;      Totals:         0      10
   723 ;;Total ram usage:       10 bytes
   724 ;; Hardware stack levels required when called:    7
   725 ;; This function calls:
   726 ;;		_init_aht20
   727 ;;		_print_lf
   728 ;;		_print_sensor
   729 ;;		_print_text
   730 ;;		_read_aht20
   731 ;; This function is called by:
   732 ;;		Startup code after reset
   733 ;; This function uses a non-reentrant model
   734 ;;
   735                           
   736                           	psect	text0
   737  0005EA                     __ptext0:
   738                           	opt stack 0
   739  0005EA                     _main:
   740                           	opt stack 24
   741                           
   742                           ;drier.c: 593: OSCCON = 0b01000000;
   743                           
   744                           ;incstack = 0
   745  0005EA  0E40               	movlw	64
   746  0005EC  6ED3               	movwf	4051,c	;volatile
   747                           
   748                           ;drier.c: 597: ADCON1 = 0b11111011;
   749  0005EE  0EFB               	movlw	251
   750  0005F0  6EC1               	movwf	4033,c	;volatile
   751                           
   752                           ;drier.c: 598: ADCON0 = 0b00001001;
   753  0005F2  0E09               	movlw	9
   754  0005F4  6EC2               	movwf	4034,c	;volatile
   755                           
   756                           ;drier.c: 599: ADCON2 = 0b00111110;
   757  0005F6  0E3E               	movlw	62
   758  0005F8  6EC0               	movwf	4032,c	;volatile
   759                           
   760                           ;drier.c: 600: PIE1bits.ADIE = 1;
   761  0005FA  8C9D               	bsf	3997,6,c	;volatile
   762                           
   763                           ;drier.c: 601: ADCON0bits.GO = 1;
   764  0005FC  82C2               	bsf	4034,1,c	;volatile
   765                           
   766                           ;drier.c: 603: flags.value = 0;
   767  0005FE  0E00               	movlw	0
   768  000600  6E4B               	movwf	_flags,c	;volatile
   769                           
   770                           ;drier.c: 604: pump_tick = 0;
   771  000602  0E00               	movlw	0
   772  000604  6E4F               	movwf	_pump_tick,c	;volatile
   773                           
   774                           ;drier.c: 605: fuse_tick = 0;
   775  000606  0E00               	movlw	0
   776  000608  6E4E               	movwf	_fuse_tick,c	;volatile
   777                           
   778                           ;drier.c: 606: led_tick = 0;
   779  00060A  0E00               	movlw	0
   780  00060C  6E4D               	movwf	_led_tick,c	;volatile
   781                           
   782                           ;drier.c: 607: fuse_accum = 0;
   783  00060E  0E00               	movlw	0
   784  000610  6E45               	movwf	_fuse_accum,c
   785  000612  0E00               	movlw	0
   786  000614  6E46               	movwf	_fuse_accum+1,c
   787  000616  0E00               	movlw	0
   788  000618  6E47               	movwf	_fuse_accum+2,c
   789  00061A  0E00               	movlw	0
   790  00061C  6E48               	movwf	_fuse_accum+3,c
   791                           
   792                           ;drier.c: 608: fuse_count = 0;
   793  00061E  0E00               	movlw	0
   794  000620  6E4A               	movwf	_fuse_count+1,c
   795  000622  0E00               	movlw	0
   796  000624  6E49               	movwf	_fuse_count,c
   797                           
   798                           ;drier.c: 611: TXSTA = 0b00100100;
   799  000626  0E24               	movlw	36
   800  000628  6EAC               	movwf	4012,c	;volatile
   801                           
   802                           ;drier.c: 613: RCSTA = 0b10000000;
   803  00062A  0E80               	movlw	128
   804  00062C  6EAB               	movwf	4011,c	;volatile
   805                           
   806                           ;drier.c: 614: BAUDCTL = 0b00001000;
   807  00062E  0E08               	movlw	8
   808  000630  6EAA               	movwf	4010,c	;volatile
   809                           
   810                           ;drier.c: 618: SPBRG = 26;
   811  000632  0E1A               	movlw	26
   812  000634  6EAF               	movwf	4015,c	;volatile
   813                           
   814                           ;drier.c: 623: TRISAbits.TRISA7 = 1;
   815  000636  8E92               	bsf	3986,7,c	;volatile
   816                           
   817                           ;drier.c: 624: TRISAbits.TRISA6 = 1;
   818  000638  8C92               	bsf	3986,6,c	;volatile
   819                           
   820                           ;drier.c: 625: TRISBbits.TRISB3 = 1;
   821  00063A  8693               	bsf	3987,3,c	;volatile
   822                           
   823                           ;drier.c: 626: TRISBbits.TRISB2 = 1;
   824  00063C  8493               	bsf	3987,2,c	;volatile
   825                           
   826                           ;drier.c: 627: LATAbits.LATA7 = 0;
   827  00063E  9E89               	bcf	3977,7,c	;volatile
   828                           
   829                           ;drier.c: 628: LATAbits.LATA6 = 0;
   830  000640  9C89               	bcf	3977,6,c	;volatile
   831                           
   832                           ;drier.c: 629: LATBbits.LATB3 = 0;
   833  000642  968A               	bcf	3978,3,c	;volatile
   834                           
   835                           ;drier.c: 630: LATBbits.LATB2 = 0;
   836  000644  948A               	bcf	3978,2,c	;volatile
   837                           
   838                           ;drier.c: 633: LATAbits.LATA1 = 0;
   839  000646  9289               	bcf	3977,1,c	;volatile
   840                           
   841                           ;drier.c: 634: TRISAbits.TRISA1 = 0;
   842  000648  9292               	bcf	3986,1,c	;volatile
   843                           
   844                           ;drier.c: 635: LATAbits.LATA3 = 0;
   845  00064A  9689               	bcf	3977,3,c	;volatile
   846                           
   847                           ;drier.c: 636: TRISAbits.TRISA3 = 0;
   848  00064C  9692               	bcf	3986,3,c	;volatile
   849                           
   850                           ;drier.c: 638: LATAbits.LATA0 = 0;
   851  00064E  9089               	bcf	3977,0,c	;volatile
   852                           
   853                           ;drier.c: 639: TRISAbits.TRISA0 = 0;
   854  000650  9092               	bcf	3986,0,c	;volatile
   855                           
   856                           ;drier.c: 642: T0CON = 0b10001000;
   857  000652  0E88               	movlw	136
   858  000654  6ED5               	movwf	4053,c	;volatile
   859                           
   860                           ;drier.c: 643: TMR0 = -7812;
   861  000656  0EE1               	movlw	225
   862  000658  6ED7               	movwf	4055,c	;volatile
   863  00065A  0E7C               	movlw	124
   864  00065C  6ED6               	movwf	4054,c	;volatile
   865                           
   866                           ;drier.c: 644: INTCONbits.TMR0IF = 0;
   867  00065E  94F2               	bcf	intcon,2,c	;volatile
   868                           
   869                           ;drier.c: 645: INTCONbits.TMR0IE = 1;
   870  000660  8AF2               	bsf	intcon,5,c	;volatile
   871                           
   872                           ;drier.c: 647: print_text("\n\n\n\nWelcome to filament drier\n");
   873  000662  0E65               	movlw	low STR_4
   874  000664  6E22               	movwf	print_text@text,c
   875  000666  0E02               	movlw	high STR_4
   876  000668  6E23               	movwf	print_text@text+1,c
   877  00066A  EC3E  F007         	call	_print_text	;wreg free
   878                           
   879                           ;drier.c: 650: print_text("Initializing sensors\n");
   880  00066E  0E9B               	movlw	low STR_5
   881  000670  6E22               	movwf	print_text@text,c
   882  000672  0E02               	movlw	high STR_5
   883  000674  6E23               	movwf	print_text@text+1,c
   884  000676  EC3E  F007         	call	_print_text	;wreg free
   885                           
   886                           ;drier.c: 651: init_aht20(&outside, 0);
   887  00067A  0E51               	movlw	low _outside
   888  00067C  6E33               	movwf	init_aht20@ptr,c
   889  00067E  0E00               	movlw	high _outside
   890  000680  6E34               	movwf	init_aht20@ptr+1,c
   891  000682  0E00               	movlw	0
   892  000684  6E35               	movwf	init_aht20@port,c
   893  000686  EC1F  F007         	call	_init_aht20	;wreg free
   894                           
   895                           ;drier.c: 652: init_aht20(&inside, 1);
   896  00068A  0E58               	movlw	low _inside
   897  00068C  6E33               	movwf	init_aht20@ptr,c
   898  00068E  0E00               	movlw	high _inside
   899  000690  6E34               	movwf	init_aht20@ptr+1,c
   900  000692  0E01               	movlw	1
   901  000694  6E35               	movwf	init_aht20@port,c
   902  000696  EC1F  F007         	call	_init_aht20	;wreg free
   903                           
   904                           ;drier.c: 663: print_text("Mane loop\n");
   905  00069A  0EC7               	movlw	low STR_6
   906  00069C  6E22               	movwf	print_text@text,c
   907  00069E  0E02               	movlw	high STR_6
   908  0006A0  6E23               	movwf	print_text@text+1,c
   909  0006A2  EC3E  F007         	call	_print_text	;wreg free
   910                           
   911                           ;drier.c: 667: INTCONbits.GIE = 1;
   912  0006A6  8EF2               	bsf	intcon,7,c	;volatile
   913                           
   914                           ;drier.c: 668: INTCONbits.PEIE = 1;
   915  0006A8  8CF2               	bsf	intcon,6,c	;volatile
   916  0006AA                     l207:
   917  0006AA  0004               	clrwdt		;# 
   918                           
   919                           ;drier.c: 687: if(flags.update_pump)
   920  0006AC  A24B               	btfss	_flags,1,c	;volatile
   921  0006AE  D090               	goto	l208
   922                           
   923                           ;drier.c: 688: {
   924                           ;drier.c: 689: flags.update_pump = 0;
   925  0006B0  924B               	bcf	_flags,1,c	;volatile
   926                           
   927                           ;drier.c: 692: read_aht20(&inside);
   928  0006B2  0E58               	movlw	low _inside
   929  0006B4  6E3B               	movwf	read_aht20@ptr,c
   930  0006B6  0E00               	movlw	high _inside
   931  0006B8  6E3C               	movwf	read_aht20@ptr+1,c
   932  0006BA  EC71  F001         	call	_read_aht20	;wreg free
   933                           
   934                           ;drier.c: 693: read_aht20(&outside);
   935  0006BE  0E51               	movlw	low _outside
   936  0006C0  6E3B               	movwf	read_aht20@ptr,c
   937  0006C2  0E00               	movlw	high _outside
   938  0006C4  6E3C               	movwf	read_aht20@ptr+1,c
   939  0006C6  EC71  F001         	call	_read_aht20	;wreg free
   940                           
   941                           ;drier.c: 695: print_text("I: ");
   942  0006CA  0ED2               	movlw	low STR_7
   943  0006CC  6E22               	movwf	print_text@text,c
   944  0006CE  0E02               	movlw	high STR_7
   945  0006D0  6E23               	movwf	print_text@text+1,c
   946  0006D2  EC3E  F007         	call	_print_text	;wreg free
   947                           
   948                           ;drier.c: 696: print_sensor(&inside);
   949  0006D6  0E58               	movlw	low _inside
   950  0006D8  6E36               	movwf	print_sensor@ptr,c
   951  0006DA  0E00               	movlw	high _inside
   952  0006DC  6E37               	movwf	print_sensor@ptr+1,c
   953  0006DE  EC4E  F006         	call	_print_sensor	;wreg free
   954                           
   955                           ;drier.c: 697: print_text("O: ");
   956  0006E2  0ED6               	movlw	low STR_8
   957  0006E4  6E22               	movwf	print_text@text,c
   958  0006E6  0E02               	movlw	high STR_8
   959  0006E8  6E23               	movwf	print_text@text+1,c
   960  0006EA  EC3E  F007         	call	_print_text	;wreg free
   961                           
   962                           ;drier.c: 698: print_sensor(&outside);
   963  0006EE  0E51               	movlw	low _outside
   964  0006F0  6E36               	movwf	print_sensor@ptr,c
   965  0006F2  0E00               	movlw	high _outside
   966  0006F4  6E37               	movwf	print_sensor@ptr+1,c
   967  0006F6  EC4E  F006         	call	_print_sensor	;wreg free
   968                           
   969                           ;drier.c: 701: if(inside.t < outside.t)
   970  0006FA  5054               	movf	_outside+3,w,c
   971  0006FC  5C5B               	subwf	_inside+3,w,c
   972  0006FE  505C               	movf	_inside+4,w,c
   973  000700  0A80               	xorlw	128
   974  000702  0100               	movlb	0	; () banked
   975  000704  6F9F               	movwf	??_main& (0+255),b
   976  000706  5055               	movf	_outside+4,w,c
   977  000708  0A80               	xorlw	128
   978  00070A  599F               	subwfb	??_main& (0+255),w,b
   979  00070C  B0D8               	btfsc	status,0,c
   980  00070E  D002               	goto	l209
   981                           
   982                           ; BSR set to: 0
   983                           ;drier.c: 702: {
   984                           ;drier.c: 703: LATAbits.LATA3 = 0;
   985  000710  9689               	bcf	3977,3,c	;volatile
   986                           
   987                           ;drier.c: 704: }
   988  000712  D001               	goto	l210
   989  000714                     l209:
   990                           
   991                           ; BSR set to: 0
   992                           ;drier.c: 705: else
   993                           ;drier.c: 706: {
   994                           ;drier.c: 707: LATAbits.LATA3 = 1;
   995  000714  8689               	bsf	3977,3,c	;volatile
   996  000716                     l210:
   997                           
   998                           ; BSR set to: 0
   999                           ;drier.c: 708: }
  1000                           ;drier.c: 711: if(!LATAbits.LATA1)
  1001  000716  B289               	btfsc	3977,1,c	;volatile
  1002  000718  D02E               	goto	l211
  1003                           
  1004                           ; BSR set to: 0
  1005                           ;drier.c: 712: {
  1006                           ;drier.c: 713: if(flags.timed_out)
  1007  00071A  AA4B               	btfss	_flags,5,c	;volatile
  1008  00071C  D00B               	goto	l213
  1009                           
  1010                           ; BSR set to: 0
  1011                           ;drier.c: 714: {
  1012                           ;drier.c: 715: duty_counter++;
  1013  00071E  2A4C               	incf	_duty_counter,f,c	;volatile
  1014                           
  1015                           ; BSR set to: 0
  1016                           ;drier.c: 716: if(duty_counter >= 6)
  1017  000720  0E05               	movlw	5
  1018  000722  644C               	cpfsgt	_duty_counter,c	;volatile
  1019  000724  D007               	goto	l213
  1020                           
  1021                           ; BSR set to: 0
  1022                           ;drier.c: 717: {
  1023                           ;drier.c: 718: flags.timed_out = 0;
  1024  000726  9A4B               	bcf	_flags,5,c	;volatile
  1025                           
  1026                           ; BSR set to: 0
  1027                           ;drier.c: 719: print_text("reached DUTY_CYCLE_OFF");
  1028  000728  0E84               	movlw	low STR_9
  1029  00072A  6E22               	movwf	print_text@text,c
  1030  00072C  0E02               	movlw	high STR_9
  1031  00072E  6E23               	movwf	print_text@text+1,c
  1032  000730  EC3E  F007         	call	_print_text	;wreg free
  1033  000734                     l213:
  1034                           
  1035                           ;drier.c: 720: }
  1036                           ;drier.c: 721: }
  1037                           ;drier.c: 723: if(inside.dp > outside.dp + (2 * 256) &&
  1038                           ;drier.c: 724: !flags.fuse_blown &&
  1039                           ;drier.c: 725: !flags.timed_out)
  1040  000734  0E00               	movlw	0
  1041  000736  0100               	movlb	0	; () banked
  1042  000738  6F9F               	movwf	??_main& (0+255),b
  1043  00073A  0E02               	movlw	2
  1044  00073C  6FA0               	movwf	(??_main+1)& (0+255),b
  1045  00073E  EE20  F056         	lfsr	2,_outside+5
  1046  000742  CFDE F0A1          	movff	postinc2,??_main+2
  1047  000746  CFDD F0A2          	movff	postdec2,??_main+3
  1048  00074A  519F               	movf	??_main& (0+255),w,b
  1049  00074C  27A1               	addwf	(??_main+2)& (0+255),f,b
  1050  00074E  51A0               	movf	(??_main+1)& (0+255),w,b
  1051  000750  23A2               	addwfc	(??_main+3)& (0+255),f,b
  1052  000752  505D               	movf	_inside+5,w,c
  1053  000754  5DA1               	subwf	(??_main+2)& (0+255),w,b
  1054  000756  51A2               	movf	(??_main+3)& (0+255),w,b
  1055  000758  0A80               	xorlw	128
  1056  00075A  6FA3               	movwf	(??_main+4)& (0+255),b
  1057  00075C  505E               	movf	_inside+6,w,c
  1058  00075E  0A80               	xorlw	128
  1059  000760  59A3               	subwfb	(??_main+4)& (0+255),w,b
  1060  000762  A0D8               	btfss	status,0,c
  1061                           
  1062                           ; BSR set to: 0
  1063  000764  B44B               	btfsc	_flags,2,c	;volatile
  1064  000766  D032               	goto	l220
  1065                           
  1066                           ; BSR set to: 0
  1067  000768  BA4B               	btfsc	_flags,5,c	;volatile
  1068  00076A  D030               	goto	l220
  1069                           
  1070                           ; BSR set to: 0
  1071                           ;drier.c: 726: {
  1072                           ;drier.c: 728: LATAbits.LATA1 = 1;
  1073  00076C  8289               	bsf	3977,1,c	;volatile
  1074                           
  1075                           ;drier.c: 729: flags.ignore_fuse = 1;
  1076  00076E  864B               	bsf	_flags,3,c	;volatile
  1077                           
  1078                           ; BSR set to: 0
  1079                           ;drier.c: 730: duty_counter = 0;
  1080  000770  0E00               	movlw	0
  1081  000772  6E4C               	movwf	_duty_counter,c	;volatile
  1082                           
  1083                           ; BSR set to: 0
  1084                           ;drier.c: 731: }
  1085                           ;drier.c: 732: }
  1086  000774  D02B               	goto	l220
  1087  000776                     l211:
  1088                           
  1089                           ; BSR set to: 0
  1090                           ;drier.c: 733: else
  1091                           ;drier.c: 734: if(LATAbits.LATA1)
  1092  000776  A289               	btfss	3977,1,c	;volatile
  1093  000778  D029               	goto	l220
  1094                           
  1095                           ; BSR set to: 0
  1096                           ;drier.c: 735: {
  1097                           ;drier.c: 736: duty_counter++;
  1098  00077A  2A4C               	incf	_duty_counter,f,c	;volatile
  1099                           
  1100                           ; BSR set to: 0
  1101                           ;drier.c: 737: if(inside.dp < outside.dp + (1 * 256) ||
  1102                           ;drier.c: 738: duty_counter >= 24)
  1103  00077C  0E00               	movlw	0
  1104  00077E  6F9F               	movwf	??_main& (0+255),b
  1105  000780  0E01               	movlw	1
  1106  000782  6FA0               	movwf	(??_main+1)& (0+255),b
  1107  000784  EE20  F056         	lfsr	2,_outside+5
  1108  000788  CFDE F0A1          	movff	postinc2,??_main+2
  1109  00078C  CFDD F0A2          	movff	postdec2,??_main+3
  1110  000790  519F               	movf	??_main& (0+255),w,b
  1111  000792  27A1               	addwf	(??_main+2)& (0+255),f,b
  1112  000794  51A0               	movf	(??_main+1)& (0+255),w,b
  1113  000796  23A2               	addwfc	(??_main+3)& (0+255),f,b
  1114  000798  51A1               	movf	(??_main+2)& (0+255),w,b
  1115  00079A  5C5D               	subwf	_inside+5,w,c
  1116  00079C  505E               	movf	_inside+6,w,c
  1117  00079E  0A80               	xorlw	128
  1118  0007A0  6FA3               	movwf	(??_main+4)& (0+255),b
  1119  0007A2  51A2               	movf	(??_main+3)& (0+255),w,b
  1120  0007A4  0A80               	xorlw	128
  1121  0007A6  59A3               	subwfb	(??_main+4)& (0+255),w,b
  1122  0007A8  A0D8               	btfss	status,0,c
  1123  0007AA  D003               	goto	u2320
  1124                           
  1125                           ; BSR set to: 0
  1126  0007AC  0E17               	movlw	23
  1127  0007AE  644C               	cpfsgt	_duty_counter,c	;volatile
  1128  0007B0  D00D               	goto	l220
  1129  0007B2                     u2320:
  1130                           
  1131                           ; BSR set to: 0
  1132                           ;drier.c: 739: {
  1133                           ;drier.c: 741: LATAbits.LATA1 = 0;
  1134  0007B2  9289               	bcf	3977,1,c	;volatile
  1135                           
  1136                           ; BSR set to: 0
  1137                           ;drier.c: 742: if(duty_counter >= 24)
  1138  0007B4  0E17               	movlw	23
  1139  0007B6  644C               	cpfsgt	_duty_counter,c	;volatile
  1140  0007B8  D009               	goto	l220
  1141                           
  1142                           ; BSR set to: 0
  1143                           ;drier.c: 743: {
  1144                           ;drier.c: 744: flags.timed_out = 1;
  1145  0007BA  8A4B               	bsf	_flags,5,c	;volatile
  1146                           
  1147                           ; BSR set to: 0
  1148                           ;drier.c: 745: duty_counter = 0;
  1149  0007BC  0E00               	movlw	0
  1150  0007BE  6E4C               	movwf	_duty_counter,c	;volatile
  1151                           
  1152                           ; BSR set to: 0
  1153                           ;drier.c: 746: print_text("reached DUTY_CYCLE_ON");
  1154  0007C0  0EB1               	movlw	low STR_10
  1155  0007C2  6E22               	movwf	print_text@text,c
  1156  0007C4  0E02               	movlw	high STR_10
  1157  0007C6  6E23               	movwf	print_text@text+1,c
  1158  0007C8  EC3E  F007         	call	_print_text	;wreg free
  1159  0007CC                     l220:
  1160                           
  1161                           ;drier.c: 747: }
  1162                           ;drier.c: 748: }
  1163                           ;drier.c: 749: }
  1164                           ;drier.c: 750: print_lf();
  1165  0007CC  ECEE  F007         	call	_print_lf	;wreg free
  1166  0007D0                     l208:
  1167                           
  1168                           ;drier.c: 769: }
  1169                           ;drier.c: 772: if(flags.got_fuse)
  1170  0007D0  A84B               	btfss	_flags,4,c	;volatile
  1171  0007D2  D76B               	goto	l207
  1172                           
  1173                           ;drier.c: 773: {
  1174                           ;drier.c: 774: flags.got_fuse = 0;
  1175  0007D4  984B               	bcf	_flags,4,c	;volatile
  1176                           
  1177                           ;drier.c: 776: if(LATAbits.LATA1)
  1178  0007D6  5089               	movf	3977,w,c	;volatile
  1179                           
  1180                           ;drier.c: 777: {
  1181  0007D8  D768               	goto	l207
  1182  0007DA                     __end_of_main:
  1183                           	opt stack 0
  1184                           tblptru	equ	0xFF8
  1185                           tblptrh	equ	0xFF7
  1186                           intcon	equ	0xFF2
  1187                           postinc0	equ	0xFEE
  1188                           wreg	equ	0xFE8
  1189                           postinc2	equ	0xFDE
  1190                           postdec2	equ	0xFDD
  1191                           status	equ	0xFD8
  1192                           
  1193 ;; *************** function _read_aht20 *****************
  1194 ;; Defined at:
  1195 ;;		line 521 in file "drier.c"
  1196 ;; Parameters:    Size  Location     Type
  1197 ;;  ptr             2   58[COMRAM] PTR struct .
  1198 ;;		 -> inside(7), outside(7), 
  1199 ;; Auto vars:     Size  Location     Type
  1200 ;;  x               4   22[BANK0 ] long 
  1201 ;;  y               4   18[BANK0 ] long 
  1202 ;;  C               4   14[BANK0 ] const long 
  1203 ;;  B               4   10[BANK0 ] const long 
  1204 ;; Return value:  Size  Location     Type
  1205 ;;                  1    wreg      void 
  1206 ;; Registers used:
  1207 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1208 ;; Tracked objects:
  1209 ;;		On entry : 0/0
  1210 ;;		On exit  : 0/0
  1211 ;;		Unchanged: 0/0
  1212 ;; Data sizes:     COMRAM   BANK0
  1213 ;;      Params:         2       0
  1214 ;;      Locals:         0      16
  1215 ;;      Temps:          0      10
  1216 ;;      Totals:         2      26
  1217 ;;Total ram usage:       28 bytes
  1218 ;; Hardware stack levels used:    1
  1219 ;; Hardware stack levels required when called:    6
  1220 ;; This function calls:
  1221 ;;		___aldiv
  1222 ;;		___awdiv
  1223 ;;		___lmul
  1224 ;;		_aht20_status
  1225 ;;		_i2c_read_device2
  1226 ;;		_i2c_write_device2
  1227 ;;		_log_lookup
  1228 ;; This function is called by:
  1229 ;;		_main
  1230 ;; This function uses a non-reentrant model
  1231 ;;
  1232                           
  1233                           	psect	text1
  1234  0002E2                     __ptext1:
  1235                           	opt stack 0
  1236  0002E2                     _read_aht20:
  1237                           	opt stack 24
  1238                           
  1239                           ;drier.c: 523: i2c_buffer[0] = 0xAC;
  1240                           
  1241                           ;incstack = 0
  1242  0002E2  0EAC               	movlw	172
  1243  0002E4  6E3D               	movwf	_i2c_buffer,c
  1244                           
  1245                           ;drier.c: 524: i2c_buffer[1] = 0x33;
  1246  0002E6  0E33               	movlw	51
  1247  0002E8  6E3E               	movwf	_i2c_buffer+1,c
  1248                           
  1249                           ;drier.c: 525: i2c_buffer[2] = 0x00;
  1250  0002EA  0E00               	movlw	0
  1251  0002EC  6E3F               	movwf	_i2c_buffer+2,c
  1252                           
  1253                           ;drier.c: 526: i2c_write_device2(ptr->port, 3);
  1254  0002EE  0E03               	movlw	3
  1255  0002F0  6E27               	movwf	i2c_write_device2@len,c
  1256  0002F2  C03B  FFD9         	movff	read_aht20@ptr,fsr2l
  1257  0002F6  C03C  FFDA         	movff	read_aht20@ptr+1,fsr2h
  1258  0002FA  50DF               	movf	indf2,w,c
  1259  0002FC  ECFD  F006         	call	_i2c_write_device2
  1260  000300                     
  1261                           ;drier.c: 530: {
  1262                           ;drier.c: 531: ;
  1263  000300  C03B  FFD9         	movff	read_aht20@ptr,fsr2l
  1264  000304  C03C  FFDA         	movff	read_aht20@ptr+1,fsr2h
  1265  000308  50DF               	movf	indf2,w,c
  1266  00030A  ECE0  F007         	call	_aht20_status
  1267  00030E  0100               	movlb	0	; () banked
  1268  000310  6F80               	movwf	??_read_aht20& (0+255),b
  1269  000312  BF80               	btfsc	??_read_aht20& (0+255),7,b
  1270  000314  D7F5               	goto	l191
  1271                           
  1272                           ; BSR set to: 0
  1273                           ;drier.c: 532: }
  1274                           ;drier.c: 535: i2c_read_device2(ptr->port, 6);
  1275                           
  1276                           ; BSR set to: 0
  1277  000316  0E06               	movlw	6
  1278  000318  6E2F               	movwf	i2c_read_device2@bytes,c
  1279  00031A  C03B  FFD9         	movff	read_aht20@ptr,fsr2l
  1280  00031E  C03C  FFDA         	movff	read_aht20@ptr+1,fsr2h
  1281  000322  50DF               	movf	indf2,w,c
  1282  000324  ECD9  F006         	call	_i2c_read_device2
  1283                           
  1284                           ;drier.c: 536: int32_t x = i2c_buffer[1];
  1285  000328  503E               	movf	_i2c_buffer+1,w,c
  1286  00032A  0100               	movlb	0	; () banked
  1287  00032C  6F96               	movwf	read_aht20@x& (0+255),b
  1288  00032E  6B97               	clrf	(read_aht20@x+1)& (0+255),b
  1289  000330  6B98               	clrf	(read_aht20@x+2)& (0+255),b
  1290  000332  6B99               	clrf	(read_aht20@x+3)& (0+255),b
  1291                           
  1292                           ; BSR set to: 0
  1293                           ;drier.c: 537: x <<= 8;
  1294  000334  C098  F099         	movff	read_aht20@x+2,read_aht20@x+3
  1295  000338  C097  F098         	movff	read_aht20@x+1,read_aht20@x+2
  1296  00033C  C096  F097         	movff	read_aht20@x,read_aht20@x+1
  1297  000340  6B96               	clrf	read_aht20@x& (0+255),b
  1298                           
  1299                           ; BSR set to: 0
  1300                           ;drier.c: 538: x |= i2c_buffer[2];
  1301  000342  503F               	movf	_i2c_buffer+2,w,c
  1302  000344  1396               	iorwf	read_aht20@x& (0+255),f,b
  1303                           
  1304                           ; BSR set to: 0
  1305                           ;drier.c: 539: x <<= 4;
  1306  000346  0E04               	movlw	4
  1307  000348                     u2195:
  1308  000348  90D8               	bcf	status,0,c
  1309  00034A  3796               	rlcf	read_aht20@x& (0+255),f,b
  1310  00034C  3797               	rlcf	(read_aht20@x+1)& (0+255),f,b
  1311  00034E  3798               	rlcf	(read_aht20@x+2)& (0+255),f,b
  1312  000350  3799               	rlcf	(read_aht20@x+3)& (0+255),f,b
  1313  000352  2EE8               	decfsz	wreg,f,c
  1314  000354  D7F9               	goto	u2195
  1315                           
  1316                           ; BSR set to: 0
  1317                           ;drier.c: 540: x |= i2c_buffer[3] >> 4;
  1318  000356  C040  F080         	movff	_i2c_buffer+3,??_read_aht20
  1319  00035A  3B80               	swapf	??_read_aht20& (0+255),f,b
  1320  00035C  0E0F               	movlw	15
  1321  00035E  1780               	andwf	??_read_aht20& (0+255),f,b
  1322  000360  5180               	movf	??_read_aht20& (0+255),w,b
  1323  000362  1396               	iorwf	read_aht20@x& (0+255),f,b
  1324                           
  1325                           ; BSR set to: 0
  1326                           ;drier.c: 541: ptr->h = x * 100 / 0x1000;
  1327  000364  C096  F021         	movff	read_aht20@x,___lmul@multiplier
  1328  000368  C097  F022         	movff	read_aht20@x+1,___lmul@multiplier+1
  1329  00036C  C098  F023         	movff	read_aht20@x+2,___lmul@multiplier+2
  1330  000370  C099  F024         	movff	read_aht20@x+3,___lmul@multiplier+3
  1331  000374  0E64               	movlw	100
  1332  000376  6E25               	movwf	___lmul@multiplicand,c
  1333  000378  0E00               	movlw	0
  1334  00037A  6E26               	movwf	___lmul@multiplicand+1,c
  1335  00037C  0E00               	movlw	0
  1336  00037E  6E27               	movwf	___lmul@multiplicand+2,c
  1337  000380  0E00               	movlw	0
  1338  000382  6E28               	movwf	___lmul@multiplicand+3,c
  1339  000384  EC85  F006         	call	___lmul	;wreg free
  1340  000388  C021  F02D         	movff	?___lmul,___aldiv@dividend
  1341  00038C  C022  F02E         	movff	?___lmul+1,___aldiv@dividend+1
  1342  000390  C023  F02F         	movff	?___lmul+2,___aldiv@dividend+2
  1343  000394  C024  F030         	movff	?___lmul+3,___aldiv@dividend+3
  1344  000398  0E00               	movlw	0
  1345  00039A  6E31               	movwf	___aldiv@divisor,c
  1346  00039C  0E10               	movlw	16
  1347  00039E  6E32               	movwf	___aldiv@divisor+1,c
  1348  0003A0  0E00               	movlw	0
  1349  0003A2  6E33               	movwf	___aldiv@divisor+2,c
  1350  0003A4  0E00               	movlw	0
  1351  0003A6  6E34               	movwf	___aldiv@divisor+3,c
  1352  0003A8  EC86  F004         	call	___aldiv	;wreg free
  1353  0003AC  EE20 F001          	lfsr	2,1
  1354  0003B0  503B               	movf	read_aht20@ptr,w,c
  1355  0003B2  26D9               	addwf	fsr2l,f,c
  1356  0003B4  503C               	movf	read_aht20@ptr+1,w,c
  1357  0003B6  22DA               	addwfc	fsr2h,f,c
  1358  0003B8  C02D  FFDE         	movff	?___aldiv,postinc2
  1359  0003BC  C02E  FFDD         	movff	?___aldiv+1,postdec2
  1360                           
  1361                           ;drier.c: 543: x = i2c_buffer[3] & 0x0f;
  1362  0003C0  C040  F080         	movff	_i2c_buffer+3,??_read_aht20
  1363  0003C4  0E0F               	movlw	15
  1364  0003C6  0100               	movlb	0	; () banked
  1365  0003C8  1780               	andwf	??_read_aht20& (0+255),f,b
  1366  0003CA  5180               	movf	??_read_aht20& (0+255),w,b
  1367  0003CC  6F96               	movwf	read_aht20@x& (0+255),b
  1368  0003CE  6B97               	clrf	(read_aht20@x+1)& (0+255),b
  1369  0003D0  6B98               	clrf	(read_aht20@x+2)& (0+255),b
  1370  0003D2  6B99               	clrf	(read_aht20@x+3)& (0+255),b
  1371                           
  1372                           ; BSR set to: 0
  1373                           ;drier.c: 544: x <<= 8;
  1374  0003D4  C098  F099         	movff	read_aht20@x+2,read_aht20@x+3
  1375  0003D8  C097  F098         	movff	read_aht20@x+1,read_aht20@x+2
  1376  0003DC  C096  F097         	movff	read_aht20@x,read_aht20@x+1
  1377  0003E0  6B96               	clrf	read_aht20@x& (0+255),b
  1378                           
  1379                           ; BSR set to: 0
  1380                           ;drier.c: 545: x |= i2c_buffer[4];
  1381  0003E2  5041               	movf	_i2c_buffer+4,w,c
  1382  0003E4  1396               	iorwf	read_aht20@x& (0+255),f,b
  1383                           
  1384                           ; BSR set to: 0
  1385                           ;drier.c: 546: x <<= 8;
  1386  0003E6  C098  F099         	movff	read_aht20@x+2,read_aht20@x+3
  1387  0003EA  C097  F098         	movff	read_aht20@x+1,read_aht20@x+2
  1388  0003EE  C096  F097         	movff	read_aht20@x,read_aht20@x+1
  1389  0003F2  6B96               	clrf	read_aht20@x& (0+255),b
  1390                           
  1391                           ; BSR set to: 0
  1392                           ;drier.c: 547: x |= i2c_buffer[5];
  1393  0003F4  5042               	movf	_i2c_buffer+5,w,c
  1394  0003F6  1396               	iorwf	read_aht20@x& (0+255),f,b
  1395                           
  1396                           ; BSR set to: 0
  1397                           ;drier.c: 548: ptr->t = x * 200 / 0x1000 - 50 * 256;
  1398  0003F8  0E00               	movlw	0
  1399  0003FA  6F80               	movwf	??_read_aht20& (0+255),b
  1400  0003FC  0ECE               	movlw	206
  1401  0003FE  6F81               	movwf	(??_read_aht20+1)& (0+255),b
  1402  000400  C096  F021         	movff	read_aht20@x,___lmul@multiplier
  1403  000404  C097  F022         	movff	read_aht20@x+1,___lmul@multiplier+1
  1404  000408  C098  F023         	movff	read_aht20@x+2,___lmul@multiplier+2
  1405  00040C  C099  F024         	movff	read_aht20@x+3,___lmul@multiplier+3
  1406  000410  0EC8               	movlw	200
  1407  000412  6E25               	movwf	___lmul@multiplicand,c
  1408  000414  0E00               	movlw	0
  1409  000416  6E26               	movwf	___lmul@multiplicand+1,c
  1410  000418  0E00               	movlw	0
  1411  00041A  6E27               	movwf	___lmul@multiplicand+2,c
  1412  00041C  0E00               	movlw	0
  1413  00041E  6E28               	movwf	___lmul@multiplicand+3,c
  1414  000420  EC85  F006         	call	___lmul	;wreg free
  1415  000424  C021  F02D         	movff	?___lmul,___aldiv@dividend
  1416  000428  C022  F02E         	movff	?___lmul+1,___aldiv@dividend+1
  1417  00042C  C023  F02F         	movff	?___lmul+2,___aldiv@dividend+2
  1418  000430  C024  F030         	movff	?___lmul+3,___aldiv@dividend+3
  1419  000434  0E00               	movlw	0
  1420  000436  6E31               	movwf	___aldiv@divisor,c
  1421  000438  0E10               	movlw	16
  1422  00043A  6E32               	movwf	___aldiv@divisor+1,c
  1423  00043C  0E00               	movlw	0
  1424  00043E  6E33               	movwf	___aldiv@divisor+2,c
  1425  000440  0E00               	movlw	0
  1426  000442  6E34               	movwf	___aldiv@divisor+3,c
  1427  000444  EC86  F004         	call	___aldiv	;wreg free
  1428  000448  0100               	movlb	0	; () banked
  1429  00044A  5180               	movf	??_read_aht20& (0+255),w,b
  1430  00044C  262D               	addwf	?___aldiv,f,c
  1431  00044E  5181               	movf	(??_read_aht20+1)& (0+255),w,b
  1432  000450  222E               	addwfc	?___aldiv+1,f,c
  1433  000452  EE20 F003          	lfsr	2,3
  1434  000456  503B               	movf	read_aht20@ptr,w,c
  1435  000458  26D9               	addwf	fsr2l,f,c
  1436  00045A  503C               	movf	read_aht20@ptr+1,w,c
  1437  00045C  22DA               	addwfc	fsr2h,f,c
  1438  00045E  C02D  FFDE         	movff	?___aldiv,postinc2
  1439  000462  C02E  FFDD         	movff	?___aldiv+1,postdec2
  1440                           
  1441                           ; BSR set to: 0
  1442                           ;drier.c: 552: const int32_t B = (int32_t)(17.67 * 256);
  1443  000466  0EAB               	movlw	171
  1444  000468  6F8A               	movwf	read_aht20@B& (0+255),b
  1445  00046A  0E11               	movlw	17
  1446  00046C  6F8B               	movwf	(read_aht20@B+1)& (0+255),b
  1447  00046E  0E00               	movlw	0
  1448  000470  6F8C               	movwf	(read_aht20@B+2)& (0+255),b
  1449  000472  0E00               	movlw	0
  1450  000474  6F8D               	movwf	(read_aht20@B+3)& (0+255),b
  1451                           
  1452                           ; BSR set to: 0
  1453                           ;drier.c: 553: const int32_t C = (int32_t)(243.5 * 256);
  1454  000476  0E80               	movlw	128
  1455  000478  6F8E               	movwf	read_aht20@C& (0+255),b
  1456  00047A  0EF3               	movlw	243
  1457  00047C  6F8F               	movwf	(read_aht20@C+1)& (0+255),b
  1458  00047E  0E00               	movlw	0
  1459  000480  6F90               	movwf	(read_aht20@C+2)& (0+255),b
  1460  000482  0E00               	movlw	0
  1461  000484  6F91               	movwf	(read_aht20@C+3)& (0+255),b
  1462                           
  1463                           ; BSR set to: 0
  1464                           ;drier.c: 555: int32_t y = (int32_t)log_lookup(ptr->h / 256) +
  1465                           ;drier.c: 556: B * ptr->t / (C + ptr->t);
  1466  000486  EE20 F001          	lfsr	2,1
  1467  00048A  503B               	movf	read_aht20@ptr,w,c
  1468  00048C  26D9               	addwf	fsr2l,f,c
  1469  00048E  503C               	movf	read_aht20@ptr+1,w,c
  1470  000490  22DA               	addwfc	fsr2h,f,c
  1471  000492  CFDE F021          	movff	postinc2,___awdiv@dividend
  1472  000496  CFDD F022          	movff	postdec2,___awdiv@dividend+1
  1473  00049A  0E01               	movlw	1
  1474  00049C  6E24               	movwf	___awdiv@divisor+1,c
  1475  00049E  0E00               	movlw	0
  1476  0004A0  6E23               	movwf	___awdiv@divisor,c
  1477  0004A2  EC52  F005         	call	___awdiv	;wreg free
  1478  0004A6  5021               	movf	?___awdiv,w,c
  1479  0004A8  ECD5  F005         	call	_log_lookup
  1480  0004AC  C021  F080         	movff	?_log_lookup,??_read_aht20
  1481  0004B0  C022  F081         	movff	?_log_lookup+1,??_read_aht20+1
  1482  0004B4  0E00               	movlw	0
  1483  0004B6  0100               	movlb	0	; () banked
  1484  0004B8  BF81               	btfsc	(??_read_aht20+1)& (0+255),7,b
  1485  0004BA  0EFF               	movlw	255
  1486  0004BC  6F82               	movwf	(??_read_aht20+2)& (0+255),b
  1487  0004BE  6F83               	movwf	(??_read_aht20+3)& (0+255),b
  1488  0004C0  EE20 F003          	lfsr	2,3
  1489  0004C4  503B               	movf	read_aht20@ptr,w,c
  1490  0004C6  26D9               	addwf	fsr2l,f,c
  1491  0004C8  503C               	movf	read_aht20@ptr+1,w,c
  1492  0004CA  22DA               	addwfc	fsr2h,f,c
  1493  0004CC  CFDE F021          	movff	postinc2,___lmul@multiplier
  1494  0004D0  CFDD F022          	movff	postdec2,___lmul@multiplier+1
  1495  0004D4  0E00               	movlw	0
  1496  0004D6  BE22               	btfsc	___lmul@multiplier+1,7,c
  1497  0004D8  0EFF               	movlw	-1
  1498  0004DA  6E23               	movwf	___lmul@multiplier+2,c
  1499  0004DC  6E24               	movwf	___lmul@multiplier+3,c
  1500  0004DE  C08A  F025         	movff	read_aht20@B,___lmul@multiplicand
  1501  0004E2  C08B  F026         	movff	read_aht20@B+1,___lmul@multiplicand+1
  1502  0004E6  C08C  F027         	movff	read_aht20@B+2,___lmul@multiplicand+2
  1503  0004EA  C08D  F028         	movff	read_aht20@B+3,___lmul@multiplicand+3
  1504  0004EE  EC85  F006         	call	___lmul	;wreg free
  1505  0004F2  C021  F02D         	movff	?___lmul,___aldiv@dividend
  1506  0004F6  C022  F02E         	movff	?___lmul+1,___aldiv@dividend+1
  1507  0004FA  C023  F02F         	movff	?___lmul+2,___aldiv@dividend+2
  1508  0004FE  C024  F030         	movff	?___lmul+3,___aldiv@dividend+3
  1509  000502  EE20 F003          	lfsr	2,3
  1510  000506  503B               	movf	read_aht20@ptr,w,c
  1511  000508  26D9               	addwf	fsr2l,f,c
  1512  00050A  503C               	movf	read_aht20@ptr+1,w,c
  1513  00050C  22DA               	addwfc	fsr2h,f,c
  1514  00050E  CFDE F084          	movff	postinc2,??_read_aht20+4
  1515  000512  CFDD F085          	movff	postdec2,??_read_aht20+5
  1516  000516  C084  F086         	movff	??_read_aht20+4,??_read_aht20+6
  1517  00051A  C085  F087         	movff	??_read_aht20+5,??_read_aht20+7
  1518  00051E  0E00               	movlw	0
  1519  000520  0100               	movlb	0	; () banked
  1520  000522  BF87               	btfsc	(??_read_aht20+7)& (0+255),7,b
  1521  000524  0EFF               	movlw	255
  1522  000526  6F88               	movwf	(??_read_aht20+8)& (0+255),b
  1523  000528  6F89               	movwf	(??_read_aht20+9)& (0+255),b
  1524  00052A  518E               	movf	read_aht20@C& (0+255),w,b
  1525  00052C  2586               	addwf	(??_read_aht20+6)& (0+255),w,b
  1526  00052E  6E31               	movwf	___aldiv@divisor,c
  1527  000530  518F               	movf	(read_aht20@C+1)& (0+255),w,b
  1528  000532  2187               	addwfc	(??_read_aht20+7)& (0+255),w,b
  1529  000534  6E32               	movwf	___aldiv@divisor+1,c
  1530  000536  5190               	movf	(read_aht20@C+2)& (0+255),w,b
  1531  000538  2188               	addwfc	(??_read_aht20+8)& (0+255),w,b
  1532  00053A  6E33               	movwf	___aldiv@divisor+2,c
  1533  00053C  5191               	movf	(read_aht20@C+3)& (0+255),w,b
  1534  00053E  2189               	addwfc	(??_read_aht20+9)& (0+255),w,b
  1535  000540  6E34               	movwf	___aldiv@divisor+3,c
  1536  000542  EC86  F004         	call	___aldiv	;wreg free
  1537  000546  502D               	movf	?___aldiv,w,c
  1538  000548  0100               	movlb	0	; () banked
  1539  00054A  2580               	addwf	??_read_aht20& (0+255),w,b
  1540  00054C  6F92               	movwf	read_aht20@y& (0+255),b
  1541  00054E  502E               	movf	?___aldiv+1,w,c
  1542  000550  2181               	addwfc	(??_read_aht20+1)& (0+255),w,b
  1543  000552  6F93               	movwf	(read_aht20@y+1)& (0+255),b
  1544  000554  502F               	movf	?___aldiv+2,w,c
  1545  000556  2182               	addwfc	(??_read_aht20+2)& (0+255),w,b
  1546  000558  6F94               	movwf	(read_aht20@y+2)& (0+255),b
  1547  00055A  5030               	movf	?___aldiv+3,w,c
  1548  00055C  2183               	addwfc	(??_read_aht20+3)& (0+255),w,b
  1549  00055E  6F95               	movwf	(read_aht20@y+3)& (0+255),b
  1550                           
  1551                           ; BSR set to: 0
  1552                           ;drier.c: 557: ptr->dp = C * y / (B - y);
  1553  000560  C08E  F021         	movff	read_aht20@C,___lmul@multiplier
  1554  000564  C08F  F022         	movff	read_aht20@C+1,___lmul@multiplier+1
  1555  000568  C090  F023         	movff	read_aht20@C+2,___lmul@multiplier+2
  1556  00056C  C091  F024         	movff	read_aht20@C+3,___lmul@multiplier+3
  1557  000570  C092  F025         	movff	read_aht20@y,___lmul@multiplicand
  1558  000574  C093  F026         	movff	read_aht20@y+1,___lmul@multiplicand+1
  1559  000578  C094  F027         	movff	read_aht20@y+2,___lmul@multiplicand+2
  1560  00057C  C095  F028         	movff	read_aht20@y+3,___lmul@multiplicand+3
  1561  000580  EC85  F006         	call	___lmul	;wreg free
  1562  000584  C021  F02D         	movff	?___lmul,___aldiv@dividend
  1563  000588  C022  F02E         	movff	?___lmul+1,___aldiv@dividend+1
  1564  00058C  C023  F02F         	movff	?___lmul+2,___aldiv@dividend+2
  1565  000590  C024  F030         	movff	?___lmul+3,___aldiv@dividend+3
  1566  000594  C092  F080         	movff	read_aht20@y,??_read_aht20
  1567  000598  C093  F081         	movff	read_aht20@y+1,??_read_aht20+1
  1568  00059C  C094  F082         	movff	read_aht20@y+2,??_read_aht20+2
  1569  0005A0  C095  F083         	movff	read_aht20@y+3,??_read_aht20+3
  1570  0005A4  0100               	movlb	0	; () banked
  1571  0005A6  1F80               	comf	??_read_aht20& (0+255),f,b
  1572  0005A8  1F81               	comf	(??_read_aht20+1)& (0+255),f,b
  1573  0005AA  1F82               	comf	(??_read_aht20+2)& (0+255),f,b
  1574  0005AC  1F83               	comf	(??_read_aht20+3)& (0+255),f,b
  1575  0005AE  2B80               	incf	??_read_aht20& (0+255),f,b
  1576  0005B0  0E00               	movlw	0
  1577  0005B2  2381               	addwfc	(??_read_aht20+1)& (0+255),f,b
  1578  0005B4  2382               	addwfc	(??_read_aht20+2)& (0+255),f,b
  1579  0005B6  2383               	addwfc	(??_read_aht20+3)& (0+255),f,b
  1580  0005B8  518A               	movf	read_aht20@B& (0+255),w,b
  1581  0005BA  2580               	addwf	??_read_aht20& (0+255),w,b
  1582  0005BC  6E31               	movwf	___aldiv@divisor,c
  1583  0005BE  518B               	movf	(read_aht20@B+1)& (0+255),w,b
  1584  0005C0  2181               	addwfc	(??_read_aht20+1)& (0+255),w,b
  1585  0005C2  6E32               	movwf	___aldiv@divisor+1,c
  1586  0005C4  518C               	movf	(read_aht20@B+2)& (0+255),w,b
  1587  0005C6  2182               	addwfc	(??_read_aht20+2)& (0+255),w,b
  1588  0005C8  6E33               	movwf	___aldiv@divisor+2,c
  1589  0005CA  518D               	movf	(read_aht20@B+3)& (0+255),w,b
  1590  0005CC  2183               	addwfc	(??_read_aht20+3)& (0+255),w,b
  1591  0005CE  6E34               	movwf	___aldiv@divisor+3,c
  1592  0005D0  EC86  F004         	call	___aldiv	;wreg free
  1593  0005D4  EE20 F005          	lfsr	2,5
  1594  0005D8  503B               	movf	read_aht20@ptr,w,c
  1595  0005DA  26D9               	addwf	fsr2l,f,c
  1596  0005DC  503C               	movf	read_aht20@ptr+1,w,c
  1597  0005DE  22DA               	addwfc	fsr2h,f,c
  1598  0005E0  C02D  FFDE         	movff	?___aldiv,postinc2
  1599  0005E4  C02E  FFDD         	movff	?___aldiv+1,postdec2
  1600  0005E8  0012               	return		;funcret
  1601  0005EA                     __end_of_read_aht20:
  1602                           	opt stack 0
  1603                           tblptru	equ	0xFF8
  1604                           tblptrh	equ	0xFF7
  1605                           intcon	equ	0xFF2
  1606                           postinc0	equ	0xFEE
  1607                           wreg	equ	0xFE8
  1608                           indf2	equ	0xFDF
  1609                           postinc2	equ	0xFDE
  1610                           postdec2	equ	0xFDD
  1611                           fsr2h	equ	0xFDA
  1612                           fsr2l	equ	0xFD9
  1613                           status	equ	0xFD8
  1614                           
  1615 ;; *************** function _log_lookup *****************
  1616 ;; Defined at:
  1617 ;;		line 501 in file "drier.c"
  1618 ;; Parameters:    Size  Location     Type
  1619 ;;  x               1    wreg     unsigned char 
  1620 ;; Auto vars:     Size  Location     Type
  1621 ;;  x               1   36[COMRAM] unsigned char 
  1622 ;;  y               2   37[COMRAM] int 
  1623 ;; Return value:  Size  Location     Type
  1624 ;;                  2   32[COMRAM] int 
  1625 ;; Registers used:
  1626 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  1627 ;; Tracked objects:
  1628 ;;		On entry : 0/0
  1629 ;;		On exit  : 0/0
  1630 ;;		Unchanged: 0/0
  1631 ;; Data sizes:     COMRAM   BANK0
  1632 ;;      Params:         2       0
  1633 ;;      Locals:         3       0
  1634 ;;      Temps:          2       0
  1635 ;;      Totals:         7       0
  1636 ;;Total ram usage:        7 bytes
  1637 ;; Hardware stack levels used:    1
  1638 ;; Hardware stack levels required when called:    2
  1639 ;; This function calls:
  1640 ;;		Nothing
  1641 ;; This function is called by:
  1642 ;;		_read_aht20
  1643 ;; This function uses a non-reentrant model
  1644 ;;
  1645                           
  1646                           	psect	text2
  1647  000BAA                     __ptext2:
  1648                           	opt stack 0
  1649  000BAA                     _log_lookup:
  1650                           	opt stack 27
  1651                           
  1652                           ;incstack = 0
  1653                           ;log_lookup@x stored from wreg
  1654  000BAA  6E25               	movwf	log_lookup@x,c
  1655                           
  1656                           ;drier.c: 503: int16_t y = -log_table[x];
  1657  000BAC  5025               	movf	log_lookup@x,w,c
  1658  000BAE  0D01               	mullw	1
  1659  000BB0  0E01               	movlw	low _log_table
  1660  000BB2  24F3               	addwf	prodl,w,c
  1661  000BB4  6EF6               	movwf	tblptrl,c
  1662  000BB6  0E02               	movlw	high _log_table
  1663  000BB8  20F4               	addwfc	prodh,w,c
  1664  000BBA  6EF7               	movwf	tblptrh,c
  1665  000BBC                     	if	0	;There are less than 3 active tblptr bytes
  1666  000BBC                     	endif
  1667  000BBC  0008               	tblrd		*
  1668  000BBE  50F5               	movf	tablat,w,c
  1669  000BC0  6E23               	movwf	??_log_lookup& (0+255),c
  1670  000BC2  6A24               	clrf	(??_log_lookup+1)& (0+255),c
  1671  000BC4  1E23               	comf	??_log_lookup,f,c
  1672  000BC6  1E24               	comf	??_log_lookup+1,f,c
  1673  000BC8  4A23               	infsnz	??_log_lookup,f,c
  1674  000BCA  2A24               	incf	??_log_lookup+1,f,c
  1675  000BCC  C023  F026         	movff	??_log_lookup,log_lookup@y
  1676  000BD0  C024  F027         	movff	??_log_lookup+1,log_lookup@y+1
  1677                           
  1678                           ;drier.c: 504: if(x <= 1)
  1679  000BD4  0E02               	movlw	2
  1680  000BD6  6025               	cpfslt	log_lookup@x,c
  1681  000BD8  D008               	goto	l182
  1682                           
  1683                           ;drier.c: 505: {
  1684                           ;drier.c: 506: return y << 3;
  1685  000BDA  C026  F023         	movff	log_lookup@y,??_log_lookup
  1686  000BDE  C027  F024         	movff	log_lookup@y+1,??_log_lookup+1
  1687  000BE2  90D8               	bcf	status,0,c
  1688  000BE4  3623               	rlcf	??_log_lookup,f,c
  1689  000BE6  3624               	rlcf	??_log_lookup+1,f,c
  1690  000BE8  D007               	goto	L1
  1691  000BEA                     l182:
  1692                           
  1693                           ;drier.c: 508: else
  1694                           ;drier.c: 509: if(x <= 13)
  1695  000BEA  0E0E               	movlw	14
  1696  000BEC  6025               	cpfslt	log_lookup@x,c
  1697  000BEE  D00F               	goto	l185
  1698                           
  1699                           ;drier.c: 510: {
  1700                           ;drier.c: 511: return y << 2;
  1701  000BF0  C026  F023         	movff	log_lookup@y,??_log_lookup
  1702  000BF4  C027  F024         	movff	log_lookup@y+1,??_log_lookup+1
  1703  000BF8                     L1:
  1704  000BF8  90D8               	bcf	status,0,c
  1705  000BFA  3623               	rlcf	??_log_lookup,f,c
  1706  000BFC  3624               	rlcf	??_log_lookup+1,f,c
  1707  000BFE  90D8               	bcf	status,0,c
  1708  000C00  3623               	rlcf	??_log_lookup,f,c
  1709  000C02  3624               	rlcf	??_log_lookup+1,f,c
  1710  000C04  C023  F021         	movff	??_log_lookup,?_log_lookup
  1711  000C08  C024  F022         	movff	??_log_lookup+1,?_log_lookup+1
  1712  000C0C  0012               	return	
  1713  000C0E                     l185:
  1714                           
  1715                           ;drier.c: 513: else
  1716                           ;drier.c: 514: if(x <= 36)
  1717  000C0E  0E25               	movlw	37
  1718  000C10  6025               	cpfslt	log_lookup@x,c
  1719  000C12  D006               	goto	l187
  1720                           
  1721                           ;drier.c: 515: {
  1722                           ;drier.c: 516: return y << 1;
  1723  000C14  90D8               	bcf	status,0,c
  1724  000C16  3426               	rlcf	log_lookup@y,w,c
  1725  000C18  6E21               	movwf	?_log_lookup,c
  1726  000C1A  3427               	rlcf	log_lookup@y+1,w,c
  1727  000C1C  6E22               	movwf	?_log_lookup+1,c
  1728  000C1E  0012               	return	
  1729  000C20                     l187:
  1730                           
  1731                           ;drier.c: 517: }
  1732                           ;drier.c: 518: return y;
  1733  000C20  C026  F021         	movff	log_lookup@y,?_log_lookup
  1734  000C24  C027  F022         	movff	log_lookup@y+1,?_log_lookup+1
  1735  000C28  0012               	return		;funcret
  1736  000C2A                     __end_of_log_lookup:
  1737                           	opt stack 0
  1738                           tblptru	equ	0xFF8
  1739                           tblptrh	equ	0xFF7
  1740                           tblptrl	equ	0xFF6
  1741                           tablat	equ	0xFF5
  1742                           prodh	equ	0xFF4
  1743                           prodl	equ	0xFF3
  1744                           intcon	equ	0xFF2
  1745                           postinc0	equ	0xFEE
  1746                           wreg	equ	0xFE8
  1747                           indf2	equ	0xFDF
  1748                           postinc2	equ	0xFDE
  1749                           postdec2	equ	0xFDD
  1750                           fsr2h	equ	0xFDA
  1751                           fsr2l	equ	0xFD9
  1752                           status	equ	0xFD8
  1753                           
  1754 ;; *************** function ___lmul *****************
  1755 ;; Defined at:
  1756 ;;		line 15 in file "/opt/microchip/xc8/v1.45/sources/common/Umul32.c"
  1757 ;; Parameters:    Size  Location     Type
  1758 ;;  multiplier      4   32[COMRAM] unsigned long 
  1759 ;;  multiplicand    4   36[COMRAM] unsigned long 
  1760 ;; Auto vars:     Size  Location     Type
  1761 ;;  product         4   40[COMRAM] unsigned long 
  1762 ;; Return value:  Size  Location     Type
  1763 ;;                  4   32[COMRAM] unsigned long 
  1764 ;; Registers used:
  1765 ;;		wreg, status,2, status,0
  1766 ;; Tracked objects:
  1767 ;;		On entry : 0/0
  1768 ;;		On exit  : 0/0
  1769 ;;		Unchanged: 0/0
  1770 ;; Data sizes:     COMRAM   BANK0
  1771 ;;      Params:         8       0
  1772 ;;      Locals:         4       0
  1773 ;;      Temps:          0       0
  1774 ;;      Totals:        12       0
  1775 ;;Total ram usage:       12 bytes
  1776 ;; Hardware stack levels used:    1
  1777 ;; Hardware stack levels required when called:    2
  1778 ;; This function calls:
  1779 ;;		Nothing
  1780 ;; This function is called by:
  1781 ;;		_read_aht20
  1782 ;; This function uses a non-reentrant model
  1783 ;;
  1784                           
  1785                           	psect	text3
  1786  000D0A                     __ptext3:
  1787                           	opt stack 0
  1788  000D0A                     ___lmul:
  1789                           	opt stack 27
  1790                           
  1791                           ;incstack = 0
  1792  000D0A  0E00               	movlw	0
  1793  000D0C  6E29               	movwf	___lmul@product,c
  1794  000D0E  0E00               	movlw	0
  1795  000D10  6E2A               	movwf	___lmul@product+1,c
  1796  000D12  0E00               	movlw	0
  1797  000D14  6E2B               	movwf	___lmul@product+2,c
  1798  000D16  0E00               	movlw	0
  1799  000D18  6E2C               	movwf	___lmul@product+3,c
  1800  000D1A  A021               	btfss	___lmul@multiplier,0,c
  1801  000D1C  D008               	goto	l259
  1802  000D1E  5025               	movf	___lmul@multiplicand,w,c
  1803  000D20  2629               	addwf	___lmul@product,f,c
  1804  000D22  5026               	movf	___lmul@multiplicand+1,w,c
  1805  000D24  222A               	addwfc	___lmul@product+1,f,c
  1806  000D26  5027               	movf	___lmul@multiplicand+2,w,c
  1807  000D28  222B               	addwfc	___lmul@product+2,f,c
  1808  000D2A  5028               	movf	___lmul@multiplicand+3,w,c
  1809  000D2C  222C               	addwfc	___lmul@product+3,f,c
  1810  000D2E                     l259:
  1811  000D2E  90D8               	bcf	status,0,c
  1812  000D30  3625               	rlcf	___lmul@multiplicand,f,c
  1813  000D32  3626               	rlcf	___lmul@multiplicand+1,f,c
  1814  000D34  3627               	rlcf	___lmul@multiplicand+2,f,c
  1815  000D36  3628               	rlcf	___lmul@multiplicand+3,f,c
  1816  000D38  90D8               	bcf	status,0,c
  1817  000D3A  3224               	rrcf	___lmul@multiplier+3,f,c
  1818  000D3C  3223               	rrcf	___lmul@multiplier+2,f,c
  1819  000D3E  3222               	rrcf	___lmul@multiplier+1,f,c
  1820  000D40  3221               	rrcf	___lmul@multiplier,f,c
  1821  000D42  5021               	movf	___lmul@multiplier,w,c
  1822  000D44  1022               	iorwf	___lmul@multiplier+1,w,c
  1823  000D46  1023               	iorwf	___lmul@multiplier+2,w,c
  1824  000D48  1024               	iorwf	___lmul@multiplier+3,w,c
  1825  000D4A  A4D8               	btfss	status,2,c
  1826  000D4C  D7E6               	goto	l258
  1827  000D4E  C029  F021         	movff	___lmul@product,?___lmul
  1828  000D52  C02A  F022         	movff	___lmul@product+1,?___lmul+1
  1829  000D56  C02B  F023         	movff	___lmul@product+2,?___lmul+2
  1830  000D5A  C02C  F024         	movff	___lmul@product+3,?___lmul+3
  1831  000D5E  0012               	return		;funcret
  1832  000D60                     __end_of___lmul:
  1833                           	opt stack 0
  1834                           tblptru	equ	0xFF8
  1835                           tblptrh	equ	0xFF7
  1836                           tblptrl	equ	0xFF6
  1837                           tablat	equ	0xFF5
  1838                           prodh	equ	0xFF4
  1839                           prodl	equ	0xFF3
  1840                           intcon	equ	0xFF2
  1841                           postinc0	equ	0xFEE
  1842                           wreg	equ	0xFE8
  1843                           indf2	equ	0xFDF
  1844                           postinc2	equ	0xFDE
  1845                           postdec2	equ	0xFDD
  1846                           fsr2h	equ	0xFDA
  1847                           fsr2l	equ	0xFD9
  1848                           status	equ	0xFD8
  1849                           
  1850 ;; *************** function ___aldiv *****************
  1851 ;; Defined at:
  1852 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/aldiv.c"
  1853 ;; Parameters:    Size  Location     Type
  1854 ;;  dividend        4   44[COMRAM] long 
  1855 ;;  divisor         4   48[COMRAM] long 
  1856 ;; Auto vars:     Size  Location     Type
  1857 ;;  quotient        4   54[COMRAM] long 
  1858 ;;  sign            1   53[COMRAM] unsigned char 
  1859 ;;  counter         1   52[COMRAM] unsigned char 
  1860 ;; Return value:  Size  Location     Type
  1861 ;;                  4   44[COMRAM] long 
  1862 ;; Registers used:
  1863 ;;		wreg, status,2, status,0
  1864 ;; Tracked objects:
  1865 ;;		On entry : 0/0
  1866 ;;		On exit  : 0/0
  1867 ;;		Unchanged: 0/0
  1868 ;; Data sizes:     COMRAM   BANK0
  1869 ;;      Params:         8       0
  1870 ;;      Locals:         6       0
  1871 ;;      Temps:          0       0
  1872 ;;      Totals:        14       0
  1873 ;;Total ram usage:       14 bytes
  1874 ;; Hardware stack levels used:    1
  1875 ;; Hardware stack levels required when called:    2
  1876 ;; This function calls:
  1877 ;;		Nothing
  1878 ;; This function is called by:
  1879 ;;		_read_aht20
  1880 ;; This function uses a non-reentrant model
  1881 ;;
  1882                           
  1883                           	psect	text4
  1884  00090C                     __ptext4:
  1885                           	opt stack 0
  1886  00090C                     ___aldiv:
  1887                           	opt stack 27
  1888                           
  1889                           ;incstack = 0
  1890  00090C  0E00               	movlw	0
  1891  00090E  6E36               	movwf	___aldiv@sign,c
  1892  000910  AE34               	btfss	___aldiv@divisor+3,7,c
  1893  000912  D00A               	goto	l302
  1894  000914  1E34               	comf	___aldiv@divisor+3,f,c
  1895  000916  1E33               	comf	___aldiv@divisor+2,f,c
  1896  000918  1E32               	comf	___aldiv@divisor+1,f,c
  1897  00091A  6C31               	negf	___aldiv@divisor,c
  1898  00091C  0E00               	movlw	0
  1899  00091E  2232               	addwfc	___aldiv@divisor+1,f,c
  1900  000920  2233               	addwfc	___aldiv@divisor+2,f,c
  1901  000922  2234               	addwfc	___aldiv@divisor+3,f,c
  1902  000924  0E01               	movlw	1
  1903  000926  6E36               	movwf	___aldiv@sign,c
  1904  000928                     l302:
  1905  000928  AE30               	btfss	___aldiv@dividend+3,7,c
  1906  00092A  D00A               	goto	l303
  1907  00092C  1E30               	comf	___aldiv@dividend+3,f,c
  1908  00092E  1E2F               	comf	___aldiv@dividend+2,f,c
  1909  000930  1E2E               	comf	___aldiv@dividend+1,f,c
  1910  000932  6C2D               	negf	___aldiv@dividend,c
  1911  000934  0E00               	movlw	0
  1912  000936  222E               	addwfc	___aldiv@dividend+1,f,c
  1913  000938  222F               	addwfc	___aldiv@dividend+2,f,c
  1914  00093A  2230               	addwfc	___aldiv@dividend+3,f,c
  1915  00093C  0E01               	movlw	1
  1916  00093E  1A36               	xorwf	___aldiv@sign,f,c
  1917  000940                     l303:
  1918  000940  0E00               	movlw	0
  1919  000942  6E37               	movwf	___aldiv@quotient,c
  1920  000944  0E00               	movlw	0
  1921  000946  6E38               	movwf	___aldiv@quotient+1,c
  1922  000948  0E00               	movlw	0
  1923  00094A  6E39               	movwf	___aldiv@quotient+2,c
  1924  00094C  0E00               	movlw	0
  1925  00094E  6E3A               	movwf	___aldiv@quotient+3,c
  1926  000950  5031               	movf	___aldiv@divisor,w,c
  1927  000952  1032               	iorwf	___aldiv@divisor+1,w,c
  1928  000954  1033               	iorwf	___aldiv@divisor+2,w,c
  1929  000956  1034               	iorwf	___aldiv@divisor+3,w,c
  1930  000958  B4D8               	btfsc	status,2,c
  1931  00095A  D02A               	goto	l310
  1932  00095C  0E01               	movlw	1
  1933  00095E  6E35               	movwf	___aldiv@counter,c
  1934  000960  D006               	goto	l305
  1935  000962  90D8               	bcf	status,0,c
  1936  000964  3631               	rlcf	___aldiv@divisor,f,c
  1937  000966  3632               	rlcf	___aldiv@divisor+1,f,c
  1938  000968  3633               	rlcf	___aldiv@divisor+2,f,c
  1939  00096A  3634               	rlcf	___aldiv@divisor+3,f,c
  1940  00096C  2A35               	incf	___aldiv@counter,f,c
  1941  00096E                     l305:
  1942  00096E  AE34               	btfss	___aldiv@divisor+3,7,c
  1943  000970  D7F8               	goto	l306
  1944  000972                     u2150:
  1945  000972  90D8               	bcf	status,0,c
  1946  000974  3637               	rlcf	___aldiv@quotient,f,c
  1947  000976  3638               	rlcf	___aldiv@quotient+1,f,c
  1948  000978  3639               	rlcf	___aldiv@quotient+2,f,c
  1949  00097A  363A               	rlcf	___aldiv@quotient+3,f,c
  1950  00097C  5031               	movf	___aldiv@divisor,w,c
  1951  00097E  5C2D               	subwf	___aldiv@dividend,w,c
  1952  000980  5032               	movf	___aldiv@divisor+1,w,c
  1953  000982  582E               	subwfb	___aldiv@dividend+1,w,c
  1954  000984  5033               	movf	___aldiv@divisor+2,w,c
  1955  000986  582F               	subwfb	___aldiv@dividend+2,w,c
  1956  000988  5034               	movf	___aldiv@divisor+3,w,c
  1957  00098A  5830               	subwfb	___aldiv@dividend+3,w,c
  1958  00098C  A0D8               	btfss	status,0,c
  1959  00098E  D009               	goto	l309
  1960  000990  5031               	movf	___aldiv@divisor,w,c
  1961  000992  5E2D               	subwf	___aldiv@dividend,f,c
  1962  000994  5032               	movf	___aldiv@divisor+1,w,c
  1963  000996  5A2E               	subwfb	___aldiv@dividend+1,f,c
  1964  000998  5033               	movf	___aldiv@divisor+2,w,c
  1965  00099A  5A2F               	subwfb	___aldiv@dividend+2,f,c
  1966  00099C  5034               	movf	___aldiv@divisor+3,w,c
  1967  00099E  5A30               	subwfb	___aldiv@dividend+3,f,c
  1968  0009A0  8037               	bsf	___aldiv@quotient,0,c
  1969  0009A2                     l309:
  1970  0009A2  90D8               	bcf	status,0,c
  1971  0009A4  3234               	rrcf	___aldiv@divisor+3,f,c
  1972  0009A6  3233               	rrcf	___aldiv@divisor+2,f,c
  1973  0009A8  3232               	rrcf	___aldiv@divisor+1,f,c
  1974  0009AA  3231               	rrcf	___aldiv@divisor,f,c
  1975  0009AC  2E35               	decfsz	___aldiv@counter,f,c
  1976  0009AE  D7E1               	goto	u2150
  1977  0009B0                     l310:
  1978  0009B0  5036               	movf	___aldiv@sign,w,c
  1979  0009B2  B4D8               	btfsc	status,2,c
  1980  0009B4  D008               	goto	l311
  1981  0009B6  1E3A               	comf	___aldiv@quotient+3,f,c
  1982  0009B8  1E39               	comf	___aldiv@quotient+2,f,c
  1983  0009BA  1E38               	comf	___aldiv@quotient+1,f,c
  1984  0009BC  6C37               	negf	___aldiv@quotient,c
  1985  0009BE  0E00               	movlw	0
  1986  0009C0  2238               	addwfc	___aldiv@quotient+1,f,c
  1987  0009C2  2239               	addwfc	___aldiv@quotient+2,f,c
  1988  0009C4  223A               	addwfc	___aldiv@quotient+3,f,c
  1989  0009C6                     l311:
  1990  0009C6  C037  F02D         	movff	___aldiv@quotient,?___aldiv
  1991  0009CA  C038  F02E         	movff	___aldiv@quotient+1,?___aldiv+1
  1992  0009CE  C039  F02F         	movff	___aldiv@quotient+2,?___aldiv+2
  1993  0009D2  C03A  F030         	movff	___aldiv@quotient+3,?___aldiv+3
  1994  0009D6  0012               	return	
  1995  0009D8                     __end_of___aldiv:
  1996                           	opt stack 0
  1997                           tblptru	equ	0xFF8
  1998                           tblptrh	equ	0xFF7
  1999                           tblptrl	equ	0xFF6
  2000                           tablat	equ	0xFF5
  2001                           prodh	equ	0xFF4
  2002                           prodl	equ	0xFF3
  2003                           intcon	equ	0xFF2
  2004                           postinc0	equ	0xFEE
  2005                           wreg	equ	0xFE8
  2006                           indf2	equ	0xFDF
  2007                           postinc2	equ	0xFDE
  2008                           postdec2	equ	0xFDD
  2009                           fsr2h	equ	0xFDA
  2010                           fsr2l	equ	0xFD9
  2011                           status	equ	0xFD8
  2012                           
  2013 ;; *************** function _print_sensor *****************
  2014 ;; Defined at:
  2015 ;;		line 579 in file "drier.c"
  2016 ;; Parameters:    Size  Location     Type
  2017 ;;  ptr             2   53[COMRAM] PTR struct .
  2018 ;;		 -> inside(7), outside(7), 
  2019 ;; Auto vars:     Size  Location     Type
  2020 ;;		None
  2021 ;; Return value:  Size  Location     Type
  2022 ;;                  1    wreg      void 
  2023 ;; Registers used:
  2024 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2025 ;; Tracked objects:
  2026 ;;		On entry : 0/0
  2027 ;;		On exit  : 0/0
  2028 ;;		Unchanged: 0/0
  2029 ;; Data sizes:     COMRAM   BANK0
  2030 ;;      Params:         2       0
  2031 ;;      Locals:         0       0
  2032 ;;      Temps:          0       0
  2033 ;;      Totals:         2       0
  2034 ;;Total ram usage:        2 bytes
  2035 ;; Hardware stack levels used:    1
  2036 ;; Hardware stack levels required when called:    4
  2037 ;; This function calls:
  2038 ;;		_print_fixed
  2039 ;;		_print_text
  2040 ;; This function is called by:
  2041 ;;		_main
  2042 ;; This function uses a non-reentrant model
  2043 ;;
  2044                           
  2045                           	psect	text5
  2046  000C9C                     __ptext5:
  2047                           	opt stack 0
  2048  000C9C                     _print_sensor:
  2049                           	opt stack 26
  2050                           
  2051                           ;drier.c: 581: print_fixed(ptr->t);
  2052                           
  2053                           ;incstack = 0
  2054  000C9C  EE20 F003          	lfsr	2,3
  2055  000CA0  5036               	movf	print_sensor@ptr,w,c
  2056  000CA2  26D9               	addwf	fsr2l,f,c
  2057  000CA4  5037               	movf	print_sensor@ptr+1,w,c
  2058  000CA6  22DA               	addwfc	fsr2h,f,c
  2059  000CA8  CFDE F029          	movff	postinc2,print_fixed@x
  2060  000CAC  CFDD F02A          	movff	postdec2,print_fixed@x+1
  2061  000CB0  ECED  F003         	call	_print_fixed	;wreg free
  2062                           
  2063                           ;drier.c: 582: print_text("\xb0 ");
  2064  000CB4  0EDA               	movlw	low STR_1
  2065  000CB6  6E22               	movwf	print_text@text,c
  2066  000CB8  0E02               	movlw	high STR_1
  2067  000CBA  6E23               	movwf	print_text@text+1,c
  2068  000CBC  EC3E  F007         	call	_print_text	;wreg free
  2069                           
  2070                           ;drier.c: 583: print_fixed(ptr->h);
  2071  000CC0  EE20 F001          	lfsr	2,1
  2072  000CC4  5036               	movf	print_sensor@ptr,w,c
  2073  000CC6  26D9               	addwf	fsr2l,f,c
  2074  000CC8  5037               	movf	print_sensor@ptr+1,w,c
  2075  000CCA  22DA               	addwfc	fsr2h,f,c
  2076  000CCC  CFDE F029          	movff	postinc2,print_fixed@x
  2077  000CD0  CFDD F02A          	movff	postdec2,print_fixed@x+1
  2078  000CD4  ECED  F003         	call	_print_fixed	;wreg free
  2079                           
  2080                           ;drier.c: 584: print_text("% ");
  2081  000CD8  0EDD               	movlw	low STR_2
  2082  000CDA  6E22               	movwf	print_text@text,c
  2083  000CDC  0E02               	movlw	high STR_2
  2084  000CDE  6E23               	movwf	print_text@text+1,c
  2085  000CE0  EC3E  F007         	call	_print_text	;wreg free
  2086                           
  2087                           ;drier.c: 585: print_fixed(ptr->dp);
  2088  000CE4  EE20 F005          	lfsr	2,5
  2089  000CE8  5036               	movf	print_sensor@ptr,w,c
  2090  000CEA  26D9               	addwf	fsr2l,f,c
  2091  000CEC  5037               	movf	print_sensor@ptr+1,w,c
  2092  000CEE  22DA               	addwfc	fsr2h,f,c
  2093  000CF0  CFDE F029          	movff	postinc2,print_fixed@x
  2094  000CF4  CFDD F02A          	movff	postdec2,print_fixed@x+1
  2095  000CF8  ECED  F003         	call	_print_fixed	;wreg free
  2096                           
  2097                           ;drier.c: 586: print_text("\xb0 ");
  2098  000CFC  0EDA               	movlw	low STR_1
  2099  000CFE  6E22               	movwf	print_text@text,c
  2100  000D00  0E02               	movlw	high STR_1
  2101  000D02  6E23               	movwf	print_text@text+1,c
  2102  000D04  EC3E  F007         	call	_print_text	;wreg free
  2103  000D08  0012               	return		;funcret
  2104  000D0A                     __end_of_print_sensor:
  2105                           	opt stack 0
  2106                           tblptru	equ	0xFF8
  2107                           tblptrh	equ	0xFF7
  2108                           tblptrl	equ	0xFF6
  2109                           tablat	equ	0xFF5
  2110                           prodh	equ	0xFF4
  2111                           prodl	equ	0xFF3
  2112                           intcon	equ	0xFF2
  2113                           postinc0	equ	0xFEE
  2114                           wreg	equ	0xFE8
  2115                           indf2	equ	0xFDF
  2116                           postinc2	equ	0xFDE
  2117                           postdec2	equ	0xFDD
  2118                           fsr2h	equ	0xFDA
  2119                           fsr2l	equ	0xFD9
  2120                           status	equ	0xFD8
  2121                           
  2122 ;; *************** function _print_text *****************
  2123 ;; Defined at:
  2124 ;;		line 203 in file "drier.c"
  2125 ;; Parameters:    Size  Location     Type
  2126 ;;  text            2   33[COMRAM] PTR const unsigned char 
  2127 ;;		 -> STR_10(22), STR_9(23), STR_8(4), STR_7(4), 
  2128 ;;		 -> STR_6(11), STR_5(22), STR_4(31), STR_3(3), 
  2129 ;;		 -> STR_2(3), STR_1(3), 
  2130 ;; Auto vars:     Size  Location     Type
  2131 ;;  ptr             2   35[COMRAM] PTR const unsigned char 
  2132 ;;		 -> STR_10(22), STR_9(23), STR_8(4), STR_7(4), 
  2133 ;;		 -> STR_6(11), STR_5(22), STR_4(31), STR_3(3), 
  2134 ;;		 -> STR_2(3), STR_1(3), 
  2135 ;; Return value:  Size  Location     Type
  2136 ;;                  1    wreg      void 
  2137 ;; Registers used:
  2138 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2139 ;; Tracked objects:
  2140 ;;		On entry : 0/0
  2141 ;;		On exit  : 0/0
  2142 ;;		Unchanged: 0/0
  2143 ;; Data sizes:     COMRAM   BANK0
  2144 ;;      Params:         2       0
  2145 ;;      Locals:         2       0
  2146 ;;      Temps:          0       0
  2147 ;;      Totals:         4       0
  2148 ;;Total ram usage:        4 bytes
  2149 ;; Hardware stack levels used:    1
  2150 ;; Hardware stack levels required when called:    3
  2151 ;; This function calls:
  2152 ;;		_send_uart
  2153 ;; This function is called by:
  2154 ;;		_print_sensor
  2155 ;;		_main
  2156 ;; This function uses a non-reentrant model
  2157 ;;
  2158                           
  2159                           	psect	text6
  2160  000E7C                     __ptext6:
  2161                           	opt stack 0
  2162  000E7C                     _print_text:
  2163                           	opt stack 27
  2164                           
  2165                           ;drier.c: 205: const uint8_t *ptr = text;
  2166                           
  2167                           ;incstack = 0
  2168  000E7C  C022  F024         	movff	print_text@text,print_text@ptr
  2169  000E80  C023  F025         	movff	print_text@text+1,print_text@ptr+1
  2170                           
  2171                           ;drier.c: 206: while(*ptr != 0)
  2172  000E84  D00A               	goto	l77
  2173  000E86                     
  2174                           ;drier.c: 207: {
  2175                           ;drier.c: 208: send_uart(*ptr);
  2176  000E86  C024  FFF6         	movff	print_text@ptr,tblptrl
  2177  000E8A  C025  FFF7         	movff	print_text@ptr+1,tblptrh
  2178  000E8E                     	if	0	;tblptru may be non-zero
  2179  000E8E                     	endif
  2180  000E8E                     	if	0	;tblptru may be non-zero
  2181  000E8E                     	endif
  2182  000E8E  0008               	tblrd		*
  2183  000E90  50F5               	movf	tablat,w,c
  2184  000E92  ECE8  F007         	call	_send_uart
  2185                           
  2186                           ;drier.c: 209: ptr++;
  2187  000E96  4A24               	infsnz	print_text@ptr,f,c
  2188  000E98  2A25               	incf	print_text@ptr+1,f,c
  2189  000E9A                     l77:
  2190  000E9A  C024  FFF6         	movff	print_text@ptr,tblptrl
  2191  000E9E  C025  FFF7         	movff	print_text@ptr+1,tblptrh
  2192  000EA2                     	if	0	;tblptru may be non-zero
  2193  000EA2                     	endif
  2194  000EA2                     	if	0	;tblptru may be non-zero
  2195  000EA2                     	endif
  2196  000EA2  0008               	tblrd		*
  2197  000EA4  50F5               	movf	tablat,w,c
  2198  000EA6  0900               	iorlw	0
  2199  000EA8  B4D8               	btfsc	status,2,c
  2200  000EAA  0012               	return	
  2201  000EAC  D7EC               	goto	l78
  2202  000EAE                     __end_of_print_text:
  2203                           	opt stack 0
  2204                           tblptru	equ	0xFF8
  2205                           tblptrh	equ	0xFF7
  2206                           tblptrl	equ	0xFF6
  2207                           tablat	equ	0xFF5
  2208                           prodh	equ	0xFF4
  2209                           prodl	equ	0xFF3
  2210                           intcon	equ	0xFF2
  2211                           postinc0	equ	0xFEE
  2212                           wreg	equ	0xFE8
  2213                           indf2	equ	0xFDF
  2214                           postinc2	equ	0xFDE
  2215                           postdec2	equ	0xFDD
  2216                           fsr2h	equ	0xFDA
  2217                           fsr2l	equ	0xFD9
  2218                           status	equ	0xFD8
  2219                           
  2220 ;; *************** function _print_fixed *****************
  2221 ;; Defined at:
  2222 ;;		line 257 in file "drier.c"
  2223 ;; Parameters:    Size  Location     Type
  2224 ;;  x               2   40[COMRAM] int 
  2225 ;; Auto vars:     Size  Location     Type
  2226 ;;  y               1   46[COMRAM] unsigned char 
  2227 ;;  y               2   44[COMRAM] unsigned int 
  2228 ;;  base            2   51[COMRAM] unsigned int 
  2229 ;;  frac            2   49[COMRAM] unsigned int 
  2230 ;;  force           1   48[COMRAM] unsigned char 
  2231 ;;  whole           1   47[COMRAM] unsigned char 
  2232 ;; Return value:  Size  Location     Type
  2233 ;;                  1    wreg      void 
  2234 ;; Registers used:
  2235 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2236 ;; Tracked objects:
  2237 ;;		On entry : 0/0
  2238 ;;		On exit  : 0/0
  2239 ;;		Unchanged: 0/0
  2240 ;; Data sizes:     COMRAM   BANK0
  2241 ;;      Params:         2       0
  2242 ;;      Locals:         9       0
  2243 ;;      Temps:          2       0
  2244 ;;      Totals:        13       0
  2245 ;;Total ram usage:       13 bytes
  2246 ;; Hardware stack levels used:    1
  2247 ;; Hardware stack levels required when called:    3
  2248 ;; This function calls:
  2249 ;;		___awdiv
  2250 ;;		___lwdiv
  2251 ;;		___wmul
  2252 ;;		_send_uart
  2253 ;; This function is called by:
  2254 ;;		_print_sensor
  2255 ;; This function uses a non-reentrant model
  2256 ;;
  2257                           
  2258                           	psect	text7
  2259  0007DA                     __ptext7:
  2260                           	opt stack 0
  2261  0007DA                     _print_fixed:
  2262                           	opt stack 26
  2263                           
  2264                           ;drier.c: 259: if(x < 0)
  2265                           
  2266                           ;incstack = 0
  2267  0007DA  AE2A               	btfss	print_fixed@x+1,7,c
  2268  0007DC  D007               	goto	l96
  2269                           
  2270                           ;drier.c: 260: {
  2271                           ;drier.c: 261: send_uart('-');
  2272  0007DE  0E2D               	movlw	45
  2273  0007E0  ECE8  F007         	call	_send_uart
  2274                           
  2275                           ;drier.c: 262: x = -x;
  2276  0007E4  6C29               	negf	print_fixed@x,c
  2277  0007E6  1E2A               	comf	print_fixed@x+1,f,c
  2278  0007E8  B0D8               	btfsc	status,0,c
  2279  0007EA  2A2A               	incf	print_fixed@x+1,f,c
  2280  0007EC                     l96:
  2281                           
  2282                           ;drier.c: 263: }
  2283                           ;drier.c: 265: uint8_t whole = x / 256;
  2284  0007EC  C029  F021         	movff	print_fixed@x,___awdiv@dividend
  2285  0007F0  C02A  F022         	movff	print_fixed@x+1,___awdiv@dividend+1
  2286  0007F4  0E01               	movlw	1
  2287  0007F6  6E24               	movwf	___awdiv@divisor+1,c
  2288  0007F8  0E00               	movlw	0
  2289  0007FA  6E23               	movwf	___awdiv@divisor,c
  2290  0007FC  EC52  F005         	call	___awdiv	;wreg free
  2291  000800  5021               	movf	?___awdiv,w,c
  2292  000802  6E30               	movwf	print_fixed@whole,c
  2293                           
  2294                           ;drier.c: 266: uint8_t force = 0;
  2295  000804  0E00               	movlw	0
  2296  000806  6E31               	movwf	print_fixed@force,c
  2297                           
  2298                           ;drier.c: 268: uint16_t base = 100;
  2299  000808  0E00               	movlw	0
  2300  00080A  6E35               	movwf	print_fixed@base+1,c
  2301  00080C  0E64               	movlw	100
  2302  00080E  6E34               	movwf	print_fixed@base,c
  2303                           
  2304                           ;drier.c: 269: while(base > 1)
  2305  000810  D02F               	goto	l97
  2306  000812                     l2288:
  2307                           
  2308                           ;drier.c: 270: {
  2309                           ;drier.c: 271: if((whole) >= base || force) { uint8_t y = (whole) / base; send_uart('0' 
      +                          + y); (whole) -= y * base; force = 1; }
  2310  000812  5030               	movf	print_fixed@whole,w,c
  2311  000814  6E2B               	movwf	??_print_fixed& (0+255),c
  2312  000816  6A2C               	clrf	(??_print_fixed+1)& (0+255),c
  2313  000818  5034               	movf	print_fixed@base,w,c
  2314  00081A  5C2B               	subwf	??_print_fixed,w,c
  2315  00081C  5035               	movf	print_fixed@base+1,w,c
  2316  00081E  582C               	subwfb	??_print_fixed+1,w,c
  2317  000820  B0D8               	btfsc	status,0,c
  2318  000822  D003               	goto	u2020
  2319  000824  5031               	movf	print_fixed@force,w,c
  2320  000826  B4D8               	btfsc	status,2,c
  2321  000828  D015               	goto	l99
  2322  00082A                     u2020:
  2323  00082A  C030  F021         	movff	print_fixed@whole,___lwdiv@dividend
  2324  00082E  6A22               	clrf	___lwdiv@dividend+1,c
  2325  000830  C034  F023         	movff	print_fixed@base,___lwdiv@divisor
  2326  000834  C035  F024         	movff	print_fixed@base+1,___lwdiv@divisor+1
  2327  000838  ECB0  F006         	call	___lwdiv	;wreg free
  2328  00083C  5021               	movf	?___lwdiv,w,c
  2329  00083E  6E2F               	movwf	print_fixed@y,c
  2330  000840  502F               	movf	print_fixed@y,w,c
  2331  000842  0F30               	addlw	48
  2332  000844  ECE8  F007         	call	_send_uart
  2333  000848  502F               	movf	print_fixed@y,w,c
  2334  00084A  0234               	mulwf	print_fixed@base,c
  2335  00084C  50F3               	movf	prodl,w,c
  2336  00084E  5E30               	subwf	print_fixed@whole,f,c
  2337  000850  0E01               	movlw	1
  2338  000852  6E31               	movwf	print_fixed@force,c
  2339  000854                     l99:
  2340                           
  2341                           ;drier.c: 272: base /= 10;
  2342  000854  C034  F021         	movff	print_fixed@base,___lwdiv@dividend
  2343  000858  C035  F022         	movff	print_fixed@base+1,___lwdiv@dividend+1
  2344  00085C  0E00               	movlw	0
  2345  00085E  6E24               	movwf	___lwdiv@divisor+1,c
  2346  000860  0E0A               	movlw	10
  2347  000862  6E23               	movwf	___lwdiv@divisor,c
  2348  000864  ECB0  F006         	call	___lwdiv	;wreg free
  2349  000868  C021  F034         	movff	?___lwdiv,print_fixed@base
  2350  00086C  C022  F035         	movff	?___lwdiv+1,print_fixed@base+1
  2351  000870                     l97:
  2352  000870  5035               	movf	print_fixed@base+1,w,c
  2353  000872  E1CF               	bnz	l2288
  2354  000874  0E02               	movlw	2
  2355  000876  5C34               	subwf	print_fixed@base,w,c
  2356  000878  B0D8               	btfsc	status,0,c
  2357  00087A  D7CB               	goto	l98
  2358                           
  2359                           ;drier.c: 273: }
  2360                           ;drier.c: 274: send_uart('0');
  2361  00087C  0E30               	movlw	48
  2362  00087E  ECE8  F007         	call	_send_uart
  2363                           
  2364                           ;drier.c: 275: send_uart('.');
  2365  000882  0E2E               	movlw	46
  2366  000884  ECE8  F007         	call	_send_uart
  2367                           
  2368                           ;drier.c: 278: uint16_t frac = (x & 0xff) * 100 / 256;
  2369  000888  5029               	movf	print_fixed@x,w,c
  2370  00088A  0D64               	mullw	100
  2371  00088C  CFF3 F021          	movff	prodl,___awdiv@dividend
  2372  000890  CFF4 F022          	movff	prodh,___awdiv@dividend+1
  2373  000894  0E01               	movlw	1
  2374  000896  6E24               	movwf	___awdiv@divisor+1,c
  2375  000898  0E00               	movlw	0
  2376  00089A  6E23               	movwf	___awdiv@divisor,c
  2377  00089C  EC52  F005         	call	___awdiv	;wreg free
  2378  0008A0  C021  F032         	movff	?___awdiv,print_fixed@frac
  2379  0008A4  C022  F033         	movff	?___awdiv+1,print_fixed@frac+1
  2380                           
  2381                           ;drier.c: 279: force = 1;
  2382  0008A8  0E01               	movlw	1
  2383  0008AA  6E31               	movwf	print_fixed@force,c
  2384                           
  2385                           ;drier.c: 280: if((frac) >= 10 || force) { uint16_t y = (frac) / 10; send_uart('0' + y);
      +                           (frac) -= y * 10; force = 1; }
  2386  0008AC  5033               	movf	print_fixed@frac+1,w,c
  2387  0008AE  E107               	bnz	l2312
  2388  0008B0  0E0A               	movlw	10
  2389  0008B2  5C32               	subwf	print_fixed@frac,w,c
  2390  0008B4  B0D8               	btfsc	status,0,c
  2391  0008B6  D003               	goto	u2050
  2392  0008B8  5031               	movf	print_fixed@force,w,c
  2393  0008BA  B4D8               	btfsc	status,2,c
  2394  0008BC  D022               	goto	l103
  2395  0008BE                     u2050:
  2396  0008BE                     l2312:
  2397  0008BE  C032  F021         	movff	print_fixed@frac,___lwdiv@dividend
  2398  0008C2  C033  F022         	movff	print_fixed@frac+1,___lwdiv@dividend+1
  2399  0008C6  0E00               	movlw	0
  2400  0008C8  6E24               	movwf	___lwdiv@divisor+1,c
  2401  0008CA  0E0A               	movlw	10
  2402  0008CC  6E23               	movwf	___lwdiv@divisor,c
  2403  0008CE  ECB0  F006         	call	___lwdiv	;wreg free
  2404  0008D2  C021  F02D         	movff	?___lwdiv,print_fixed@y_657
  2405  0008D6  C022  F02E         	movff	?___lwdiv+1,print_fixed@y_657+1
  2406  0008DA  502D               	movf	print_fixed@y_657,w,c
  2407  0008DC  0F30               	addlw	48
  2408  0008DE  ECE8  F007         	call	_send_uart
  2409  0008E2  C02D  F021         	movff	print_fixed@y_657,___wmul@multiplier
  2410  0008E6  C02E  F022         	movff	print_fixed@y_657+1,___wmul@multiplier+1
  2411  0008EA  0E00               	movlw	0
  2412  0008EC  6E24               	movwf	___wmul@multiplicand+1,c
  2413  0008EE  0E0A               	movlw	10
  2414  0008F0  6E23               	movwf	___wmul@multiplicand,c
  2415  0008F2  EC6D  F007         	call	___wmul	;wreg free
  2416  0008F6  5021               	movf	?___wmul,w,c
  2417  0008F8  5E32               	subwf	print_fixed@frac,f,c
  2418  0008FA  5022               	movf	?___wmul+1,w,c
  2419  0008FC  5A33               	subwfb	print_fixed@frac+1,f,c
  2420  0008FE  0E01               	movlw	1
  2421  000900  6E31               	movwf	print_fixed@force,c
  2422  000902                     l103:
  2423                           
  2424                           ;drier.c: 281: send_uart('0' + frac);
  2425  000902  5032               	movf	print_fixed@frac,w,c
  2426  000904  0F30               	addlw	48
  2427  000906  ECE8  F007         	call	_send_uart
  2428  00090A  0012               	return		;funcret
  2429  00090C                     __end_of_print_fixed:
  2430                           	opt stack 0
  2431                           tblptru	equ	0xFF8
  2432                           tblptrh	equ	0xFF7
  2433                           tblptrl	equ	0xFF6
  2434                           tablat	equ	0xFF5
  2435                           prodh	equ	0xFF4
  2436                           prodl	equ	0xFF3
  2437                           intcon	equ	0xFF2
  2438                           postinc0	equ	0xFEE
  2439                           wreg	equ	0xFE8
  2440                           indf2	equ	0xFDF
  2441                           postinc2	equ	0xFDE
  2442                           postdec2	equ	0xFDD
  2443                           fsr2h	equ	0xFDA
  2444                           fsr2l	equ	0xFD9
  2445                           status	equ	0xFD8
  2446                           
  2447 ;; *************** function ___wmul *****************
  2448 ;; Defined at:
  2449 ;;		line 15 in file "/opt/microchip/xc8/v1.45/sources/common/Umul16.c"
  2450 ;; Parameters:    Size  Location     Type
  2451 ;;  multiplier      2   32[COMRAM] unsigned int 
  2452 ;;  multiplicand    2   34[COMRAM] unsigned int 
  2453 ;; Auto vars:     Size  Location     Type
  2454 ;;  product         2   36[COMRAM] unsigned int 
  2455 ;; Return value:  Size  Location     Type
  2456 ;;                  2   32[COMRAM] unsigned int 
  2457 ;; Registers used:
  2458 ;;		wreg, status,2, status,0, prodl, prodh
  2459 ;; Tracked objects:
  2460 ;;		On entry : 0/0
  2461 ;;		On exit  : 0/0
  2462 ;;		Unchanged: 0/0
  2463 ;; Data sizes:     COMRAM   BANK0
  2464 ;;      Params:         4       0
  2465 ;;      Locals:         2       0
  2466 ;;      Temps:          0       0
  2467 ;;      Totals:         6       0
  2468 ;;Total ram usage:        6 bytes
  2469 ;; Hardware stack levels used:    1
  2470 ;; Hardware stack levels required when called:    2
  2471 ;; This function calls:
  2472 ;;		Nothing
  2473 ;; This function is called by:
  2474 ;;		_print_fixed
  2475 ;;		_print_number
  2476 ;; This function uses a non-reentrant model
  2477 ;;
  2478                           
  2479                           	psect	text8
  2480  000EDA                     __ptext8:
  2481                           	opt stack 0
  2482  000EDA                     ___wmul:
  2483                           	opt stack 26
  2484                           
  2485                           ;incstack = 0
  2486  000EDA  5021               	movf	___wmul@multiplier,w,c
  2487  000EDC  0223               	mulwf	___wmul@multiplicand,c
  2488  000EDE  CFF3 F025          	movff	prodl,___wmul@product
  2489  000EE2  CFF4 F026          	movff	prodh,___wmul@product+1
  2490  000EE6  5021               	movf	___wmul@multiplier,w,c
  2491  000EE8  0224               	mulwf	___wmul@multiplicand+1,c
  2492  000EEA  50F3               	movf	prodl,w,c
  2493  000EEC  2626               	addwf	___wmul@product+1,f,c
  2494  000EEE  5022               	movf	___wmul@multiplier+1,w,c
  2495  000EF0  0223               	mulwf	___wmul@multiplicand,c
  2496  000EF2  50F3               	movf	prodl,w,c
  2497  000EF4  2626               	addwf	___wmul@product+1,f,c
  2498  000EF6  C025  F021         	movff	___wmul@product,?___wmul
  2499  000EFA  C026  F022         	movff	___wmul@product+1,?___wmul+1
  2500  000EFE  0012               	return	
  2501  000F00                     __end_of___wmul:
  2502                           	opt stack 0
  2503                           tblptru	equ	0xFF8
  2504                           tblptrh	equ	0xFF7
  2505                           tblptrl	equ	0xFF6
  2506                           tablat	equ	0xFF5
  2507                           prodh	equ	0xFF4
  2508                           prodl	equ	0xFF3
  2509                           intcon	equ	0xFF2
  2510                           postinc0	equ	0xFEE
  2511                           wreg	equ	0xFE8
  2512                           indf2	equ	0xFDF
  2513                           postinc2	equ	0xFDE
  2514                           postdec2	equ	0xFDD
  2515                           fsr2h	equ	0xFDA
  2516                           fsr2l	equ	0xFD9
  2517                           status	equ	0xFD8
  2518                           
  2519 ;; *************** function ___lwdiv *****************
  2520 ;; Defined at:
  2521 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/lwdiv.c"
  2522 ;; Parameters:    Size  Location     Type
  2523 ;;  dividend        2   32[COMRAM] unsigned int 
  2524 ;;  divisor         2   34[COMRAM] unsigned int 
  2525 ;; Auto vars:     Size  Location     Type
  2526 ;;  quotient        2   36[COMRAM] unsigned int 
  2527 ;;  counter         1   38[COMRAM] unsigned char 
  2528 ;; Return value:  Size  Location     Type
  2529 ;;                  2   32[COMRAM] unsigned int 
  2530 ;; Registers used:
  2531 ;;		wreg, status,2, status,0
  2532 ;; Tracked objects:
  2533 ;;		On entry : 0/0
  2534 ;;		On exit  : 0/0
  2535 ;;		Unchanged: 0/0
  2536 ;; Data sizes:     COMRAM   BANK0
  2537 ;;      Params:         4       0
  2538 ;;      Locals:         3       0
  2539 ;;      Temps:          0       0
  2540 ;;      Totals:         7       0
  2541 ;;Total ram usage:        7 bytes
  2542 ;; Hardware stack levels used:    1
  2543 ;; Hardware stack levels required when called:    2
  2544 ;; This function calls:
  2545 ;;		Nothing
  2546 ;; This function is called by:
  2547 ;;		_print_fixed
  2548 ;;		_print_number
  2549 ;; This function uses a non-reentrant model
  2550 ;;
  2551                           
  2552                           	psect	text9
  2553  000D60                     __ptext9:
  2554                           	opt stack 0
  2555  000D60                     ___lwdiv:
  2556                           	opt stack 26
  2557                           
  2558                           ;incstack = 0
  2559  000D60  0E00               	movlw	0
  2560  000D62  6E26               	movwf	___lwdiv@quotient+1,c
  2561  000D64  0E00               	movlw	0
  2562  000D66  6E25               	movwf	___lwdiv@quotient,c
  2563  000D68  5023               	movf	___lwdiv@divisor,w,c
  2564  000D6A  1024               	iorwf	___lwdiv@divisor+1,w,c
  2565  000D6C  B4D8               	btfsc	status,2,c
  2566  000D6E  D01C               	goto	l655
  2567  000D70  0E01               	movlw	1
  2568  000D72  6E27               	movwf	___lwdiv@counter,c
  2569  000D74  D004               	goto	l650
  2570  000D76  90D8               	bcf	status,0,c
  2571  000D78  3623               	rlcf	___lwdiv@divisor,f,c
  2572  000D7A  3624               	rlcf	___lwdiv@divisor+1,f,c
  2573  000D7C  2A27               	incf	___lwdiv@counter,f,c
  2574  000D7E                     l650:
  2575  000D7E  AE24               	btfss	___lwdiv@divisor+1,7,c
  2576  000D80  D7FA               	goto	l651
  2577  000D82                     u1130:
  2578  000D82  90D8               	bcf	status,0,c
  2579  000D84  3625               	rlcf	___lwdiv@quotient,f,c
  2580  000D86  3626               	rlcf	___lwdiv@quotient+1,f,c
  2581  000D88  5023               	movf	___lwdiv@divisor,w,c
  2582  000D8A  5C21               	subwf	___lwdiv@dividend,w,c
  2583  000D8C  5024               	movf	___lwdiv@divisor+1,w,c
  2584  000D8E  5822               	subwfb	___lwdiv@dividend+1,w,c
  2585  000D90  A0D8               	btfss	status,0,c
  2586  000D92  D005               	goto	l654
  2587  000D94  5023               	movf	___lwdiv@divisor,w,c
  2588  000D96  5E21               	subwf	___lwdiv@dividend,f,c
  2589  000D98  5024               	movf	___lwdiv@divisor+1,w,c
  2590  000D9A  5A22               	subwfb	___lwdiv@dividend+1,f,c
  2591  000D9C  8025               	bsf	___lwdiv@quotient,0,c
  2592  000D9E                     l654:
  2593  000D9E  90D8               	bcf	status,0,c
  2594  000DA0  3224               	rrcf	___lwdiv@divisor+1,f,c
  2595  000DA2  3223               	rrcf	___lwdiv@divisor,f,c
  2596  000DA4  2E27               	decfsz	___lwdiv@counter,f,c
  2597  000DA6  D7ED               	goto	u1130
  2598  000DA8                     l655:
  2599  000DA8  C025  F021         	movff	___lwdiv@quotient,?___lwdiv
  2600  000DAC  C026  F022         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2601  000DB0  0012               	return		;funcret
  2602  000DB2                     __end_of___lwdiv:
  2603                           	opt stack 0
  2604                           tblptru	equ	0xFF8
  2605                           tblptrh	equ	0xFF7
  2606                           tblptrl	equ	0xFF6
  2607                           tablat	equ	0xFF5
  2608                           prodh	equ	0xFF4
  2609                           prodl	equ	0xFF3
  2610                           intcon	equ	0xFF2
  2611                           postinc0	equ	0xFEE
  2612                           wreg	equ	0xFE8
  2613                           indf2	equ	0xFDF
  2614                           postinc2	equ	0xFDE
  2615                           postdec2	equ	0xFDD
  2616                           fsr2h	equ	0xFDA
  2617                           fsr2l	equ	0xFD9
  2618                           status	equ	0xFD8
  2619                           
  2620 ;; *************** function ___awdiv *****************
  2621 ;; Defined at:
  2622 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/awdiv.c"
  2623 ;; Parameters:    Size  Location     Type
  2624 ;;  dividend        2   32[COMRAM] int 
  2625 ;;  divisor         2   34[COMRAM] int 
  2626 ;; Auto vars:     Size  Location     Type
  2627 ;;  quotient        2   38[COMRAM] int 
  2628 ;;  sign            1   37[COMRAM] unsigned char 
  2629 ;;  counter         1   36[COMRAM] unsigned char 
  2630 ;; Return value:  Size  Location     Type
  2631 ;;                  2   32[COMRAM] int 
  2632 ;; Registers used:
  2633 ;;		wreg, status,2, status,0
  2634 ;; Tracked objects:
  2635 ;;		On entry : 0/0
  2636 ;;		On exit  : 0/0
  2637 ;;		Unchanged: 0/0
  2638 ;; Data sizes:     COMRAM   BANK0
  2639 ;;      Params:         4       0
  2640 ;;      Locals:         4       0
  2641 ;;      Temps:          0       0
  2642 ;;      Totals:         8       0
  2643 ;;Total ram usage:        8 bytes
  2644 ;; Hardware stack levels used:    1
  2645 ;; Hardware stack levels required when called:    2
  2646 ;; This function calls:
  2647 ;;		Nothing
  2648 ;; This function is called by:
  2649 ;;		_print_fixed
  2650 ;;		_read_aht20
  2651 ;; This function uses a non-reentrant model
  2652 ;;
  2653                           
  2654                           	psect	text10
  2655  000AA4                     __ptext10:
  2656                           	opt stack 0
  2657  000AA4                     ___awdiv:
  2658                           	opt stack 27
  2659                           
  2660                           ;incstack = 0
  2661  000AA4  0E00               	movlw	0
  2662  000AA6  6E26               	movwf	___awdiv@sign,c
  2663  000AA8  AE24               	btfss	___awdiv@divisor+1,7,c
  2664  000AAA  D006               	goto	l414
  2665  000AAC  6C23               	negf	___awdiv@divisor,c
  2666  000AAE  1E24               	comf	___awdiv@divisor+1,f,c
  2667  000AB0  B0D8               	btfsc	status,0,c
  2668  000AB2  2A24               	incf	___awdiv@divisor+1,f,c
  2669  000AB4  0E01               	movlw	1
  2670  000AB6  6E26               	movwf	___awdiv@sign,c
  2671  000AB8                     l414:
  2672  000AB8  AE22               	btfss	___awdiv@dividend+1,7,c
  2673  000ABA  D006               	goto	l415
  2674  000ABC  6C21               	negf	___awdiv@dividend,c
  2675  000ABE  1E22               	comf	___awdiv@dividend+1,f,c
  2676  000AC0  B0D8               	btfsc	status,0,c
  2677  000AC2  2A22               	incf	___awdiv@dividend+1,f,c
  2678  000AC4  0E01               	movlw	1
  2679  000AC6  1A26               	xorwf	___awdiv@sign,f,c
  2680  000AC8                     l415:
  2681  000AC8  0E00               	movlw	0
  2682  000ACA  6E28               	movwf	___awdiv@quotient+1,c
  2683  000ACC  0E00               	movlw	0
  2684  000ACE  6E27               	movwf	___awdiv@quotient,c
  2685  000AD0  5023               	movf	___awdiv@divisor,w,c
  2686  000AD2  1024               	iorwf	___awdiv@divisor+1,w,c
  2687  000AD4  B4D8               	btfsc	status,2,c
  2688  000AD6  D01C               	goto	l422
  2689  000AD8  0E01               	movlw	1
  2690  000ADA  6E25               	movwf	___awdiv@counter,c
  2691  000ADC  D004               	goto	l417
  2692  000ADE  90D8               	bcf	status,0,c
  2693  000AE0  3623               	rlcf	___awdiv@divisor,f,c
  2694  000AE2  3624               	rlcf	___awdiv@divisor+1,f,c
  2695  000AE4  2A25               	incf	___awdiv@counter,f,c
  2696  000AE6                     l417:
  2697  000AE6  AE24               	btfss	___awdiv@divisor+1,7,c
  2698  000AE8  D7FA               	goto	l418
  2699  000AEA                     u1970:
  2700  000AEA  90D8               	bcf	status,0,c
  2701  000AEC  3627               	rlcf	___awdiv@quotient,f,c
  2702  000AEE  3628               	rlcf	___awdiv@quotient+1,f,c
  2703  000AF0  5023               	movf	___awdiv@divisor,w,c
  2704  000AF2  5C21               	subwf	___awdiv@dividend,w,c
  2705  000AF4  5024               	movf	___awdiv@divisor+1,w,c
  2706  000AF6  5822               	subwfb	___awdiv@dividend+1,w,c
  2707  000AF8  A0D8               	btfss	status,0,c
  2708  000AFA  D005               	goto	l421
  2709  000AFC  5023               	movf	___awdiv@divisor,w,c
  2710  000AFE  5E21               	subwf	___awdiv@dividend,f,c
  2711  000B00  5024               	movf	___awdiv@divisor+1,w,c
  2712  000B02  5A22               	subwfb	___awdiv@dividend+1,f,c
  2713  000B04  8027               	bsf	___awdiv@quotient,0,c
  2714  000B06                     l421:
  2715  000B06  90D8               	bcf	status,0,c
  2716  000B08  3224               	rrcf	___awdiv@divisor+1,f,c
  2717  000B0A  3223               	rrcf	___awdiv@divisor,f,c
  2718  000B0C  2E25               	decfsz	___awdiv@counter,f,c
  2719  000B0E  D7ED               	goto	u1970
  2720  000B10                     l422:
  2721  000B10  5026               	movf	___awdiv@sign,w,c
  2722  000B12  B4D8               	btfsc	status,2,c
  2723  000B14  D004               	goto	l423
  2724  000B16  6C27               	negf	___awdiv@quotient,c
  2725  000B18  1E28               	comf	___awdiv@quotient+1,f,c
  2726  000B1A  B0D8               	btfsc	status,0,c
  2727  000B1C  2A28               	incf	___awdiv@quotient+1,f,c
  2728  000B1E                     l423:
  2729  000B1E  C027  F021         	movff	___awdiv@quotient,?___awdiv
  2730  000B22  C028  F022         	movff	___awdiv@quotient+1,?___awdiv+1
  2731  000B26  0012               	return	
  2732  000B28                     __end_of___awdiv:
  2733                           	opt stack 0
  2734                           tblptru	equ	0xFF8
  2735                           tblptrh	equ	0xFF7
  2736                           tblptrl	equ	0xFF6
  2737                           tablat	equ	0xFF5
  2738                           prodh	equ	0xFF4
  2739                           prodl	equ	0xFF3
  2740                           intcon	equ	0xFF2
  2741                           postinc0	equ	0xFEE
  2742                           wreg	equ	0xFE8
  2743                           indf2	equ	0xFDF
  2744                           postinc2	equ	0xFDE
  2745                           postdec2	equ	0xFDD
  2746                           fsr2h	equ	0xFDA
  2747                           fsr2l	equ	0xFD9
  2748                           status	equ	0xFD8
  2749                           
  2750 ;; *************** function _print_lf *****************
  2751 ;; Defined at:
  2752 ;;		line 213 in file "drier.c"
  2753 ;; Parameters:    Size  Location     Type
  2754 ;;		None
  2755 ;; Auto vars:     Size  Location     Type
  2756 ;;		None
  2757 ;; Return value:  Size  Location     Type
  2758 ;;                  1    wreg      void 
  2759 ;; Registers used:
  2760 ;;		wreg, cstack
  2761 ;; Tracked objects:
  2762 ;;		On entry : 0/0
  2763 ;;		On exit  : 0/0
  2764 ;;		Unchanged: 0/0
  2765 ;; Data sizes:     COMRAM   BANK0
  2766 ;;      Params:         0       0
  2767 ;;      Locals:         0       0
  2768 ;;      Temps:          0       0
  2769 ;;      Totals:         0       0
  2770 ;;Total ram usage:        0 bytes
  2771 ;; Hardware stack levels used:    1
  2772 ;; Hardware stack levels required when called:    3
  2773 ;; This function calls:
  2774 ;;		_send_uart
  2775 ;; This function is called by:
  2776 ;;		_main
  2777 ;; This function uses a non-reentrant model
  2778 ;;
  2779                           
  2780                           	psect	text11
  2781  000FDC                     __ptext11:
  2782                           	opt stack 0
  2783  000FDC                     _print_lf:
  2784                           	opt stack 27
  2785                           
  2786                           ;drier.c: 215: send_uart('\n');
  2787                           
  2788                           ;incstack = 0
  2789  000FDC  0E0A               	movlw	10
  2790  000FDE  ECE8  F007         	call	_send_uart
  2791  000FE2  0012               	return		;funcret
  2792  000FE4                     __end_of_print_lf:
  2793                           	opt stack 0
  2794                           tblptru	equ	0xFF8
  2795                           tblptrh	equ	0xFF7
  2796                           tblptrl	equ	0xFF6
  2797                           tablat	equ	0xFF5
  2798                           prodh	equ	0xFF4
  2799                           prodl	equ	0xFF3
  2800                           intcon	equ	0xFF2
  2801                           postinc0	equ	0xFEE
  2802                           wreg	equ	0xFE8
  2803                           indf2	equ	0xFDF
  2804                           postinc2	equ	0xFDE
  2805                           postdec2	equ	0xFDD
  2806                           fsr2h	equ	0xFDA
  2807                           fsr2l	equ	0xFD9
  2808                           status	equ	0xFD8
  2809                           
  2810 ;; *************** function _send_uart *****************
  2811 ;; Defined at:
  2812 ;;		line 191 in file "drier.c"
  2813 ;; Parameters:    Size  Location     Type
  2814 ;;  c               1    wreg     unsigned char 
  2815 ;; Auto vars:     Size  Location     Type
  2816 ;;  c               1   32[COMRAM] unsigned char 
  2817 ;; Return value:  Size  Location     Type
  2818 ;;                  1    wreg      void 
  2819 ;; Registers used:
  2820 ;;		wreg
  2821 ;; Tracked objects:
  2822 ;;		On entry : 0/0
  2823 ;;		On exit  : 0/0
  2824 ;;		Unchanged: 0/0
  2825 ;; Data sizes:     COMRAM   BANK0
  2826 ;;      Params:         0       0
  2827 ;;      Locals:         1       0
  2828 ;;      Temps:          0       0
  2829 ;;      Totals:         1       0
  2830 ;;Total ram usage:        1 bytes
  2831 ;; Hardware stack levels used:    1
  2832 ;; Hardware stack levels required when called:    2
  2833 ;; This function calls:
  2834 ;;		Nothing
  2835 ;; This function is called by:
  2836 ;;		_print_text
  2837 ;;		_print_lf
  2838 ;;		_print_fixed
  2839 ;;		_print_number
  2840 ;; This function uses a non-reentrant model
  2841 ;;
  2842                           
  2843                           	psect	text12
  2844  000FD0                     __ptext12:
  2845                           	opt stack 0
  2846  000FD0                     _send_uart:
  2847                           	opt stack 27
  2848                           
  2849                           ;incstack = 0
  2850                           ;send_uart@c stored from wreg
  2851  000FD0  6E21               	movwf	send_uart@c,c
  2852  000FD2                     
  2853                           ;drier.c: 194: {
  2854                           ;drier.c: 195: ;
  2855                           
  2856                           ;drier.c: 193: while(!PIR1bits.TXIF)
  2857  000FD2  A89E               	btfss	3998,4,c	;volatile
  2858  000FD4  D7FE               	goto	l952
  2859                           
  2860                           ;drier.c: 196: }
  2861                           ;drier.c: 199: TXREG = c;
  2862  000FD6  C021  FFAD         	movff	send_uart@c,4013	;volatile
  2863  000FDA  0012               	return		;funcret
  2864  000FDC                     __end_of_send_uart:
  2865                           	opt stack 0
  2866                           tblptru	equ	0xFF8
  2867                           tblptrh	equ	0xFF7
  2868                           tblptrl	equ	0xFF6
  2869                           tablat	equ	0xFF5
  2870                           prodh	equ	0xFF4
  2871                           prodl	equ	0xFF3
  2872                           intcon	equ	0xFF2
  2873                           postinc0	equ	0xFEE
  2874                           wreg	equ	0xFE8
  2875                           indf2	equ	0xFDF
  2876                           postinc2	equ	0xFDE
  2877                           postdec2	equ	0xFDD
  2878                           fsr2h	equ	0xFDA
  2879                           fsr2l	equ	0xFD9
  2880                           status	equ	0xFD8
  2881                           
  2882 ;; *************** function _init_aht20 *****************
  2883 ;; Defined at:
  2884 ;;		line 561 in file "drier.c"
  2885 ;; Parameters:    Size  Location     Type
  2886 ;;  ptr             2   50[COMRAM] PTR struct .
  2887 ;;		 -> inside(7), outside(7), 
  2888 ;;  port            1   52[COMRAM] unsigned char 
  2889 ;; Auto vars:     Size  Location     Type
  2890 ;;		None
  2891 ;; Return value:  Size  Location     Type
  2892 ;;                  1    wreg      void 
  2893 ;; Registers used:
  2894 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2895 ;; Tracked objects:
  2896 ;;		On entry : 0/0
  2897 ;;		On exit  : 0/0
  2898 ;;		Unchanged: 0/0
  2899 ;; Data sizes:     COMRAM   BANK0
  2900 ;;      Params:         3       0
  2901 ;;      Locals:         0       0
  2902 ;;      Temps:          1       0
  2903 ;;      Totals:         4       0
  2904 ;;Total ram usage:        4 bytes
  2905 ;; Hardware stack levels used:    1
  2906 ;; Hardware stack levels required when called:    6
  2907 ;; This function calls:
  2908 ;;		_aht20_status
  2909 ;;		_i2c_write_device2
  2910 ;; This function is called by:
  2911 ;;		_main
  2912 ;; This function uses a non-reentrant model
  2913 ;;
  2914                           
  2915                           	psect	text13
  2916  000E3E                     __ptext13:
  2917                           	opt stack 0
  2918  000E3E                     _init_aht20:
  2919                           	opt stack 24
  2920                           
  2921                           ;drier.c: 563: ptr->port = port;
  2922                           
  2923                           ;incstack = 0
  2924  000E3E  C033  FFD9         	movff	init_aht20@ptr,fsr2l
  2925  000E42  C034  FFDA         	movff	init_aht20@ptr+1,fsr2h
  2926  000E46  C035  FFDF         	movff	init_aht20@port,indf2
  2927                           
  2928                           ;drier.c: 564: i2c_buffer[0] = 0xBA;
  2929  000E4A  0EBA               	movlw	186
  2930  000E4C  6E3D               	movwf	_i2c_buffer,c
  2931                           
  2932                           ;drier.c: 565: i2c_write_device2(port, 1);
  2933  000E4E  0E01               	movlw	1
  2934  000E50  6E27               	movwf	i2c_write_device2@len,c
  2935  000E52  5035               	movf	init_aht20@port,w,c
  2936  000E54  ECFD  F006         	call	_i2c_write_device2
  2937                           
  2938                           ;drier.c: 567: i2c_buffer[0] = 0xE1;
  2939  000E58  0EE1               	movlw	225
  2940  000E5A  6E3D               	movwf	_i2c_buffer,c
  2941                           
  2942                           ;drier.c: 568: i2c_buffer[1] = 0x08;
  2943  000E5C  0E08               	movlw	8
  2944  000E5E  6E3E               	movwf	_i2c_buffer+1,c
  2945                           
  2946                           ;drier.c: 569: i2c_buffer[2] = 0x00;
  2947  000E60  0E00               	movlw	0
  2948  000E62  6E3F               	movwf	_i2c_buffer+2,c
  2949                           
  2950                           ;drier.c: 570: i2c_write_device2(port, 3);
  2951  000E64  0E03               	movlw	3
  2952  000E66  6E27               	movwf	i2c_write_device2@len,c
  2953  000E68  5035               	movf	init_aht20@port,w,c
  2954  000E6A  ECFD  F006         	call	_i2c_write_device2
  2955  000E6E                     
  2956                           ;drier.c: 573: {
  2957                           ;drier.c: 574: ;
  2958  000E6E  5035               	movf	init_aht20@port,w,c
  2959  000E70  ECE0  F007         	call	_aht20_status
  2960  000E74  6E36               	movwf	??_init_aht20& (0+255),c
  2961  000E76  AE36               	btfss	??_init_aht20,7,c
  2962  000E78  0012               	return	
  2963  000E7A  D7F9               	goto	l197
  2964  000E7C                     __end_of_init_aht20:
  2965                           	opt stack 0
  2966                           tblptru	equ	0xFF8
  2967                           tblptrh	equ	0xFF7
  2968                           tblptrl	equ	0xFF6
  2969                           tablat	equ	0xFF5
  2970                           prodh	equ	0xFF4
  2971                           prodl	equ	0xFF3
  2972                           intcon	equ	0xFF2
  2973                           postinc0	equ	0xFEE
  2974                           wreg	equ	0xFE8
  2975                           indf2	equ	0xFDF
  2976                           postinc2	equ	0xFDE
  2977                           postdec2	equ	0xFDD
  2978                           fsr2h	equ	0xFDA
  2979                           fsr2l	equ	0xFD9
  2980                           status	equ	0xFD8
  2981                           
  2982 ;; *************** function _i2c_write_device2 *****************
  2983 ;; Defined at:
  2984 ;;		line 476 in file "drier.c"
  2985 ;; Parameters:    Size  Location     Type
  2986 ;;  port            1    wreg     unsigned char 
  2987 ;;  len             1   38[COMRAM] unsigned char 
  2988 ;; Auto vars:     Size  Location     Type
  2989 ;;  port            1   40[COMRAM] unsigned char 
  2990 ;;  i               1   39[COMRAM] unsigned char 
  2991 ;; Return value:  Size  Location     Type
  2992 ;;                  1    wreg      void 
  2993 ;; Registers used:
  2994 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2995 ;; Tracked objects:
  2996 ;;		On entry : 0/0
  2997 ;;		On exit  : 0/0
  2998 ;;		Unchanged: 0/0
  2999 ;; Data sizes:     COMRAM   BANK0
  3000 ;;      Params:         1       0
  3001 ;;      Locals:         2       0
  3002 ;;      Temps:          0       0
  3003 ;;      Totals:         3       0
  3004 ;;Total ram usage:        3 bytes
  3005 ;; Hardware stack levels used:    1
  3006 ;; Hardware stack levels required when called:    4
  3007 ;; This function calls:
  3008 ;;		_i2c_start
  3009 ;;		_i2c_stop
  3010 ;;		_i2c_write
  3011 ;; This function is called by:
  3012 ;;		_read_aht20
  3013 ;;		_init_aht20
  3014 ;; This function uses a non-reentrant model
  3015 ;;
  3016                           
  3017                           	psect	text14
  3018  000DFA                     __ptext14:
  3019                           	opt stack 0
  3020  000DFA                     _i2c_write_device2:
  3021                           	opt stack 25
  3022                           
  3023                           ;incstack = 0
  3024                           ;i2c_write_device2@port stored from wreg
  3025  000DFA  6E29               	movwf	i2c_write_device2@port,c
  3026                           
  3027                           ;drier.c: 479: i2c_start(port);
  3028  000DFC  5029               	movf	i2c_write_device2@port,w,c
  3029  000DFE  EC57  F007         	call	_i2c_start
  3030                           
  3031                           ;drier.c: 482: i2c_write(port, ((uint8_t)(((0x38 << 1)) & (~((uint32_t)0x00000001)))));
  3032  000E02  0E70               	movlw	112
  3033  000E04  6E23               	movwf	i2c_write@value,c
  3034  000E06  5029               	movf	i2c_write_device2@port,w,c
  3035  000E08  EC15  F006         	call	_i2c_write
  3036                           
  3037                           ;drier.c: 483: uint8_t i;
  3038                           ;drier.c: 484: for(i = 0; i < len; i++)
  3039  000E0C  0E00               	movlw	0
  3040  000E0E  6E28               	movwf	i2c_write_device2@i,c
  3041  000E10  D00E               	goto	l173
  3042  000E12                     
  3043                           ;drier.c: 485: {
  3044                           ;drier.c: 486: i2c_write(port, i2c_buffer[i]);
  3045  000E12  5028               	movf	i2c_write_device2@i,w,c
  3046  000E14  0D01               	mullw	1
  3047  000E16  0E3D               	movlw	low _i2c_buffer
  3048  000E18  24F3               	addwf	prodl,w,c
  3049  000E1A  6ED9               	movwf	fsr2l,c
  3050  000E1C  0E00               	movlw	high _i2c_buffer
  3051  000E1E  20F4               	addwfc	prodh,w,c
  3052  000E20  6EDA               	movwf	fsr2h,c
  3053  000E22  50DF               	movf	indf2,w,c
  3054  000E24  6E23               	movwf	i2c_write@value,c
  3055  000E26  5029               	movf	i2c_write_device2@port,w,c
  3056  000E28  EC15  F006         	call	_i2c_write
  3057  000E2C  2A28               	incf	i2c_write_device2@i,f,c
  3058  000E2E                     l173:
  3059  000E2E  5027               	movf	i2c_write_device2@len,w,c
  3060  000E30  5C28               	subwf	i2c_write_device2@i,w,c
  3061  000E32  A0D8               	btfss	status,0,c
  3062  000E34  D7EE               	goto	l174
  3063                           
  3064                           ;drier.c: 487: }
  3065                           ;drier.c: 489: i2c_stop(port);
  3066  000E36  5029               	movf	i2c_write_device2@port,w,c
  3067  000E38  EC80  F007         	call	_i2c_stop
  3068  000E3C  0012               	return		;funcret
  3069  000E3E                     __end_of_i2c_write_device2:
  3070                           	opt stack 0
  3071                           tblptru	equ	0xFF8
  3072                           tblptrh	equ	0xFF7
  3073                           tblptrl	equ	0xFF6
  3074                           tablat	equ	0xFF5
  3075                           prodh	equ	0xFF4
  3076                           prodl	equ	0xFF3
  3077                           intcon	equ	0xFF2
  3078                           postinc0	equ	0xFEE
  3079                           wreg	equ	0xFE8
  3080                           indf2	equ	0xFDF
  3081                           postinc2	equ	0xFDE
  3082                           postdec2	equ	0xFDD
  3083                           fsr2h	equ	0xFDA
  3084                           fsr2l	equ	0xFD9
  3085                           status	equ	0xFD8
  3086                           
  3087 ;; *************** function _aht20_status *****************
  3088 ;; Defined at:
  3089 ;;		line 492 in file "drier.c"
  3090 ;; Parameters:    Size  Location     Type
  3091 ;;  port            1    wreg     unsigned char 
  3092 ;; Auto vars:     Size  Location     Type
  3093 ;;  port            1   49[COMRAM] unsigned char 
  3094 ;; Return value:  Size  Location     Type
  3095 ;;                  1    wreg      unsigned char 
  3096 ;; Registers used:
  3097 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3098 ;; Tracked objects:
  3099 ;;		On entry : 0/0
  3100 ;;		On exit  : 0/0
  3101 ;;		Unchanged: 0/0
  3102 ;; Data sizes:     COMRAM   BANK0
  3103 ;;      Params:         0       0
  3104 ;;      Locals:         1       0
  3105 ;;      Temps:          0       0
  3106 ;;      Totals:         1       0
  3107 ;;Total ram usage:        1 bytes
  3108 ;; Hardware stack levels used:    1
  3109 ;; Hardware stack levels required when called:    5
  3110 ;; This function calls:
  3111 ;;		_i2c_read_device2
  3112 ;; This function is called by:
  3113 ;;		_read_aht20
  3114 ;;		_init_aht20
  3115 ;; This function uses a non-reentrant model
  3116 ;;
  3117                           
  3118                           	psect	text15
  3119  000FC0                     __ptext15:
  3120                           	opt stack 0
  3121  000FC0                     _aht20_status:
  3122                           	opt stack 24
  3123                           
  3124                           ;incstack = 0
  3125                           ;aht20_status@port stored from wreg
  3126  000FC0  6E32               	movwf	aht20_status@port,c
  3127                           
  3128                           ;drier.c: 494: i2c_read_device2(port, 1);
  3129  000FC2  0E01               	movlw	1
  3130  000FC4  6E2F               	movwf	i2c_read_device2@bytes,c
  3131  000FC6  5032               	movf	aht20_status@port,w,c
  3132  000FC8  ECD9  F006         	call	_i2c_read_device2
  3133                           
  3134                           ;drier.c: 498: return i2c_buffer[0];
  3135  000FCC  503D               	movf	_i2c_buffer,w,c
  3136  000FCE  0012               	return	
  3137  000FD0                     __end_of_aht20_status:
  3138                           	opt stack 0
  3139                           tblptru	equ	0xFF8
  3140                           tblptrh	equ	0xFF7
  3141                           tblptrl	equ	0xFF6
  3142                           tablat	equ	0xFF5
  3143                           prodh	equ	0xFF4
  3144                           prodl	equ	0xFF3
  3145                           intcon	equ	0xFF2
  3146                           postinc0	equ	0xFEE
  3147                           wreg	equ	0xFE8
  3148                           indf2	equ	0xFDF
  3149                           postinc2	equ	0xFDE
  3150                           postdec2	equ	0xFDD
  3151                           fsr2h	equ	0xFDA
  3152                           fsr2l	equ	0xFD9
  3153                           status	equ	0xFD8
  3154                           
  3155 ;; *************** function _i2c_read_device2 *****************
  3156 ;; Defined at:
  3157 ;;		line 446 in file "drier.c"
  3158 ;; Parameters:    Size  Location     Type
  3159 ;;  port            1    wreg     unsigned char 
  3160 ;;  bytes           1   46[COMRAM] unsigned char 
  3161 ;; Auto vars:     Size  Location     Type
  3162 ;;  port            1   48[COMRAM] unsigned char 
  3163 ;;  i               1   47[COMRAM] unsigned char 
  3164 ;; Return value:  Size  Location     Type
  3165 ;;                  1    wreg      void 
  3166 ;; Registers used:
  3167 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3168 ;; Tracked objects:
  3169 ;;		On entry : 0/0
  3170 ;;		On exit  : 0/0
  3171 ;;		Unchanged: 0/0
  3172 ;; Data sizes:     COMRAM   BANK0
  3173 ;;      Params:         1       0
  3174 ;;      Locals:         2       0
  3175 ;;      Temps:          0       0
  3176 ;;      Totals:         3       0
  3177 ;;Total ram usage:        3 bytes
  3178 ;; Hardware stack levels used:    1
  3179 ;; Hardware stack levels required when called:    4
  3180 ;; This function calls:
  3181 ;;		_i2c_read
  3182 ;;		_i2c_start
  3183 ;;		_i2c_stop
  3184 ;;		_i2c_write
  3185 ;; This function is called by:
  3186 ;;		_aht20_status
  3187 ;;		_read_aht20
  3188 ;; This function uses a non-reentrant model
  3189 ;;
  3190                           
  3191                           	psect	text16
  3192  000DB2                     __ptext16:
  3193                           	opt stack 0
  3194  000DB2                     _i2c_read_device2:
  3195                           	opt stack 25
  3196                           
  3197                           ;incstack = 0
  3198                           ;i2c_read_device2@port stored from wreg
  3199  000DB2  6E31               	movwf	i2c_read_device2@port,c
  3200                           
  3201                           ;drier.c: 448: uint8_t i;
  3202                           ;drier.c: 449: for(i = 0; i < bytes; i++)
  3203  000DB4  0E00               	movlw	0
  3204  000DB6  6E30               	movwf	i2c_read_device2@i,c
  3205  000DB8  D00B               	goto	l164
  3206  000DBA                     
  3207                           ;drier.c: 450: {
  3208                           ;drier.c: 451: i2c_buffer[i] = 0xff;
  3209  000DBA  5030               	movf	i2c_read_device2@i,w,c
  3210  000DBC  0D01               	mullw	1
  3211  000DBE  0E3D               	movlw	low _i2c_buffer
  3212  000DC0  24F3               	addwf	prodl,w,c
  3213  000DC2  6ED9               	movwf	fsr2l,c
  3214  000DC4  0E00               	movlw	high _i2c_buffer
  3215  000DC6  20F4               	addwfc	prodh,w,c
  3216  000DC8  6EDA               	movwf	fsr2h,c
  3217  000DCA  0EFF               	movlw	255
  3218  000DCC  6EDF               	movwf	indf2,c
  3219  000DCE  2A30               	incf	i2c_read_device2@i,f,c
  3220  000DD0                     l164:
  3221  000DD0  502F               	movf	i2c_read_device2@bytes,w,c
  3222  000DD2  5C30               	subwf	i2c_read_device2@i,w,c
  3223  000DD4  A0D8               	btfss	status,0,c
  3224  000DD6  D7F1               	goto	l165
  3225                           
  3226                           ;drier.c: 452: }
  3227                           ;drier.c: 454: i2c_start(port);
  3228  000DD8  5031               	movf	i2c_read_device2@port,w,c
  3229  000DDA  EC57  F007         	call	_i2c_start
  3230                           
  3231                           ;drier.c: 456: i2c_write(port, ((uint8_t)(((0x38 << 1)) | ((uint32_t)0x00000001))));
  3232  000DDE  0E71               	movlw	113
  3233  000DE0  6E23               	movwf	i2c_write@value,c
  3234  000DE2  5031               	movf	i2c_read_device2@port,w,c
  3235  000DE4  EC15  F006         	call	_i2c_write
  3236                           
  3237                           ;drier.c: 457: i2c_read(port, bytes);
  3238  000DE8  C02F  F023         	movff	i2c_read_device2@bytes,i2c_read@bytes
  3239  000DEC  5031               	movf	i2c_read_device2@port,w,c
  3240  000DEE  ECEC  F004         	call	_i2c_read
  3241                           
  3242                           ;drier.c: 459: i2c_stop(port);
  3243  000DF2  5031               	movf	i2c_read_device2@port,w,c
  3244  000DF4  EC80  F007         	call	_i2c_stop
  3245  000DF8  0012               	return		;funcret
  3246  000DFA                     __end_of_i2c_read_device2:
  3247                           	opt stack 0
  3248                           tblptru	equ	0xFF8
  3249                           tblptrh	equ	0xFF7
  3250                           tblptrl	equ	0xFF6
  3251                           tablat	equ	0xFF5
  3252                           prodh	equ	0xFF4
  3253                           prodl	equ	0xFF3
  3254                           intcon	equ	0xFF2
  3255                           postinc0	equ	0xFEE
  3256                           wreg	equ	0xFE8
  3257                           indf2	equ	0xFDF
  3258                           postinc2	equ	0xFDE
  3259                           postdec2	equ	0xFDD
  3260                           fsr2h	equ	0xFDA
  3261                           fsr2l	equ	0xFD9
  3262                           status	equ	0xFD8
  3263                           
  3264 ;; *************** function _i2c_write *****************
  3265 ;; Defined at:
  3266 ;;		line 341 in file "drier.c"
  3267 ;; Parameters:    Size  Location     Type
  3268 ;;  port            1    wreg     unsigned char 
  3269 ;;  value           1   34[COMRAM] unsigned char 
  3270 ;; Auto vars:     Size  Location     Type
  3271 ;;  port            1   37[COMRAM] unsigned char 
  3272 ;;  i               1   36[COMRAM] unsigned char 
  3273 ;;  ack             1   35[COMRAM] unsigned char 
  3274 ;; Return value:  Size  Location     Type
  3275 ;;                  1    wreg      void 
  3276 ;; Registers used:
  3277 ;;		wreg, status,2, status,0, cstack
  3278 ;; Tracked objects:
  3279 ;;		On entry : 0/0
  3280 ;;		On exit  : 0/0
  3281 ;;		Unchanged: 0/0
  3282 ;; Data sizes:     COMRAM   BANK0
  3283 ;;      Params:         1       0
  3284 ;;      Locals:         3       0
  3285 ;;      Temps:          0       0
  3286 ;;      Totals:         4       0
  3287 ;;Total ram usage:        4 bytes
  3288 ;; Hardware stack levels used:    1
  3289 ;; Hardware stack levels required when called:    3
  3290 ;; This function calls:
  3291 ;;		_get_clock
  3292 ;;		_get_data
  3293 ;;		_set_clock
  3294 ;;		_set_data
  3295 ;; This function is called by:
  3296 ;;		_i2c_read_device2
  3297 ;;		_i2c_write_device2
  3298 ;;		_i2c_read_device
  3299 ;;		_i2c_write_device
  3300 ;; This function uses a non-reentrant model
  3301 ;;
  3302                           
  3303                           	psect	text17
  3304  000C2A                     __ptext17:
  3305                           	opt stack 0
  3306  000C2A                     _i2c_write:
  3307                           	opt stack 25
  3308                           
  3309                           ;incstack = 0
  3310                           ;i2c_write@port stored from wreg
  3311  000C2A  6E26               	movwf	i2c_write@port,c
  3312                           
  3313                           ;drier.c: 343: uint8_t i = 0;
  3314  000C2C  0E00               	movlw	0
  3315  000C2E  6E25               	movwf	i2c_write@i,c
  3316                           
  3317                           ;drier.c: 344: for(i = 0; i < 8; i++)
  3318  000C30  0E00               	movlw	0
  3319  000C32  6E25               	movwf	i2c_write@i,c
  3320  000C34                     l2156:
  3321  000C34  0E07               	movlw	7
  3322  000C36  6425               	cpfsgt	i2c_write@i,c
  3323  000C38  D001               	goto	l129
  3324  000C3A  D01B               	goto	u1860
  3325  000C3C                     l129:
  3326                           
  3327                           ;drier.c: 345: {
  3328                           ;drier.c: 346: if((value & 0x80))
  3329  000C3C  AE23               	btfss	i2c_write@value,7,c
  3330  000C3E  D006               	goto	l131
  3331                           
  3332                           ;drier.c: 347: {
  3333                           ;drier.c: 348: set_data(port, 1);
  3334  000C40  0E01               	movlw	1
  3335  000C42  6E21               	movwf	set_data@value,c
  3336  000C44  5026               	movf	i2c_write@port,w,c
  3337  000C46  EC91  F007         	call	_set_data
  3338                           
  3339                           ;drier.c: 349: }
  3340  000C4A  D005               	goto	l132
  3341  000C4C                     l131:
  3342                           
  3343                           ;drier.c: 350: else
  3344                           ;drier.c: 351: {
  3345                           ;drier.c: 352: set_data(port, 0);
  3346  000C4C  0E00               	movlw	0
  3347  000C4E  6E21               	movwf	set_data@value,c
  3348  000C50  5026               	movf	i2c_write@port,w,c
  3349  000C52  EC91  F007         	call	_set_data
  3350  000C56                     l132:
  3351                           
  3352                           ;drier.c: 353: }
  3353                           ;drier.c: 354: set_clock(port, 1);
  3354  000C56  0E01               	movlw	1
  3355  000C58  6E21               	movwf	set_clock@value,c
  3356  000C5A  5026               	movf	i2c_write@port,w,c
  3357  000C5C  ECA1  F007         	call	_set_clock
  3358                           
  3359                           ;drier.c: 355: set_clock(port, 0);
  3360  000C60  0E00               	movlw	0
  3361  000C62  6E21               	movwf	set_clock@value,c
  3362  000C64  5026               	movf	i2c_write@port,w,c
  3363  000C66  ECA1  F007         	call	_set_clock
  3364                           
  3365                           ;drier.c: 356: value <<= 1;
  3366  000C6A  90D8               	bcf	status,0,c
  3367  000C6C  3623               	rlcf	i2c_write@value,f,c
  3368  000C6E  2A25               	incf	i2c_write@i,f,c
  3369  000C70  D7E1               	goto	l2156
  3370  000C72                     u1860:
  3371                           
  3372                           ;drier.c: 357: }
  3373                           ;drier.c: 360: set_clock(port, 1);
  3374  000C72  0E01               	movlw	1
  3375  000C74  6E21               	movwf	set_clock@value,c
  3376  000C76  5026               	movf	i2c_write@port,w,c
  3377  000C78  ECA1  F007         	call	_set_clock
  3378  000C7C                     
  3379                           ;drier.c: 363: {
  3380                           ;drier.c: 364: ;
  3381  000C7C  5026               	movf	i2c_write@port,w,c
  3382  000C7E  ECC1  F007         	call	_get_clock
  3383  000C82  0900               	iorlw	0
  3384  000C84  B4D8               	btfsc	status,2,c
  3385  000C86  D7FA               	goto	l134
  3386                           
  3387                           ;drier.c: 365: }
  3388                           ;drier.c: 366: uint8_t ack = get_data(port);
  3389  000C88  5026               	movf	i2c_write@port,w,c
  3390  000C8A  ECB1  F007         	call	_get_data
  3391  000C8E  6E24               	movwf	i2c_write@ack,c
  3392                           
  3393                           ;drier.c: 367: set_clock(port, 0);
  3394  000C90  0E00               	movlw	0
  3395  000C92  6E21               	movwf	set_clock@value,c
  3396  000C94  5026               	movf	i2c_write@port,w,c
  3397  000C96  ECA1  F007         	call	_set_clock
  3398  000C9A  0012               	return		;funcret
  3399  000C9C                     __end_of_i2c_write:
  3400                           	opt stack 0
  3401                           tblptru	equ	0xFF8
  3402                           tblptrh	equ	0xFF7
  3403                           tblptrl	equ	0xFF6
  3404                           tablat	equ	0xFF5
  3405                           prodh	equ	0xFF4
  3406                           prodl	equ	0xFF3
  3407                           intcon	equ	0xFF2
  3408                           postinc0	equ	0xFEE
  3409                           wreg	equ	0xFE8
  3410                           indf2	equ	0xFDF
  3411                           postinc2	equ	0xFDE
  3412                           postdec2	equ	0xFDD
  3413                           fsr2h	equ	0xFDA
  3414                           fsr2l	equ	0xFD9
  3415                           status	equ	0xFD8
  3416                           
  3417 ;; *************** function _i2c_stop *****************
  3418 ;; Defined at:
  3419 ;;		line 418 in file "drier.c"
  3420 ;; Parameters:    Size  Location     Type
  3421 ;;  port            1    wreg     unsigned char 
  3422 ;; Auto vars:     Size  Location     Type
  3423 ;;  port            1   34[COMRAM] unsigned char 
  3424 ;; Return value:  Size  Location     Type
  3425 ;;                  1    wreg      void 
  3426 ;; Registers used:
  3427 ;;		wreg, status,2, cstack
  3428 ;; Tracked objects:
  3429 ;;		On entry : 0/0
  3430 ;;		On exit  : 0/0
  3431 ;;		Unchanged: 0/0
  3432 ;; Data sizes:     COMRAM   BANK0
  3433 ;;      Params:         0       0
  3434 ;;      Locals:         1       0
  3435 ;;      Temps:          0       0
  3436 ;;      Totals:         1       0
  3437 ;;Total ram usage:        1 bytes
  3438 ;; Hardware stack levels used:    1
  3439 ;; Hardware stack levels required when called:    3
  3440 ;; This function calls:
  3441 ;;		_set_clock
  3442 ;;		_set_data
  3443 ;; This function is called by:
  3444 ;;		_i2c_read_device2
  3445 ;;		_i2c_write_device2
  3446 ;;		_i2c_read_device
  3447 ;;		_i2c_write_device
  3448 ;; This function uses a non-reentrant model
  3449 ;;
  3450                           
  3451                           	psect	text18
  3452  000F00                     __ptext18:
  3453                           	opt stack 0
  3454  000F00                     _i2c_stop:
  3455                           	opt stack 25
  3456                           
  3457                           ;incstack = 0
  3458                           ;i2c_stop@port stored from wreg
  3459  000F00  6E23               	movwf	i2c_stop@port,c
  3460                           
  3461                           ;drier.c: 420: set_data(port, 0);
  3462  000F02  0E00               	movlw	0
  3463  000F04  6E21               	movwf	set_data@value,c
  3464  000F06  5023               	movf	i2c_stop@port,w,c
  3465  000F08  EC91  F007         	call	_set_data
  3466                           
  3467                           ;drier.c: 421: set_clock(port, 1);
  3468  000F0C  0E01               	movlw	1
  3469  000F0E  6E21               	movwf	set_clock@value,c
  3470  000F10  5023               	movf	i2c_stop@port,w,c
  3471  000F12  ECA1  F007         	call	_set_clock
  3472                           
  3473                           ;drier.c: 422: set_data(port, 1);
  3474  000F16  0E01               	movlw	1
  3475  000F18  6E21               	movwf	set_data@value,c
  3476  000F1A  5023               	movf	i2c_stop@port,w,c
  3477  000F1C  EC91  F007         	call	_set_data
  3478  000F20  0012               	return		;funcret
  3479  000F22                     __end_of_i2c_stop:
  3480                           	opt stack 0
  3481                           tblptru	equ	0xFF8
  3482                           tblptrh	equ	0xFF7
  3483                           tblptrl	equ	0xFF6
  3484                           tablat	equ	0xFF5
  3485                           prodh	equ	0xFF4
  3486                           prodl	equ	0xFF3
  3487                           intcon	equ	0xFF2
  3488                           postinc0	equ	0xFEE
  3489                           wreg	equ	0xFE8
  3490                           indf2	equ	0xFDF
  3491                           postinc2	equ	0xFDE
  3492                           postdec2	equ	0xFDD
  3493                           fsr2h	equ	0xFDA
  3494                           fsr2l	equ	0xFD9
  3495                           status	equ	0xFD8
  3496                           
  3497 ;; *************** function _i2c_start *****************
  3498 ;; Defined at:
  3499 ;;		line 410 in file "drier.c"
  3500 ;; Parameters:    Size  Location     Type
  3501 ;;  port            1    wreg     unsigned char 
  3502 ;; Auto vars:     Size  Location     Type
  3503 ;;  port            1   34[COMRAM] unsigned char 
  3504 ;; Return value:  Size  Location     Type
  3505 ;;                  1    wreg      void 
  3506 ;; Registers used:
  3507 ;;		wreg, status,2, cstack
  3508 ;; Tracked objects:
  3509 ;;		On entry : 0/0
  3510 ;;		On exit  : 0/0
  3511 ;;		Unchanged: 0/0
  3512 ;; Data sizes:     COMRAM   BANK0
  3513 ;;      Params:         0       0
  3514 ;;      Locals:         1       0
  3515 ;;      Temps:          0       0
  3516 ;;      Totals:         1       0
  3517 ;;Total ram usage:        1 bytes
  3518 ;; Hardware stack levels used:    1
  3519 ;; Hardware stack levels required when called:    3
  3520 ;; This function calls:
  3521 ;;		_set_clock
  3522 ;;		_set_data
  3523 ;; This function is called by:
  3524 ;;		_i2c_read_device2
  3525 ;;		_i2c_write_device2
  3526 ;;		_i2c_read_device
  3527 ;;		_i2c_write_device
  3528 ;; This function uses a non-reentrant model
  3529 ;;
  3530                           
  3531                           	psect	text19
  3532  000EAE                     __ptext19:
  3533                           	opt stack 0
  3534  000EAE                     _i2c_start:
  3535                           	opt stack 25
  3536                           
  3537                           ;incstack = 0
  3538                           ;i2c_start@port stored from wreg
  3539  000EAE  6E23               	movwf	i2c_start@port,c
  3540                           
  3541                           ;drier.c: 412: set_clock(port, 1);
  3542  000EB0  0E01               	movlw	1
  3543  000EB2  6E21               	movwf	set_clock@value,c
  3544  000EB4  5023               	movf	i2c_start@port,w,c
  3545  000EB6  ECA1  F007         	call	_set_clock
  3546                           
  3547                           ;drier.c: 413: set_data(port, 1);
  3548  000EBA  0E01               	movlw	1
  3549  000EBC  6E21               	movwf	set_data@value,c
  3550  000EBE  5023               	movf	i2c_start@port,w,c
  3551  000EC0  EC91  F007         	call	_set_data
  3552                           
  3553                           ;drier.c: 414: set_data(port, 0);
  3554  000EC4  0E00               	movlw	0
  3555  000EC6  6E21               	movwf	set_data@value,c
  3556  000EC8  5023               	movf	i2c_start@port,w,c
  3557  000ECA  EC91  F007         	call	_set_data
  3558                           
  3559                           ;drier.c: 415: set_clock(port, 0);
  3560  000ECE  0E00               	movlw	0
  3561  000ED0  6E21               	movwf	set_clock@value,c
  3562  000ED2  5023               	movf	i2c_start@port,w,c
  3563  000ED4  ECA1  F007         	call	_set_clock
  3564  000ED8  0012               	return		;funcret
  3565  000EDA                     __end_of_i2c_start:
  3566                           	opt stack 0
  3567                           tblptru	equ	0xFF8
  3568                           tblptrh	equ	0xFF7
  3569                           tblptrl	equ	0xFF6
  3570                           tablat	equ	0xFF5
  3571                           prodh	equ	0xFF4
  3572                           prodl	equ	0xFF3
  3573                           intcon	equ	0xFF2
  3574                           postinc0	equ	0xFEE
  3575                           wreg	equ	0xFE8
  3576                           indf2	equ	0xFDF
  3577                           postinc2	equ	0xFDE
  3578                           postdec2	equ	0xFDD
  3579                           fsr2h	equ	0xFDA
  3580                           fsr2l	equ	0xFD9
  3581                           status	equ	0xFD8
  3582                           
  3583 ;; *************** function _i2c_read *****************
  3584 ;; Defined at:
  3585 ;;		line 370 in file "drier.c"
  3586 ;; Parameters:    Size  Location     Type
  3587 ;;  port            1    wreg     unsigned char 
  3588 ;;  bytes           1   34[COMRAM] unsigned char 
  3589 ;; Auto vars:     Size  Location     Type
  3590 ;;  port            1   45[COMRAM] unsigned char 
  3591 ;;  value           1   42[COMRAM] unsigned char 
  3592 ;;  i               1   44[COMRAM] unsigned char 
  3593 ;;  j               1   43[COMRAM] unsigned char 
  3594 ;; Return value:  Size  Location     Type
  3595 ;;                  1    wreg      void 
  3596 ;; Registers used:
  3597 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3598 ;; Tracked objects:
  3599 ;;		On entry : 0/0
  3600 ;;		On exit  : 0/0
  3601 ;;		Unchanged: 0/0
  3602 ;; Data sizes:     COMRAM   BANK0
  3603 ;;      Params:         1       0
  3604 ;;      Locals:         4       0
  3605 ;;      Temps:          7       0
  3606 ;;      Totals:        12       0
  3607 ;;Total ram usage:       12 bytes
  3608 ;; Hardware stack levels used:    1
  3609 ;; Hardware stack levels required when called:    3
  3610 ;; This function calls:
  3611 ;;		_get_clock
  3612 ;;		_get_data
  3613 ;;		_set_clock
  3614 ;;		_set_data
  3615 ;; This function is called by:
  3616 ;;		_i2c_read_device2
  3617 ;;		_i2c_read_device
  3618 ;; This function uses a non-reentrant model
  3619 ;;
  3620                           
  3621                           	psect	text20
  3622  0009D8                     __ptext20:
  3623                           	opt stack 0
  3624  0009D8                     _i2c_read:
  3625                           	opt stack 25
  3626                           
  3627                           ;incstack = 0
  3628                           ;i2c_read@port stored from wreg
  3629  0009D8  6E2E               	movwf	i2c_read@port,c
  3630                           
  3631                           ;drier.c: 372: uint8_t i, j;
  3632                           ;drier.c: 373: for(i = 0; i < bytes; i++)
  3633  0009DA  0E00               	movlw	0
  3634  0009DC  6E2D               	movwf	i2c_read@i,c
  3635  0009DE  D05D               	goto	l139
  3636  0009E0                     
  3637                           ;drier.c: 374: {
  3638                           ;drier.c: 375: uint8_t value = 0;
  3639  0009E0  0E00               	movlw	0
  3640  0009E2  6E2B               	movwf	i2c_read@value,c
  3641                           
  3642                           ;drier.c: 378: set_data(port, 1);
  3643  0009E4  0E01               	movlw	1
  3644  0009E6  6E21               	movwf	set_data@value,c
  3645  0009E8  502E               	movf	i2c_read@port,w,c
  3646  0009EA  EC91  F007         	call	_set_data
  3647                           
  3648                           ;drier.c: 380: for(j = 0; j < 8; j++)
  3649  0009EE  0E00               	movlw	0
  3650  0009F0  6E2C               	movwf	i2c_read@j,c
  3651  0009F2                     l2184:
  3652  0009F2  0E07               	movlw	7
  3653  0009F4  642C               	cpfsgt	i2c_read@j,c
  3654  0009F6  D001               	goto	l141
  3655  0009F8  D018               	goto	u1900
  3656  0009FA                     l141:
  3657                           
  3658                           ;drier.c: 381: {
  3659                           ;drier.c: 382: value <<= 1;
  3660  0009FA  90D8               	bcf	status,0,c
  3661  0009FC  362B               	rlcf	i2c_read@value,f,c
  3662                           
  3663                           ;drier.c: 383: set_clock(port, 1);
  3664  0009FE  0E01               	movlw	1
  3665  000A00  6E21               	movwf	set_clock@value,c
  3666  000A02  502E               	movf	i2c_read@port,w,c
  3667  000A04  ECA1  F007         	call	_set_clock
  3668  000A08                     
  3669                           ;drier.c: 385: {
  3670  000A08  502E               	movf	i2c_read@port,w,c
  3671  000A0A  ECC1  F007         	call	_get_clock
  3672  000A0E  0900               	iorlw	0
  3673  000A10  B4D8               	btfsc	status,2,c
  3674  000A12  D7FA               	goto	l144
  3675                           
  3676                           ;drier.c: 386: }
  3677                           ;drier.c: 388: value |= get_data(port);
  3678  000A14  502E               	movf	i2c_read@port,w,c
  3679  000A16  ECB1  F007         	call	_get_data
  3680  000A1A  122B               	iorwf	i2c_read@value,f,c
  3681                           
  3682                           ;drier.c: 389: set_clock(port, 0);
  3683  000A1C  0E00               	movlw	0
  3684  000A1E  6E21               	movwf	set_clock@value,c
  3685  000A20  502E               	movf	i2c_read@port,w,c
  3686  000A22  ECA1  F007         	call	_set_clock
  3687  000A26  2A2C               	incf	i2c_read@j,f,c
  3688  000A28  D7E4               	goto	l2184
  3689  000A2A                     u1900:
  3690                           
  3691                           ;drier.c: 390: }
  3692                           ;drier.c: 392: i2c_buffer[i] = value;
  3693  000A2A  502D               	movf	i2c_read@i,w,c
  3694  000A2C  0D01               	mullw	1
  3695  000A2E  0E3D               	movlw	low _i2c_buffer
  3696  000A30  24F3               	addwf	prodl,w,c
  3697  000A32  6ED9               	movwf	fsr2l,c
  3698  000A34  0E00               	movlw	high _i2c_buffer
  3699  000A36  20F4               	addwfc	prodh,w,c
  3700  000A38  6EDA               	movwf	fsr2h,c
  3701  000A3A  C02B  FFDF         	movff	i2c_read@value,indf2
  3702                           
  3703                           ;drier.c: 395: if(i >= bytes - 1)
  3704  000A3E  0EFF               	movlw	255
  3705  000A40  6E24               	movwf	??_i2c_read& (0+255),c
  3706  000A42  0EFF               	movlw	255
  3707  000A44  6E25               	movwf	(??_i2c_read+1)& (0+255),c
  3708  000A46  5023               	movf	i2c_read@bytes,w,c
  3709  000A48  6E26               	movwf	(??_i2c_read+2)& (0+255),c
  3710  000A4A  6A27               	clrf	(??_i2c_read+3)& (0+255),c
  3711  000A4C  5024               	movf	??_i2c_read,w,c
  3712  000A4E  2626               	addwf	??_i2c_read+2,f,c
  3713  000A50  5025               	movf	??_i2c_read+1,w,c
  3714  000A52  2227               	addwfc	??_i2c_read+3,f,c
  3715  000A54  502D               	movf	i2c_read@i,w,c
  3716  000A56  6E28               	movwf	(??_i2c_read+4)& (0+255),c
  3717  000A58  6A29               	clrf	(??_i2c_read+5)& (0+255),c
  3718  000A5A  5026               	movf	??_i2c_read+2,w,c
  3719  000A5C  5C28               	subwf	??_i2c_read+4,w,c
  3720  000A5E  5029               	movf	??_i2c_read+5,w,c
  3721  000A60  0A80               	xorlw	128
  3722  000A62  6E2A               	movwf	(??_i2c_read+6)& (0+255),c
  3723  000A64  5027               	movf	??_i2c_read+3,w,c
  3724  000A66  0A80               	xorlw	128
  3725  000A68  582A               	subwfb	(??_i2c_read+6)& (0+255),w,c
  3726  000A6A  A0D8               	btfss	status,0,c
  3727  000A6C  D006               	goto	l146
  3728                           
  3729                           ;drier.c: 396: {
  3730                           ;drier.c: 397: set_data(port, 1);
  3731  000A6E  0E01               	movlw	1
  3732  000A70  6E21               	movwf	set_data@value,c
  3733  000A72  502E               	movf	i2c_read@port,w,c
  3734  000A74  EC91  F007         	call	_set_data
  3735                           
  3736                           ;drier.c: 398: }
  3737  000A78  D005               	goto	l147
  3738  000A7A                     l146:
  3739                           
  3740                           ;drier.c: 399: else
  3741                           ;drier.c: 400: {
  3742                           ;drier.c: 401: set_data(port, 0);
  3743  000A7A  0E00               	movlw	0
  3744  000A7C  6E21               	movwf	set_data@value,c
  3745  000A7E  502E               	movf	i2c_read@port,w,c
  3746  000A80  EC91  F007         	call	_set_data
  3747  000A84                     l147:
  3748                           
  3749                           ;drier.c: 402: }
  3750                           ;drier.c: 405: set_clock(port, 1);
  3751  000A84  0E01               	movlw	1
  3752  000A86  6E21               	movwf	set_clock@value,c
  3753  000A88  502E               	movf	i2c_read@port,w,c
  3754  000A8A  ECA1  F007         	call	_set_clock
  3755                           
  3756                           ;drier.c: 406: set_clock(port, 0);
  3757  000A8E  0E00               	movlw	0
  3758  000A90  6E21               	movwf	set_clock@value,c
  3759  000A92  502E               	movf	i2c_read@port,w,c
  3760  000A94  ECA1  F007         	call	_set_clock
  3761  000A98  2A2D               	incf	i2c_read@i,f,c
  3762  000A9A                     l139:
  3763  000A9A  5023               	movf	i2c_read@bytes,w,c
  3764  000A9C  5C2D               	subwf	i2c_read@i,w,c
  3765  000A9E  B0D8               	btfsc	status,0,c
  3766  000AA0  0012               	return	
  3767  000AA2  D79E               	goto	l140
  3768  000AA4                     __end_of_i2c_read:
  3769                           	opt stack 0
  3770                           tblptru	equ	0xFF8
  3771                           tblptrh	equ	0xFF7
  3772                           tblptrl	equ	0xFF6
  3773                           tablat	equ	0xFF5
  3774                           prodh	equ	0xFF4
  3775                           prodl	equ	0xFF3
  3776                           intcon	equ	0xFF2
  3777                           postinc0	equ	0xFEE
  3778                           wreg	equ	0xFE8
  3779                           indf2	equ	0xFDF
  3780                           postinc2	equ	0xFDE
  3781                           postdec2	equ	0xFDD
  3782                           fsr2h	equ	0xFDA
  3783                           fsr2l	equ	0xFD9
  3784                           status	equ	0xFD8
  3785                           
  3786 ;; *************** function _set_data *****************
  3787 ;; Defined at:
  3788 ;;		line 291 in file "drier.c"
  3789 ;; Parameters:    Size  Location     Type
  3790 ;;  port            1    wreg     unsigned char 
  3791 ;;  value           1   32[COMRAM] unsigned char 
  3792 ;; Auto vars:     Size  Location     Type
  3793 ;;  port            1   33[COMRAM] unsigned char 
  3794 ;; Return value:  Size  Location     Type
  3795 ;;                  1    wreg      void 
  3796 ;; Registers used:
  3797 ;;		wreg, status,2
  3798 ;; Tracked objects:
  3799 ;;		On entry : 0/0
  3800 ;;		On exit  : 0/0
  3801 ;;		Unchanged: 0/0
  3802 ;; Data sizes:     COMRAM   BANK0
  3803 ;;      Params:         1       0
  3804 ;;      Locals:         1       0
  3805 ;;      Temps:          0       0
  3806 ;;      Totals:         2       0
  3807 ;;Total ram usage:        2 bytes
  3808 ;; Hardware stack levels used:    1
  3809 ;; Hardware stack levels required when called:    2
  3810 ;; This function calls:
  3811 ;;		Nothing
  3812 ;; This function is called by:
  3813 ;;		_i2c_write
  3814 ;;		_i2c_read
  3815 ;;		_i2c_start
  3816 ;;		_i2c_stop
  3817 ;; This function uses a non-reentrant model
  3818 ;;
  3819                           
  3820                           	psect	text21
  3821  000F22                     __ptext21:
  3822                           	opt stack 0
  3823  000F22                     _set_data:
  3824                           	opt stack 25
  3825                           
  3826                           ;incstack = 0
  3827                           ;set_data@port stored from wreg
  3828  000F22  6E22               	movwf	set_data@port,c
  3829                           
  3830                           ;drier.c: 293: if(!port)
  3831  000F24  5022               	movf	set_data@port,w,c
  3832  000F26  A4D8               	btfss	status,2,c
  3833  000F28  D006               	goto	l109
  3834                           
  3835                           ;drier.c: 294: {
  3836                           ;drier.c: 295: TRISBbits.TRISB2 = value;
  3837  000F2A  B021               	btfsc	set_data@value,0,c
  3838  000F2C  D002               	bra	u1735
  3839  000F2E  9493               	bcf	3987,2,c	;volatile
  3840  000F30  D001               	bra	u1736
  3841  000F32                     u1735:
  3842  000F32  8493               	bsf	3987,2,c	;volatile
  3843  000F34                     u1736:
  3844                           
  3845                           ;drier.c: 296: }
  3846  000F34  0012               	return	
  3847  000F36                     l109:
  3848                           
  3849                           ;drier.c: 297: else
  3850                           ;drier.c: 298: {
  3851                           ;drier.c: 299: TRISAbits.TRISA6 = value;
  3852  000F36  B021               	btfsc	set_data@value,0,c
  3853  000F38  D002               	bra	u1745
  3854  000F3A  9C92               	bcf	3986,6,c	;volatile
  3855  000F3C  D001               	bra	u1746
  3856  000F3E                     u1745:
  3857  000F3E  8C92               	bsf	3986,6,c	;volatile
  3858  000F40                     u1746:
  3859  000F40  0012               	return	
  3860  000F42                     __end_of_set_data:
  3861                           	opt stack 0
  3862                           tblptru	equ	0xFF8
  3863                           tblptrh	equ	0xFF7
  3864                           tblptrl	equ	0xFF6
  3865                           tablat	equ	0xFF5
  3866                           prodh	equ	0xFF4
  3867                           prodl	equ	0xFF3
  3868                           intcon	equ	0xFF2
  3869                           postinc0	equ	0xFEE
  3870                           wreg	equ	0xFE8
  3871                           indf2	equ	0xFDF
  3872                           postinc2	equ	0xFDE
  3873                           postdec2	equ	0xFDD
  3874                           fsr2h	equ	0xFDA
  3875                           fsr2l	equ	0xFD9
  3876                           status	equ	0xFD8
  3877                           
  3878 ;; *************** function _set_clock *****************
  3879 ;; Defined at:
  3880 ;;		line 304 in file "drier.c"
  3881 ;; Parameters:    Size  Location     Type
  3882 ;;  port            1    wreg     unsigned char 
  3883 ;;  value           1   32[COMRAM] unsigned char 
  3884 ;; Auto vars:     Size  Location     Type
  3885 ;;  port            1   33[COMRAM] unsigned char 
  3886 ;; Return value:  Size  Location     Type
  3887 ;;                  1    wreg      void 
  3888 ;; Registers used:
  3889 ;;		wreg, status,2
  3890 ;; Tracked objects:
  3891 ;;		On entry : 0/0
  3892 ;;		On exit  : 0/0
  3893 ;;		Unchanged: 0/0
  3894 ;; Data sizes:     COMRAM   BANK0
  3895 ;;      Params:         1       0
  3896 ;;      Locals:         1       0
  3897 ;;      Temps:          0       0
  3898 ;;      Totals:         2       0
  3899 ;;Total ram usage:        2 bytes
  3900 ;; Hardware stack levels used:    1
  3901 ;; Hardware stack levels required when called:    2
  3902 ;; This function calls:
  3903 ;;		Nothing
  3904 ;; This function is called by:
  3905 ;;		_i2c_write
  3906 ;;		_i2c_read
  3907 ;;		_i2c_start
  3908 ;;		_i2c_stop
  3909 ;; This function uses a non-reentrant model
  3910 ;;
  3911                           
  3912                           	psect	text22
  3913  000F42                     __ptext22:
  3914                           	opt stack 0
  3915  000F42                     _set_clock:
  3916                           	opt stack 25
  3917                           
  3918                           ;incstack = 0
  3919                           ;set_clock@port stored from wreg
  3920  000F42  6E22               	movwf	set_clock@port,c
  3921                           
  3922                           ;drier.c: 306: if(!port)
  3923  000F44  5022               	movf	set_clock@port,w,c
  3924  000F46  A4D8               	btfss	status,2,c
  3925  000F48  D006               	goto	l114
  3926                           
  3927                           ;drier.c: 307: {
  3928                           ;drier.c: 308: TRISBbits.TRISB3 = value;
  3929  000F4A  B021               	btfsc	set_clock@value,0,c
  3930  000F4C  D002               	bra	u1765
  3931  000F4E  9693               	bcf	3987,3,c	;volatile
  3932  000F50  D001               	bra	u1766
  3933  000F52                     u1765:
  3934  000F52  8693               	bsf	3987,3,c	;volatile
  3935  000F54                     u1766:
  3936                           
  3937                           ;drier.c: 309: }
  3938  000F54  0012               	return	
  3939  000F56                     l114:
  3940                           
  3941                           ;drier.c: 310: else
  3942                           ;drier.c: 311: {
  3943                           ;drier.c: 312: TRISAbits.TRISA7 = value;
  3944  000F56  B021               	btfsc	set_clock@value,0,c
  3945  000F58  D002               	bra	u1775
  3946  000F5A  9E92               	bcf	3986,7,c	;volatile
  3947  000F5C  D001               	bra	u1776
  3948  000F5E                     u1775:
  3949  000F5E  8E92               	bsf	3986,7,c	;volatile
  3950  000F60                     u1776:
  3951  000F60  0012               	return	
  3952  000F62                     __end_of_set_clock:
  3953                           	opt stack 0
  3954                           tblptru	equ	0xFF8
  3955                           tblptrh	equ	0xFF7
  3956                           tblptrl	equ	0xFF6
  3957                           tablat	equ	0xFF5
  3958                           prodh	equ	0xFF4
  3959                           prodl	equ	0xFF3
  3960                           intcon	equ	0xFF2
  3961                           postinc0	equ	0xFEE
  3962                           wreg	equ	0xFE8
  3963                           indf2	equ	0xFDF
  3964                           postinc2	equ	0xFDE
  3965                           postdec2	equ	0xFDD
  3966                           fsr2h	equ	0xFDA
  3967                           fsr2l	equ	0xFD9
  3968                           status	equ	0xFD8
  3969                           
  3970 ;; *************** function _get_data *****************
  3971 ;; Defined at:
  3972 ;;		line 317 in file "drier.c"
  3973 ;; Parameters:    Size  Location     Type
  3974 ;;  port            1    wreg     unsigned char 
  3975 ;; Auto vars:     Size  Location     Type
  3976 ;;  port            1   32[COMRAM] unsigned char 
  3977 ;; Return value:  Size  Location     Type
  3978 ;;                  1    wreg      unsigned char 
  3979 ;; Registers used:
  3980 ;;		wreg, status,2
  3981 ;; Tracked objects:
  3982 ;;		On entry : 0/0
  3983 ;;		On exit  : 0/0
  3984 ;;		Unchanged: 0/0
  3985 ;; Data sizes:     COMRAM   BANK0
  3986 ;;      Params:         0       0
  3987 ;;      Locals:         1       0
  3988 ;;      Temps:          0       0
  3989 ;;      Totals:         1       0
  3990 ;;Total ram usage:        1 bytes
  3991 ;; Hardware stack levels used:    1
  3992 ;; Hardware stack levels required when called:    2
  3993 ;; This function calls:
  3994 ;;		Nothing
  3995 ;; This function is called by:
  3996 ;;		_i2c_write
  3997 ;;		_i2c_read
  3998 ;; This function uses a non-reentrant model
  3999 ;;
  4000                           
  4001                           	psect	text23
  4002  000F62                     __ptext23:
  4003                           	opt stack 0
  4004  000F62                     _get_data:
  4005                           	opt stack 25
  4006                           
  4007                           ;incstack = 0
  4008                           ;get_data@port stored from wreg
  4009  000F62  6E21               	movwf	get_data@port,c
  4010                           
  4011                           ;drier.c: 319: if(!port)
  4012  000F64  5021               	movf	get_data@port,w,c
  4013  000F66  A4D8               	btfss	status,2,c
  4014  000F68  D006               	goto	l119
  4015                           
  4016                           ;drier.c: 320: {
  4017                           ;drier.c: 321: return PORTBbits.RB2;
  4018  000F6A  A481               	btfss	3969,2,c	;volatile
  4019  000F6C  D002               	goto	u1790
  4020  000F6E  0E01               	movlw	1
  4021  000F70  0012               	return	
  4022  000F72                     u1790:
  4023  000F72  0E00               	movlw	0
  4024                           
  4025                           ;drier.c: 322: }
  4026  000F74  0012               	return	
  4027  000F76                     l119:
  4028                           
  4029                           ;drier.c: 323: else
  4030                           ;drier.c: 324: {
  4031                           ;drier.c: 325: return PORTAbits.RA6;
  4032  000F76  AC80               	btfss	3968,6,c	;volatile
  4033  000F78  D002               	goto	u1800
  4034  000F7A  0E01               	movlw	1
  4035  000F7C  0012               	return	
  4036  000F7E                     u1800:
  4037  000F7E  0E00               	movlw	0
  4038  000F80  0012               	return	
  4039  000F82                     __end_of_get_data:
  4040                           	opt stack 0
  4041                           tblptru	equ	0xFF8
  4042                           tblptrh	equ	0xFF7
  4043                           tblptrl	equ	0xFF6
  4044                           tablat	equ	0xFF5
  4045                           prodh	equ	0xFF4
  4046                           prodl	equ	0xFF3
  4047                           intcon	equ	0xFF2
  4048                           postinc0	equ	0xFEE
  4049                           wreg	equ	0xFE8
  4050                           indf2	equ	0xFDF
  4051                           postinc2	equ	0xFDE
  4052                           postdec2	equ	0xFDD
  4053                           fsr2h	equ	0xFDA
  4054                           fsr2l	equ	0xFD9
  4055                           status	equ	0xFD8
  4056                           
  4057 ;; *************** function _get_clock *****************
  4058 ;; Defined at:
  4059 ;;		line 329 in file "drier.c"
  4060 ;; Parameters:    Size  Location     Type
  4061 ;;  port            1    wreg     unsigned char 
  4062 ;; Auto vars:     Size  Location     Type
  4063 ;;  port            1   32[COMRAM] unsigned char 
  4064 ;; Return value:  Size  Location     Type
  4065 ;;                  1    wreg      unsigned char 
  4066 ;; Registers used:
  4067 ;;		wreg, status,2
  4068 ;; Tracked objects:
  4069 ;;		On entry : 0/0
  4070 ;;		On exit  : 0/0
  4071 ;;		Unchanged: 0/0
  4072 ;; Data sizes:     COMRAM   BANK0
  4073 ;;      Params:         0       0
  4074 ;;      Locals:         1       0
  4075 ;;      Temps:          0       0
  4076 ;;      Totals:         1       0
  4077 ;;Total ram usage:        1 bytes
  4078 ;; Hardware stack levels used:    1
  4079 ;; Hardware stack levels required when called:    2
  4080 ;; This function calls:
  4081 ;;		Nothing
  4082 ;; This function is called by:
  4083 ;;		_i2c_write
  4084 ;;		_i2c_read
  4085 ;; This function uses a non-reentrant model
  4086 ;;
  4087                           
  4088                           	psect	text24
  4089  000F82                     __ptext24:
  4090                           	opt stack 0
  4091  000F82                     _get_clock:
  4092                           	opt stack 25
  4093                           
  4094                           ;incstack = 0
  4095                           ;get_clock@port stored from wreg
  4096  000F82  6E21               	movwf	get_clock@port,c
  4097                           
  4098                           ;drier.c: 331: if(!port)
  4099  000F84  5021               	movf	get_clock@port,w,c
  4100  000F86  A4D8               	btfss	status,2,c
  4101  000F88  D006               	goto	l124
  4102                           
  4103                           ;drier.c: 332: {
  4104                           ;drier.c: 333: return PORTBbits.RB3;
  4105  000F8A  A681               	btfss	3969,3,c	;volatile
  4106  000F8C  D002               	goto	u1820
  4107  000F8E  0E01               	movlw	1
  4108  000F90  0012               	return	
  4109  000F92                     u1820:
  4110  000F92  0E00               	movlw	0
  4111                           
  4112                           ;drier.c: 334: }
  4113  000F94  0012               	return	
  4114  000F96                     l124:
  4115                           
  4116                           ;drier.c: 335: else
  4117                           ;drier.c: 336: {
  4118                           ;drier.c: 337: return PORTAbits.RA7;
  4119  000F96  AE80               	btfss	3968,7,c	;volatile
  4120  000F98  D002               	goto	u1830
  4121  000F9A  0E01               	movlw	1
  4122  000F9C  0012               	return	
  4123  000F9E                     u1830:
  4124  000F9E  0E00               	movlw	0
  4125  000FA0  0012               	return	
  4126  000FA2                     __end_of_get_clock:
  4127                           	opt stack 0
  4128                           tblptru	equ	0xFF8
  4129                           tblptrh	equ	0xFF7
  4130                           tblptrl	equ	0xFF6
  4131                           tablat	equ	0xFF5
  4132                           prodh	equ	0xFF4
  4133                           prodl	equ	0xFF3
  4134                           intcon	equ	0xFF2
  4135                           postinc0	equ	0xFEE
  4136                           wreg	equ	0xFE8
  4137                           indf2	equ	0xFDF
  4138                           postinc2	equ	0xFDE
  4139                           postdec2	equ	0xFDD
  4140                           fsr2h	equ	0xFDA
  4141                           fsr2l	equ	0xFD9
  4142                           status	equ	0xFD8
  4143                           
  4144 ;; *************** function _isr *****************
  4145 ;; Defined at:
  4146 ;;		line 794 in file "drier.c"
  4147 ;; Parameters:    Size  Location     Type
  4148 ;;		None
  4149 ;; Auto vars:     Size  Location     Type
  4150 ;;		None
  4151 ;; Return value:  Size  Location     Type
  4152 ;;                  1    wreg      void 
  4153 ;; Registers used:
  4154 ;;		wreg, status,2, status,0, cstack
  4155 ;; Tracked objects:
  4156 ;;		On entry : 0/0
  4157 ;;		On exit  : 0/0
  4158 ;;		Unchanged: 0/0
  4159 ;; Data sizes:     COMRAM   BANK0
  4160 ;;      Params:         0       0
  4161 ;;      Locals:         0       0
  4162 ;;      Temps:         19       0
  4163 ;;      Totals:        19       0
  4164 ;;Total ram usage:       19 bytes
  4165 ;; Hardware stack levels used:    1
  4166 ;; Hardware stack levels required when called:    1
  4167 ;; This function calls:
  4168 ;;		___lldiv
  4169 ;; This function is called by:
  4170 ;;		Interrupt level 2
  4171 ;; This function uses a non-reentrant model
  4172 ;;
  4173                           
  4174                           	psect	intcode
  4175  000008                     __pintcode:
  4176                           	opt stack 0
  4177  000008                     _isr:
  4178                           	opt stack 24
  4179                           
  4180                           ;incstack = 0
  4181  000008  825F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4182  00000A  CFFA F00F          	movff	pclath,??_isr+1
  4183  00000E  CFFB F010          	movff	pclatu,??_isr+2
  4184  000012  CFE9 F011          	movff	fsr0l,??_isr+3
  4185  000016  CFEA F012          	movff	fsr0h,??_isr+4
  4186  00001A  CFE1 F013          	movff	fsr1l,??_isr+5
  4187  00001E  CFE2 F014          	movff	fsr1h,??_isr+6
  4188  000022  CFD9 F015          	movff	fsr2l,??_isr+7
  4189  000026  CFDA F016          	movff	fsr2h,??_isr+8
  4190  00002A  CFF3 F017          	movff	prodl,??_isr+9
  4191  00002E  CFF4 F018          	movff	prodh,??_isr+10
  4192  000032  CFF6 F019          	movff	tblptrl,??_isr+11
  4193  000036  CFF7 F01A          	movff	tblptrh,??_isr+12
  4194  00003A  CFF8 F01B          	movff	tblptru,??_isr+13
  4195  00003E  CFF5 F01C          	movff	tablat,??_isr+14
  4196  000042  C05F  F01D         	movff	btemp,??_isr+15
  4197  000046  C060  F01E         	movff	btemp+1,??_isr+16
  4198  00004A  C061  F01F         	movff	btemp+2,??_isr+17
  4199  00004E  C062  F020         	movff	btemp+3,??_isr+18
  4200  000052                     i2l230:
  4201                           
  4202                           ;drier.c: 797: {
  4203                           ;drier.c: 798: flags.interrupt_complete = 1;
  4204  000052  804B               	bsf	_flags,0,c	;volatile
  4205                           
  4206                           ;drier.c: 802: if(INTCONbits.TMR0IF)
  4207  000054  A4F2               	btfss	intcon,2,c	;volatile
  4208  000056  D057               	goto	i2l239
  4209                           
  4210                           ;drier.c: 803: {
  4211                           ;drier.c: 804: flags.interrupt_complete = 0;
  4212  000058  904B               	bcf	_flags,0,c	;volatile
  4213                           
  4214                           ;drier.c: 805: INTCONbits.TMR0IF = 0;
  4215  00005A  94F2               	bcf	intcon,2,c	;volatile
  4216                           
  4217                           ;drier.c: 806: TMR0 = -7812;
  4218  00005C  0EE1               	movlw	225
  4219  00005E  6ED7               	movwf	4055,c	;volatile
  4220  000060  0E7C               	movlw	124
  4221  000062  6ED6               	movwf	4054,c	;volatile
  4222                           
  4223                           ;drier.c: 807: pump_tick++;
  4224  000064  2A4F               	incf	_pump_tick,f,c	;volatile
  4225                           
  4226                           ;drier.c: 808: led_tick++;
  4227  000066  2A4D               	incf	_led_tick,f,c	;volatile
  4228                           
  4229                           ;drier.c: 809: fuse_tick++;
  4230  000068  2A4E               	incf	_fuse_tick,f,c	;volatile
  4231                           
  4232                           ;drier.c: 811: if(fuse_tick == (32 / 4))
  4233  00006A  0E08               	movlw	8
  4234  00006C  184E               	xorwf	_fuse_tick,w,c	;volatile
  4235  00006E  A4D8               	btfss	status,2,c
  4236  000070  D030               	goto	i2l236
  4237                           
  4238                           ;drier.c: 812: {
  4239                           ;drier.c: 813: fuse_tick = 0;
  4240  000072  0E00               	movlw	0
  4241  000074  6E4E               	movwf	_fuse_tick,c	;volatile
  4242                           
  4243                           ;drier.c: 814: flags.got_fuse = 1;
  4244  000076  884B               	bsf	_flags,4,c	;volatile
  4245                           
  4246                           ;drier.c: 815: fuse_value = fuse_accum / fuse_count;
  4247  000078  C045  F001         	movff	_fuse_accum,___lldiv@dividend
  4248  00007C  C046  F002         	movff	_fuse_accum+1,___lldiv@dividend+1
  4249  000080  C047  F003         	movff	_fuse_accum+2,___lldiv@dividend+2
  4250  000084  C048  F004         	movff	_fuse_accum+3,___lldiv@dividend+3
  4251  000088  C049  F005         	movff	_fuse_count,___lldiv@divisor
  4252  00008C  C04A  F006         	movff	_fuse_count+1,___lldiv@divisor+1
  4253  000090  6A07               	clrf	___lldiv@divisor+2,c
  4254  000092  6A08               	clrf	___lldiv@divisor+3,c
  4255  000094  EC94  F005         	call	___lldiv	;wreg free
  4256  000098  5001               	movf	?___lldiv,w,c
  4257  00009A  6E50               	movwf	_fuse_value,c
  4258                           
  4259                           ;drier.c: 816: fuse_accum = 0;
  4260  00009C  0E00               	movlw	0
  4261  00009E  6E45               	movwf	_fuse_accum,c
  4262  0000A0  0E00               	movlw	0
  4263  0000A2  6E46               	movwf	_fuse_accum+1,c
  4264  0000A4  0E00               	movlw	0
  4265  0000A6  6E47               	movwf	_fuse_accum+2,c
  4266  0000A8  0E00               	movlw	0
  4267  0000AA  6E48               	movwf	_fuse_accum+3,c
  4268                           
  4269                           ;drier.c: 817: fuse_count = 0;
  4270  0000AC  0E00               	movlw	0
  4271  0000AE  6E4A               	movwf	_fuse_count+1,c
  4272  0000B0  0E00               	movlw	0
  4273  0000B2  6E49               	movwf	_fuse_count,c
  4274                           
  4275                           ;drier.c: 819: if(LATAbits.LATA1)
  4276  0000B4  A289               	btfss	3977,1,c	;volatile
  4277  0000B6  D00D               	goto	i2l236
  4278                           
  4279                           ;drier.c: 820: {
  4280                           ;drier.c: 822: if(flags.ignore_fuse &&
  4281                           ;drier.c: 823: pump_tick > (32))
  4282  0000B8  A64B               	btfss	_flags,3,c	;volatile
  4283  0000BA  D004               	goto	i2l234
  4284  0000BC  0E20               	movlw	32
  4285  0000BE  644F               	cpfsgt	_pump_tick,c	;volatile
  4286  0000C0  D001               	goto	i2l234
  4287                           
  4288                           ;drier.c: 824: {
  4289                           ;drier.c: 825: flags.ignore_fuse = 0;
  4290  0000C2  964B               	bcf	_flags,3,c	;volatile
  4291  0000C4                     i2l234:
  4292                           
  4293                           ;drier.c: 826: }
  4294                           ;drier.c: 829: if(!flags.ignore_fuse)
  4295  0000C4  B64B               	btfsc	_flags,3,c	;volatile
  4296  0000C6  D005               	goto	i2l236
  4297                           
  4298                           ;drier.c: 830: {
  4299                           ;drier.c: 831: if(fuse_value < 210)
  4300  0000C8  0ED2               	movlw	210
  4301  0000CA  6050               	cpfslt	_fuse_value,c
  4302  0000CC  D002               	goto	i2l236
  4303                           
  4304                           ;drier.c: 832: {
  4305                           ;drier.c: 833: flags.fuse_blown = 1;
  4306  0000CE  844B               	bsf	_flags,2,c	;volatile
  4307                           
  4308                           ;drier.c: 834: LATAbits.LATA1 = 0;
  4309  0000D0  9289               	bcf	3977,1,c	;volatile
  4310  0000D2                     i2l236:
  4311                           
  4312                           ;drier.c: 835: }
  4313                           ;drier.c: 836: }
  4314                           ;drier.c: 837: }
  4315                           ;drier.c: 838: }
  4316                           ;drier.c: 841: if(pump_tick == (32 * 5))
  4317  0000D2  0EA0               	movlw	160
  4318  0000D4  184F               	xorwf	_pump_tick,w,c	;volatile
  4319  0000D6  A4D8               	btfss	status,2,c
  4320  0000D8  D003               	goto	i2l237
  4321                           
  4322                           ;drier.c: 842: {
  4323                           ;drier.c: 843: flags.update_pump = 1;
  4324  0000DA  824B               	bsf	_flags,1,c	;volatile
  4325                           
  4326                           ;drier.c: 844: pump_tick = 0;
  4327  0000DC  0E00               	movlw	0
  4328  0000DE  6E4F               	movwf	_pump_tick,c	;volatile
  4329  0000E0                     i2l237:
  4330                           
  4331                           ;drier.c: 845: }
  4332                           ;drier.c: 848: if(led_tick == 32 / 2)
  4333  0000E0  0E10               	movlw	16
  4334  0000E2  184D               	xorwf	_led_tick,w,c	;volatile
  4335  0000E4  A4D8               	btfss	status,2,c
  4336  0000E6  D00F               	goto	i2l239
  4337                           
  4338                           ;drier.c: 849: {
  4339                           ;drier.c: 850: led_tick = 0;
  4340  0000E8  0E00               	movlw	0
  4341  0000EA  6E4D               	movwf	_led_tick,c	;volatile
  4342                           
  4343                           ;drier.c: 851: if(flags.fuse_blown)
  4344  0000EC  A44B               	btfss	_flags,2,c	;volatile
  4345  0000EE  D00B               	goto	i2l239
  4346                           
  4347                           ;drier.c: 852: {
  4348                           ;drier.c: 853: LATAbits.LATA0 = !LATAbits.LATA0;
  4349  0000F0  B089               	btfsc	3977,0,c	;volatile
  4350  0000F2  D003               	goto	i2u168_40
  4351  0000F4  6A0E               	clrf	??_isr& (0+255),c
  4352  0000F6  2A0E               	incf	??_isr& (0+255),f,c
  4353  0000F8  D001               	goto	i2u169_48
  4354  0000FA                     i2u168_40:
  4355  0000FA  6A0E               	clrf	??_isr& (0+255),c
  4356  0000FC                     i2u169_48:
  4357  0000FC  5089               	movf	3977,w,c	;volatile
  4358  0000FE  180E               	xorwf	??_isr,w,c
  4359  000100  0BFE               	andlw	-2
  4360  000102  180E               	xorwf	??_isr,w,c
  4361  000104  6E89               	movwf	3977,c	;volatile
  4362  000106                     i2l239:
  4363                           
  4364                           ;drier.c: 854: }
  4365                           ;drier.c: 855: }
  4366                           ;drier.c: 856: }
  4367                           ;drier.c: 858: if(PIR1bits.ADIF)
  4368  000106  AC9E               	btfss	3998,6,c	;volatile
  4369  000108  D00B               	goto	i2l240
  4370                           
  4371                           ;drier.c: 859: {
  4372                           ;drier.c: 860: PIR1bits.ADIF = 0;
  4373  00010A  9C9E               	bcf	3998,6,c	;volatile
  4374                           
  4375                           ;drier.c: 861: flags.interrupt_complete = 0;
  4376  00010C  904B               	bcf	_flags,0,c	;volatile
  4377                           
  4378                           ;drier.c: 862: fuse_accum += ADRESH;
  4379  00010E  50C4               	movf	4036,w,c	;volatile
  4380  000110  2645               	addwf	_fuse_accum,f,c
  4381  000112  0E00               	movlw	0
  4382  000114  2246               	addwfc	_fuse_accum+1,f,c
  4383  000116  2247               	addwfc	_fuse_accum+2,f,c
  4384  000118  2248               	addwfc	_fuse_accum+3,f,c
  4385                           
  4386                           ;drier.c: 863: fuse_count++;
  4387  00011A  4A49               	infsnz	_fuse_count,f,c
  4388  00011C  2A4A               	incf	_fuse_count+1,f,c
  4389                           
  4390                           ;drier.c: 865: ADCON0bits.GO = 1;
  4391  00011E  82C2               	bsf	4034,1,c	;volatile
  4392  000120                     i2l240:
  4393                           
  4394                           ;drier.c: 866: }
  4395                           ;drier.c: 868: if(flags.interrupt_complete) break;
  4396  000120  A04B               	btfss	_flags,0,c	;volatile
  4397  000122  D797               	goto	i2l230
  4398  000124  C020  F062         	movff	??_isr+18,btemp+3
  4399  000128  C01F  F061         	movff	??_isr+17,btemp+2
  4400  00012C  C01E  F060         	movff	??_isr+16,btemp+1
  4401  000130  C01D  F05F         	movff	??_isr+15,btemp
  4402  000134  C01C  FFF5         	movff	??_isr+14,tablat
  4403  000138  C01B  FFF8         	movff	??_isr+13,tblptru
  4404  00013C  C01A  FFF7         	movff	??_isr+12,tblptrh
  4405  000140  C019  FFF6         	movff	??_isr+11,tblptrl
  4406  000144  C018  FFF4         	movff	??_isr+10,prodh
  4407  000148  C017  FFF3         	movff	??_isr+9,prodl
  4408  00014C  C016  FFDA         	movff	??_isr+8,fsr2h
  4409  000150  C015  FFD9         	movff	??_isr+7,fsr2l
  4410  000154  C014  FFE2         	movff	??_isr+6,fsr1h
  4411  000158  C013  FFE1         	movff	??_isr+5,fsr1l
  4412  00015C  C012  FFEA         	movff	??_isr+4,fsr0h
  4413  000160  C011  FFE9         	movff	??_isr+3,fsr0l
  4414  000164  C010  FFFB         	movff	??_isr+2,pclatu
  4415  000168  C00F  FFFA         	movff	??_isr+1,pclath
  4416  00016C  925F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4417  00016E  0011               	retfie		f
  4418  000170                     __end_of_isr:
  4419                           	opt stack 0
  4420                           pclatu	equ	0xFFB
  4421                           pclath	equ	0xFFA
  4422                           tblptru	equ	0xFF8
  4423                           tblptrh	equ	0xFF7
  4424                           tblptrl	equ	0xFF6
  4425                           tablat	equ	0xFF5
  4426                           prodh	equ	0xFF4
  4427                           prodl	equ	0xFF3
  4428                           intcon	equ	0xFF2
  4429                           postinc0	equ	0xFEE
  4430                           fsr0h	equ	0xFEA
  4431                           fsr0l	equ	0xFE9
  4432                           wreg	equ	0xFE8
  4433                           fsr1h	equ	0xFE2
  4434                           fsr1l	equ	0xFE1
  4435                           indf2	equ	0xFDF
  4436                           postinc2	equ	0xFDE
  4437                           postdec2	equ	0xFDD
  4438                           fsr2h	equ	0xFDA
  4439                           fsr2l	equ	0xFD9
  4440                           status	equ	0xFD8
  4441                           
  4442 ;; *************** function ___lldiv *****************
  4443 ;; Defined at:
  4444 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/lldiv.c"
  4445 ;; Parameters:    Size  Location     Type
  4446 ;;  dividend        4    0[COMRAM] unsigned long 
  4447 ;;  divisor         4    4[COMRAM] unsigned long 
  4448 ;; Auto vars:     Size  Location     Type
  4449 ;;  quotient        4    8[COMRAM] unsigned long 
  4450 ;;  counter         1   12[COMRAM] unsigned char 
  4451 ;; Return value:  Size  Location     Type
  4452 ;;                  4    0[COMRAM] unsigned long 
  4453 ;; Registers used:
  4454 ;;		wreg, status,2, status,0
  4455 ;; Tracked objects:
  4456 ;;		On entry : 0/0
  4457 ;;		On exit  : 0/0
  4458 ;;		Unchanged: 0/0
  4459 ;; Data sizes:     COMRAM   BANK0
  4460 ;;      Params:         8       0
  4461 ;;      Locals:         5       0
  4462 ;;      Temps:          0       0
  4463 ;;      Totals:        13       0
  4464 ;;Total ram usage:       13 bytes
  4465 ;; Hardware stack levels used:    1
  4466 ;; This function calls:
  4467 ;;		Nothing
  4468 ;; This function is called by:
  4469 ;;		_isr
  4470 ;; This function uses a non-reentrant model
  4471 ;;
  4472                           
  4473                           	psect	text26
  4474  000B28                     __ptext26:
  4475                           	opt stack 0
  4476  000B28                     ___lldiv:
  4477                           	opt stack 24
  4478                           
  4479                           ;incstack = 0
  4480  000B28  0E00               	movlw	0
  4481  000B2A  6E09               	movwf	___lldiv@quotient,c
  4482  000B2C  0E00               	movlw	0
  4483  000B2E  6E0A               	movwf	___lldiv@quotient+1,c
  4484  000B30  0E00               	movlw	0
  4485  000B32  6E0B               	movwf	___lldiv@quotient+2,c
  4486  000B34  0E00               	movlw	0
  4487  000B36  6E0C               	movwf	___lldiv@quotient+3,c
  4488  000B38  5005               	movf	___lldiv@divisor,w,c
  4489  000B3A  1006               	iorwf	___lldiv@divisor+1,w,c
  4490  000B3C  1007               	iorwf	___lldiv@divisor+2,w,c
  4491  000B3E  1008               	iorwf	___lldiv@divisor+3,w,c
  4492  000B40  B4D8               	btfsc	status,2,c
  4493  000B42  D02A               	goto	i2l602
  4494  000B44  0E01               	movlw	1
  4495  000B46  6E0D               	movwf	___lldiv@counter,c
  4496  000B48  D006               	goto	i2l597
  4497  000B4A  90D8               	bcf	status,0,c
  4498  000B4C  3605               	rlcf	___lldiv@divisor,f,c
  4499  000B4E  3606               	rlcf	___lldiv@divisor+1,f,c
  4500  000B50  3607               	rlcf	___lldiv@divisor+2,f,c
  4501  000B52  3608               	rlcf	___lldiv@divisor+3,f,c
  4502  000B54  2A0D               	incf	___lldiv@counter,f,c
  4503  000B56                     i2l597:
  4504  000B56  AE08               	btfss	___lldiv@divisor+3,7,c
  4505  000B58  D7F8               	goto	i2l598
  4506  000B5A                     i2u138_40:
  4507  000B5A  90D8               	bcf	status,0,c
  4508  000B5C  3609               	rlcf	___lldiv@quotient,f,c
  4509  000B5E  360A               	rlcf	___lldiv@quotient+1,f,c
  4510  000B60  360B               	rlcf	___lldiv@quotient+2,f,c
  4511  000B62  360C               	rlcf	___lldiv@quotient+3,f,c
  4512  000B64  5005               	movf	___lldiv@divisor,w,c
  4513  000B66  5C01               	subwf	___lldiv@dividend,w,c
  4514  000B68  5006               	movf	___lldiv@divisor+1,w,c
  4515  000B6A  5802               	subwfb	___lldiv@dividend+1,w,c
  4516  000B6C  5007               	movf	___lldiv@divisor+2,w,c
  4517  000B6E  5803               	subwfb	___lldiv@dividend+2,w,c
  4518  000B70  5008               	movf	___lldiv@divisor+3,w,c
  4519  000B72  5804               	subwfb	___lldiv@dividend+3,w,c
  4520  000B74  A0D8               	btfss	status,0,c
  4521  000B76  D009               	goto	i2l601
  4522  000B78  5005               	movf	___lldiv@divisor,w,c
  4523  000B7A  5E01               	subwf	___lldiv@dividend,f,c
  4524  000B7C  5006               	movf	___lldiv@divisor+1,w,c
  4525  000B7E  5A02               	subwfb	___lldiv@dividend+1,f,c
  4526  000B80  5007               	movf	___lldiv@divisor+2,w,c
  4527  000B82  5A03               	subwfb	___lldiv@dividend+2,f,c
  4528  000B84  5008               	movf	___lldiv@divisor+3,w,c
  4529  000B86  5A04               	subwfb	___lldiv@dividend+3,f,c
  4530  000B88  8009               	bsf	___lldiv@quotient,0,c
  4531  000B8A                     i2l601:
  4532  000B8A  90D8               	bcf	status,0,c
  4533  000B8C  3208               	rrcf	___lldiv@divisor+3,f,c
  4534  000B8E  3207               	rrcf	___lldiv@divisor+2,f,c
  4535  000B90  3206               	rrcf	___lldiv@divisor+1,f,c
  4536  000B92  3205               	rrcf	___lldiv@divisor,f,c
  4537  000B94  2E0D               	decfsz	___lldiv@counter,f,c
  4538  000B96  D7E1               	goto	i2u138_40
  4539  000B98                     i2l602:
  4540  000B98  C009  F001         	movff	___lldiv@quotient,?___lldiv
  4541  000B9C  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  4542  000BA0  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  4543  000BA4  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  4544  000BA8  0012               	return		;funcret
  4545  000BAA                     __end_of___lldiv:
  4546                           	opt stack 0
  4547                           pclatu	equ	0xFFB
  4548                           pclath	equ	0xFFA
  4549                           tblptru	equ	0xFF8
  4550                           tblptrh	equ	0xFF7
  4551                           tblptrl	equ	0xFF6
  4552                           tablat	equ	0xFF5
  4553                           prodh	equ	0xFF4
  4554                           prodl	equ	0xFF3
  4555                           intcon	equ	0xFF2
  4556                           postinc0	equ	0xFEE
  4557                           fsr0h	equ	0xFEA
  4558                           fsr0l	equ	0xFE9
  4559                           wreg	equ	0xFE8
  4560                           fsr1h	equ	0xFE2
  4561                           fsr1l	equ	0xFE1
  4562                           indf2	equ	0xFDF
  4563                           postinc2	equ	0xFDE
  4564                           postdec2	equ	0xFDD
  4565                           fsr2h	equ	0xFDA
  4566                           fsr2l	equ	0xFD9
  4567                           status	equ	0xFD8
  4568                           pclatu	equ	0xFFB
  4569                           pclath	equ	0xFFA
  4570                           tblptru	equ	0xFF8
  4571                           tblptrh	equ	0xFF7
  4572                           tblptrl	equ	0xFF6
  4573                           tablat	equ	0xFF5
  4574                           prodh	equ	0xFF4
  4575                           prodl	equ	0xFF3
  4576                           intcon	equ	0xFF2
  4577                           postinc0	equ	0xFEE
  4578                           fsr0h	equ	0xFEA
  4579                           fsr0l	equ	0xFE9
  4580                           wreg	equ	0xFE8
  4581                           fsr1h	equ	0xFE2
  4582                           fsr1l	equ	0xFE1
  4583                           indf2	equ	0xFDF
  4584                           postinc2	equ	0xFDE
  4585                           postdec2	equ	0xFDD
  4586                           fsr2h	equ	0xFDA
  4587                           fsr2l	equ	0xFD9
  4588                           status	equ	0xFD8
  4589                           
  4590                           	psect	rparam
  4591  0000                     pclatu	equ	0xFFB
  4592                           pclath	equ	0xFFA
  4593                           tblptru	equ	0xFF8
  4594                           tblptrh	equ	0xFF7
  4595                           tblptrl	equ	0xFF6
  4596                           tablat	equ	0xFF5
  4597                           prodh	equ	0xFF4
  4598                           prodl	equ	0xFF3
  4599                           intcon	equ	0xFF2
  4600                           postinc0	equ	0xFEE
  4601                           fsr0h	equ	0xFEA
  4602                           fsr0l	equ	0xFE9
  4603                           wreg	equ	0xFE8
  4604                           fsr1h	equ	0xFE2
  4605                           fsr1l	equ	0xFE1
  4606                           indf2	equ	0xFDF
  4607                           postinc2	equ	0xFDE
  4608                           postdec2	equ	0xFDD
  4609                           fsr2h	equ	0xFDA
  4610                           fsr2l	equ	0xFD9
  4611                           status	equ	0xFD8
  4612                           
  4613                           	psect	temp
  4614  00005F                     btemp:
  4615                           	opt stack 0
  4616  00005F                     	ds	1
  4617  0000                     int$flags	set	btemp
  4618  0000                     wtemp6	set	btemp+1
  4619                           pclatu	equ	0xFFB
  4620                           pclath	equ	0xFFA
  4621                           tblptru	equ	0xFF8
  4622                           tblptrh	equ	0xFF7
  4623                           tblptrl	equ	0xFF6
  4624                           tablat	equ	0xFF5
  4625                           prodh	equ	0xFF4
  4626                           prodl	equ	0xFF3
  4627                           intcon	equ	0xFF2
  4628                           postinc0	equ	0xFEE
  4629                           fsr0h	equ	0xFEA
  4630                           fsr0l	equ	0xFE9
  4631                           wreg	equ	0xFE8
  4632                           fsr1h	equ	0xFE2
  4633                           fsr1l	equ	0xFE1
  4634                           indf2	equ	0xFDF
  4635                           postinc2	equ	0xFDE
  4636                           postdec2	equ	0xFDD
  4637                           fsr2h	equ	0xFDA
  4638                           fsr2l	equ	0xFD9
  4639                           status	equ	0xFD8


Data Sizes:
    Strings     123
    Constant    100
    Data        0
    BSS         34
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     60      94
    BANK0           128     36      36

Pointer List with Targets:

    print_sensor@ptr	PTR struct . size(2) Largest target is 7
		 -> inside(COMRAM[7]), outside(COMRAM[7]), 

    init_aht20@ptr	PTR struct . size(2) Largest target is 7
		 -> inside(COMRAM[7]), outside(COMRAM[7]), 

    read_aht20@ptr	PTR struct . size(2) Largest target is 7
		 -> inside(COMRAM[7]), outside(COMRAM[7]), 

    print_text@text	PTR const unsigned char  size(2) Largest target is 31
		 -> STR_10(CODE[22]), STR_9(CODE[23]), STR_8(CODE[4]), STR_7(CODE[4]), 
		 -> STR_6(CODE[11]), STR_5(CODE[22]), STR_4(CODE[31]), STR_3(CODE[3]), 
		 -> STR_2(CODE[3]), STR_1(CODE[3]), 

    print_text@ptr	PTR const unsigned char  size(2) Largest target is 31
		 -> STR_10(CODE[22]), STR_9(CODE[23]), STR_8(CODE[4]), STR_7(CODE[4]), 
		 -> STR_6(CODE[11]), STR_5(CODE[22]), STR_4(CODE[31]), STR_3(CODE[3]), 
		 -> STR_2(CODE[3]), STR_1(CODE[3]), 


Critical Paths under _main in COMRAM

    _main->_read_aht20
    _read_aht20->___aldiv
    ___aldiv->___lmul
    _print_sensor->_print_fixed
    _print_text->_send_uart
    _print_fixed->___awdiv
    _print_lf->_send_uart
    _init_aht20->_aht20_status
    _i2c_write_device2->_i2c_write
    _aht20_status->_i2c_read_device2
    _i2c_read_device2->_i2c_read
    _i2c_write->_set_clock
    _i2c_write->_set_data
    _i2c_stop->_set_clock
    _i2c_stop->_set_data
    _i2c_start->_set_clock
    _i2c_start->_set_data
    _i2c_read->_set_clock
    _i2c_read->_set_data

Critical Paths under _isr in COMRAM

    _isr->___lldiv

Critical Paths under _main in BANK0

    _main->_read_aht20

Critical Paths under _isr in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10     5      5   57255
                                             26 BANK0     10     5      5
                         _init_aht20
                           _print_lf
                       _print_sensor
                         _print_text
                         _read_aht20
 ---------------------------------------------------------------------------------
 (1) _read_aht20                                          28    26      2   33026
                                             58 COMRAM     2     0      2
                                              0 BANK0     26    26      0
                            ___aldiv
                            ___awdiv
                             ___lmul
                       _aht20_status
                   _i2c_read_device2
                  _i2c_write_device2
                         _log_lookup
 ---------------------------------------------------------------------------------
 (2) _log_lookup                                           7     5      2     251
                                             32 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     936
                                             32 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8    1105
                                             44 COMRAM    14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _print_sensor                                         2     0      2    4370
                                             53 COMRAM     2     0      2
                        _print_fixed
                         _print_text
 ---------------------------------------------------------------------------------
 (1) _print_text                                           4     2      2     843
                                             33 COMRAM     4     2      2
                          _send_uart
 ---------------------------------------------------------------------------------
 (2) _print_fixed                                         13    11      2    3254
                                             40 COMRAM    13    11      2
                            ___awdiv
                            ___lwdiv
                             ___wmul
                          _send_uart
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     463
                                             32 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     922
                                             32 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     925
                                             32 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _print_lf                                             0     0      0      15
                          _send_uart
 ---------------------------------------------------------------------------------
 (2) _send_uart                                            1     1      0      15
                                             32 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _init_aht20                                           4     1      3   19001
                                             50 COMRAM     4     1      3
                       _aht20_status
                  _i2c_write_device2
 ---------------------------------------------------------------------------------
 (2) _i2c_write_device2                                    3     2      1    7878
                                             38 COMRAM     3     2      1
                          _i2c_start
                           _i2c_stop
                          _i2c_write
 ---------------------------------------------------------------------------------
 (2) _aht20_status                                         1     1      0   10608
                                             49 COMRAM     1     1      0
                   _i2c_read_device2
 ---------------------------------------------------------------------------------
 (2) _i2c_read_device2                                     3     2      1   10577
                                             46 COMRAM     3     2      1
                           _i2c_read
                          _i2c_start
                           _i2c_stop
                          _i2c_write
 ---------------------------------------------------------------------------------
 (3) _i2c_write                                            4     3      1    3196
                                             34 COMRAM     4     3      1
                          _get_clock
                           _get_data
                          _set_clock
                           _set_data
 ---------------------------------------------------------------------------------
 (3) _i2c_stop                                             1     1      0    2079
                                             34 COMRAM     1     1      0
                          _set_clock
                           _set_data
 ---------------------------------------------------------------------------------
 (3) _i2c_start                                            1     1      0    2110
                                             34 COMRAM     1     1      0
                          _set_clock
                           _set_data
 ---------------------------------------------------------------------------------
 (3) _i2c_read                                            12    11      1    2758
                                             34 COMRAM    12    11      1
                          _get_clock
                           _get_data
                          _set_clock
                           _set_data
 ---------------------------------------------------------------------------------
 (4) _set_data                                             2     1      1     903
                                             32 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (4) _set_clock                                            2     1      1    1083
                                             32 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (4) _get_data                                             1     1      0      22
                                             32 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _get_clock                                            1     1      0      22
                                             32 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _isr                                                 19    19      0     314
                                             13 COMRAM    19    19      0
                            ___lldiv
 ---------------------------------------------------------------------------------
 (7) ___lldiv                                             13     5      8     314
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init_aht20
     _aht20_status
       _i2c_read_device2
         _i2c_read
           _get_clock
           _get_data
           _set_clock
           _set_data
         _i2c_start
           _set_clock
           _set_data
         _i2c_stop
           _set_clock
           _set_data
         _i2c_write
           _get_clock
           _get_data
           _set_clock
           _set_data
     _i2c_write_device2
       _i2c_start
         _set_clock
         _set_data
       _i2c_stop
         _set_clock
         _set_data
       _i2c_write
         _get_clock
         _get_data
         _set_clock
         _set_data
   _print_lf
     _send_uart
   _print_sensor
     _print_fixed
       ___awdiv
       ___lwdiv
       ___wmul
       _send_uart
     _print_text
       _send_uart
   _print_text
     _send_uart
   _read_aht20
     ___aldiv
       ___lmul (ARG)
     ___awdiv
     ___lmul
     _aht20_status
       _i2c_read_device2
         _i2c_read
           _get_clock
           _get_data
           _set_clock
           _set_data
         _i2c_start
           _set_clock
           _set_data
         _i2c_stop
           _set_clock
           _set_data
         _i2c_write
           _get_clock
           _get_data
           _set_clock
           _set_data
     _i2c_read_device2
       _i2c_read
         _get_clock
         _get_data
         _set_clock
         _set_data
       _i2c_start
         _set_clock
         _set_data
       _i2c_stop
         _set_clock
         _set_data
       _i2c_write
         _get_clock
         _get_data
         _set_clock
         _set_data
     _i2c_write_device2
       _i2c_start
         _set_clock
         _set_data
       _i2c_stop
         _set_clock
         _set_data
       _i2c_write
         _get_clock
         _get_data
         _set_clock
         _set_data
     _log_lookup

 _isr (ROOT)
   ___lldiv

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
EEDATA             100      0       0       0        0.0%
BIGRAM              FF      0       0       6        0.0%
BITBANK0            80      0       0       3        0.0%
BANK0               80     24      24       4       28.1%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3C      5E       1       74.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      82       5        0.0%
DATA                 0      0      82       7        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Feb  4 04:06:54 2022

              get_data@port 0021                          l77 0E9A                          l78 0E86  
                        l96 07EC                          l97 0870                          l98 0812  
                        l99 0854                ___awdiv@sign 0026                 __CFG_BOR$ON 000000  
       ___wmul@multiplicand 0023                __CFG_CP0$OFF 000000                __CFG_CP1$OFF 000000  
               __CFG_WDT$ON 000000                         l103 0902                         l114 0F56  
                       l210 0716                         l131 0C4C                         l211 0776  
                       l124 0F96                         l140 09E0                         l132 0C56  
                       l220 07CC                         l109 0F36                         l141 09FA  
                       l213 0734                         l134 0C7C                         l310 09B0  
                       l302 0928                         l119 0F76                         l311 09C6  
                       l303 0940                         l207 06AA                         l144 0A08  
                       l208 07D0                         l129 0C3C                         l305 096E  
                       l209 0714                         l146 0A7A                         l306 0962  
                       l139 0A9A                         l147 0A84                         l164 0DD0  
                       l165 0DBA                         l173 0E2E                         l421 0B06  
                       l309 09A2                         l174 0E12                         l422 0B10  
                       l414 0AB8                         l182 0BEA                         l423 0B1E  
                       l415 0AC8                         l191 0300                         l417 0AE6  
                       l185 0C0E                         l418 0ADE                         l258 0D1A  
                       l259 0D2E                         l187 0C20                         l197 0E6E  
                       l650 0D7E                         l651 0D76                         l654 0D9E  
                       l655 0DA8                         l952 0FD2                __CFG_CPB$OFF 000000  
          print_fixed@y_657 002D                __CFG_CPD$OFF 000000            print_fixed@force 0031  
                       _isr 0008                __CFG_BORV$27 000000                         prod 000FF3  
          print_fixed@whole 0030                         wreg 000FE8                __CFG_FSCM$ON 000000  
              __CFG_IESO$ON 000000                __CFG_LVP$OFF 000000                        l2312 08BE  
                      l2156 0C34                        l2184 09F2                        l2288 0812  
                      ?_isr 0001                        STR_1 02DA                        STR_2 02DD  
                      STR_3 02DA                        STR_4 0265                        STR_5 029B  
                      STR_6 02C7                        STR_7 02D2                        STR_8 02D6  
                      STR_9 0284                        u1130 0D82                        u2020 082A  
                      u2050 08BE                        u2150 0972                        u2320 07B2  
                      u1800 0F7E                        u2195 0348                        u1820 0F92  
                      u1900 0A2A                        u1830 0F9E                        u1735 0F32  
                      u1736 0F34                        u1745 0F3E                        u1746 0F40  
                      u1860 0C72                        u1765 0F52                        u1790 0F72  
                      u1766 0F54                        u1775 0F5E                        u1776 0F60  
                      u1970 0AEA                        _TMR0 000FD6                __CFG_PWRT$ON 000000  
              __CFG_STVR$ON 000000                        _main 05EA                        fsr0h 000FEA  
                      fsr1h 000FE2                        fsr2h 000FDA                        fsr0l 000FE9  
                      indf2 000FDF                        fsr1l 000FE1                        fsr2l 000FD9  
                      btemp 005F                        prodh 000FF4                        prodl 000FF3  
                      start 0170               get_clock@port 0021                  i2c_write@i 0025  
              print_fixed@x 0029                print_fixed@y 002F               __CFG_MCLRE$ON 000000  
__size_of_i2c_write_device2 0044                ___param_bank 000000                       ??_isr 000E  
           __end_of___aldiv 09D8                       ?_main 009A             __end_of___awdiv 0B28  
                     STR_10 02B1             __end_of___lldiv 0BAA                       _T0CON 000FD5  
           ___awdiv@divisor 0023             __end_of___lwdiv 0DB2                       i2l230 0052  
                     i2l240 0120                       i2l234 00C4                       i2l236 00D2  
                     i2l237 00E0                       i2l239 0106                       i2l601 0B8A  
                     i2l602 0B98                       i2l597 0B56                       i2l598 0B4A  
           ___awdiv@counter 0025                       _RCSTA 000FAB                       _SPBRG 000FAF  
                     _TXREG 000FAD                       _TXSTA 000FAC               __CFG_WRT0$OFF 000000  
             __CFG_WRT1$OFF 000000         ___lmul@multiplicand 0025              __CFG_EBTR0$OFF 000000  
            __CFG_EBTR1$OFF 000000               __CFG_WRTB$OFF 000000               __CFG_WRTC$OFF 000000  
             __CFG_WRTD$OFF 000000              __CFG_EBTRB$OFF 000000                       _flags 004B  
                     pclath 000FFA                       tablat 000FF5                       status 000FD8  
                     wtemp6 0060                  _i2c_buffer 003D             __initialization 0FA2  
              __end_of_main 07DA            __end_of_i2c_read 0AA4            __end_of_i2c_stop 0F22  
        i2c_write_device2@i 0028                      ??_main 009F               __activetblptr 000001  
             print_text@ptr 0024                      _ADCON0 000FC2                      _ADCON1 000FC1  
                    _ADCON2 000FC0                      _ADRESH 000FC4            ___awdiv@dividend 0021  
     i2c_write_device2@port 0029                i2c_read@port 002E                      _OSCCON 000FD3  
        __size_of_i2c_start 002C          __size_of_i2c_write 0072            __end_of_get_data 0F82  
                    ___lmul 0D0A                   ??___aldiv 0035                      ___wmul 0EDA  
                 ??___awdiv 0025                   ??___lldiv 0009   __size_of_i2c_read_device2 0048  
                 ??___lwdiv 0025                      _inside 0058                      clear_0 0FA8  
          ___awdiv@quotient 0027                 read_aht20@B 008A                 read_aht20@C 008E  
               read_aht20@x 0096                 read_aht20@y 0092            __end_of_set_data 0F42  
              __mediumconst 0000                      tblptrh 000FF7                      tblptrl 000FF6  
                    tblptru 000FF8            __end_of_print_lf 0FE4                i2c_stop@port 0023  
              i2c_write@ack 0024                ?_print_fixed 0029                  __accesstop 0080  
   __end_of__initialization 0FAE               ___rparam_used 000001              __pcstackCOMRAM 0001  
               log_lookup@x 0025                 log_lookup@y 0026       i2c_read_device2@bytes 002F  
         __end_of_i2c_start 0EDA           __end_of_i2c_write 0C9C             __CFG_OSC$INTIO2 000000  
        __size_of_get_clock 0020              print_text@text 0022                   ?_i2c_read 0023  
                 ?_i2c_stop 0001                     ?___lmul 0021                     ?___wmul 0021  
                   _BAUDCTL 000FAA          __size_of_send_uart 000C              ___lmul@product 0029  
        __size_of_set_clock 0020               i2c_read@bytes 0023               i2c_read@value 002B  
            set_clock@value 0021                   ?_get_data 0001                  ??_i2c_read 0024  
                ??_i2c_stop 0023                     __Hparam 0000                     __Lparam 0000  
                 ?_set_data 0021           __end_of_get_clock 0FA2                     ___aldiv 090C  
                 ?_print_lf 0001                     ___awdiv 0AA4             __size_of___lmul 0056  
                   ___lldiv 0B28             __size_of___wmul 0026            _i2c_read_device2 0DB2  
                _init_aht20 0E3E                     ___lwdiv 0D60                __psmallconst 0200  
                _read_aht20 02E2                     __pcinit 0FA2                     __ramtop 0100  
                   __ptext0 05EA                     __ptext1 02E2                     __ptext2 0BAA  
                   __ptext3 0D0A                     __ptext4 090C                     __ptext5 0C9C  
                   __ptext6 0E7C                     __ptext7 07DA                     __ptext8 0EDA  
                   __ptext9 0D60                  _fuse_accum 0045                  _fuse_count 0049  
                _fuse_value 0050                  _log_lookup 0BAA                __size_of_isr 0168  
          ___aldiv@dividend 002D           __end_of_log_table 0265                  ??_get_data 0021  
                   _outside 0051        end_of_initialization 0FAE           __end_of_send_uart 0FDC  
         __end_of_set_clock 0F62        __size_of_print_fixed 0132             ___lldiv@divisor 0005  
             i2c_start@port 0023             ___lldiv@counter 000D                  ??_set_data 0022  
          ___aldiv@quotient 0037                     postdec2 000FDD                  ??_print_lf 0022  
                   postinc0 000FEE                     postinc2 000FDE                   _PORTAbits 000F80  
                 _PORTBbits 000F81                  _print_text 0E7C                   _TRISAbits 000F92  
             i2c_write@port 0026                   _TRISBbits 000F93               ?_print_sensor 0036  
           print_fixed@base 0034             print_fixed@frac 0032                   i2c_read@i 002D  
                 i2c_read@j 002C               ?_aht20_status 0001                 ?_init_aht20 0033  
            __end_of___lmul 0D60                 ?_read_aht20 003B              __end_of___wmul 0F00  
               ?_log_lookup 0021         start_initialization 0FA2              ??_print_sensor 0038  
                 _i2c_start 0EAE                 __end_of_isr 0170                   _i2c_write 0C2A  
            ??_aht20_status 0032        i2c_write_device2@len 0027           __size_of_i2c_read 00CC  
         __size_of_i2c_stop 0022                    ??___lmul 0029                    ??___wmul 0025  
            init_aht20@port 0035             print_sensor@ptr 0036                 ?_print_text 0022  
               __pbssCOMRAM 003D               __pcstackBANK0 0080                  ?_i2c_start 0001  
                ?_i2c_write 0023        i2c_read_device2@port 0031    __end_of_i2c_read_device2 0DFA  
             set_data@value 0021         __size_of_init_aht20 003E           __size_of_get_data 0020  
       __size_of_read_aht20 0308         __size_of_log_lookup 0080            ___lwdiv@dividend 0021  
                 __pintcode 0008                    ?___aldiv 002D                    ?___awdiv 0021  
         __size_of_set_data 0020                    ?___lldiv 0001                    ?___lwdiv 0021  
                 _get_clock 0F82           __size_of_print_lf 0008               set_clock@port 0022  
               __smallconst 0200                  send_uart@c 0021            ___lwdiv@quotient 0025  
                 _log_table 0201                   _fuse_tick 004E             ___aldiv@divisor 0031  
              _duty_counter 004C             ___aldiv@counter 0035              ___wmul@product 0025  
                  _LATAbits 000F89                    _LATBbits 000F8A                    _PIE1bits 000F9D  
                 _send_uart 0FD0         __size_of_print_text 0032                    i2u138_40 0B5A  
                 _set_clock 0F42                    i2u168_40 00FA                    _PIR1bits 000F9E  
                  i2u169_48 00FC        __end_of_print_sensor 0D0A            __CFG_WDTPS$32768 000000  
                ?_get_clock 0001                  _ADCON0bits 000FC2           ___wmul@multiplier 0021  
                 _pump_tick 004F        __end_of_aht20_status 0FD0                 ??_i2c_start 0023  
               ??_i2c_write 0024           ___lmul@multiplier 0021               ??_print_fixed 002B  
                  _i2c_read 09D8                    _i2c_stop 0F00                  ?_send_uart 0001  
                  __Hrparam 0000                  ?_set_clock 0021                    __Lrparam 0000  
              __Lsmallconst 0200               init_aht20@ptr 0033                ??_init_aht20 0036  
          __size_of___aldiv 00CC                ??_read_aht20 0080            __size_of___awdiv 0084  
          __size_of___lldiv 0082            __size_of___lwdiv 0052                set_data@port 0022  
              ??_log_lookup 0023             ___lwdiv@divisor 0023             ___lwdiv@counter 0027  
                  __ptext10 0AA4                    __ptext11 0FDC                    __ptext20 09D8  
                  __ptext12 0FD0                    __ptext21 0F22                    __ptext13 0E3E  
                  __ptext22 0F42                    __ptext14 0DFA                    __ptext23 0F62  
                  __ptext15 0FC0                    __ptext24 0F82                    __ptext16 0DB2  
                  __ptext17 0C2A                    __ptext26 0B28                    __ptext18 0F00  
                  __ptext19 0EAE                    _get_data 0F62                    _led_tick 004D  
        __end_of_init_aht20 0E7C               __size_of_main 01F0          __end_of_read_aht20 05EA  
       __end_of_print_fixed 090C                    _set_data 0F22          __end_of_log_lookup 0C2A  
                  _print_lf 0FDC               read_aht20@ptr 003B                    int$flags 005F  
         _i2c_write_device2 0DFA                    main@argc 009A                    main@argv 009C  
               ??_get_clock 0021          ?_i2c_write_device2 0027                ??_print_text 0024  
          aht20_status@port 0032                  _INTCONbits 000FF2         ??_i2c_write_device2 0028  
                  intlevel2 0000           ?_i2c_read_device2 002F            ___lldiv@dividend 0001  
        ??_i2c_read_device2 0030       __size_of_print_sensor 006E                 ??_send_uart 0021  
               ??_set_clock 0022          __end_of_print_text 0EAE   __end_of_i2c_write_device2 0E3E  
     __size_of_aht20_status 0010           i2c_read_device2@i 0030            ___lldiv@quotient 0009  
              ___aldiv@sign 0036                _print_sensor 0C9C                 _print_fixed 07DA  
              _aht20_status 0FC0              i2c_write@value 0023  
